
Sandbox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061a8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006268  08006268  00016268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006460  08006460  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08006460  08006460  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006460  08006460  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006460  08006460  00016460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006464  08006464  00016464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000080  080064e8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  080064e8  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012c63  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002980  00000000  00000000  00032d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  000356d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dae  00000000  00000000  00036820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003761  00000000  00000000  000375ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016b8b  00000000  00000000  0003ad2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006e457  00000000  00000000  000518ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046f8  00000000  00000000  000bfd14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000c440c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006250 	.word	0x08006250

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08006250 	.word	0x08006250

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	0002      	movs	r2, r0
 800024c:	1dbb      	adds	r3, r7, #6
 800024e:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_0) // если прерывание поступило от ножки PA9
 8000250:	1dbb      	adds	r3, r7, #6
 8000252:	881b      	ldrh	r3, [r3, #0]
 8000254:	2b01      	cmp	r3, #1
 8000256:	d10f      	bne.n	8000278 <HAL_GPIO_EXTI_Callback+0x34>
  {
     // Переключение в противоположное состояние ножки
     // выхода для управления светодиодом (LED):
	  if(TIM3->CCR4 >= 4096)
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <HAL_GPIO_EXTI_Callback+0x3c>)
 800025a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800025c:	2380      	movs	r3, #128	; 0x80
 800025e:	015b      	lsls	r3, r3, #5
 8000260:	429a      	cmp	r2, r3
 8000262:	d303      	bcc.n	800026c <HAL_GPIO_EXTI_Callback+0x28>
		  TIM3->CCR4 = 0;
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000266:	2200      	movs	r2, #0
 8000268:	641a      	str	r2, [r3, #64]	; 0x40
	  else
		  TIM3->CCR4+=500;
  }

}
 800026a:	e005      	b.n	8000278 <HAL_GPIO_EXTI_Callback+0x34>
		  TIM3->CCR4+=500;
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <HAL_GPIO_EXTI_Callback+0x3c>)
 800026e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000270:	4b03      	ldr	r3, [pc, #12]	; (8000280 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000272:	32f5      	adds	r2, #245	; 0xf5
 8000274:	32ff      	adds	r2, #255	; 0xff
 8000276:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000278:	46c0      	nop			; (mov r8, r8)
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}
 8000280:	40000400 	.word	0x40000400

08000284 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
 800028c:	000a      	movs	r2, r1
 800028e:	1cbb      	adds	r3, r7, #2
 8000290:	801a      	strh	r2, [r3, #0]

  if(huart == &huart1)
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	4b3c      	ldr	r3, [pc, #240]	; (8000388 <HAL_UARTEx_RxEventCallback+0x104>)
 8000296:	429a      	cmp	r2, r3
 8000298:	d152      	bne.n	8000340 <HAL_UARTEx_RxEventCallback+0xbc>
  {
	char uart_cmd = 0;
 800029a:	210f      	movs	r1, #15
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2200      	movs	r2, #0
 80002a0:	701a      	strb	r2, [r3, #0]
	int uart_cmd_param = 0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	60bb      	str	r3, [r7, #8]

	sscanf(basic_rx_buff, "-%c %d",&uart_cmd, &uart_cmd_param);
 80002a6:	2308      	movs	r3, #8
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	187a      	adds	r2, r7, r1
 80002ac:	4937      	ldr	r1, [pc, #220]	; (800038c <HAL_UARTEx_RxEventCallback+0x108>)
 80002ae:	4838      	ldr	r0, [pc, #224]	; (8000390 <HAL_UARTEx_RxEventCallback+0x10c>)
 80002b0:	f004 fef6 	bl	80050a0 <siscanf>

    switch(basic_rx_buff[0])
 80002b4:	4b36      	ldr	r3, [pc, #216]	; (8000390 <HAL_UARTEx_RxEventCallback+0x10c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	2b33      	cmp	r3, #51	; 0x33
 80002ba:	d032      	beq.n	8000322 <HAL_UARTEx_RxEventCallback+0x9e>
 80002bc:	dc38      	bgt.n	8000330 <HAL_UARTEx_RxEventCallback+0xac>
 80002be:	2b30      	cmp	r3, #48	; 0x30
 80002c0:	d002      	beq.n	80002c8 <HAL_UARTEx_RxEventCallback+0x44>
 80002c2:	2b31      	cmp	r3, #49	; 0x31
 80002c4:	d022      	beq.n	800030c <HAL_UARTEx_RxEventCallback+0x88>
    	break;
    case '3':
    	HAL_UART_Transmit(&huart2, mhz19_cmd_calibrate_zero, sizeof(mhz19_cmd_calibrate_zero),UART_MHZ19B_DELAY);
    	break;
    default:
    	break;
 80002c6:	e033      	b.n	8000330 <HAL_UARTEx_RxEventCallback+0xac>
    	HAL_UART_Transmit(&huart2, mhz19_cmd_read_co2, strlen(mhz19_cmd_read_co2),UART_MHZ19B_DELAY);
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <HAL_UARTEx_RxEventCallback+0x110>)
 80002ca:	0018      	movs	r0, r3
 80002cc:	f7ff ff1c 	bl	8000108 <strlen>
 80002d0:	0003      	movs	r3, r0
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	492f      	ldr	r1, [pc, #188]	; (8000394 <HAL_UARTEx_RxEventCallback+0x110>)
 80002d6:	4830      	ldr	r0, [pc, #192]	; (8000398 <HAL_UARTEx_RxEventCallback+0x114>)
 80002d8:	2396      	movs	r3, #150	; 0x96
 80002da:	f003 faa3 	bl	8003824 <HAL_UART_Transmit>
    	sprintf((char*)mhz19_tx_buff,"%d\r\n", (((int)mhz19_rx_buff[2]*(int)256U)+(int)mhz19_rx_buff[3]));
 80002de:	4b2f      	ldr	r3, [pc, #188]	; (800039c <HAL_UARTEx_RxEventCallback+0x118>)
 80002e0:	789b      	ldrb	r3, [r3, #2]
 80002e2:	021b      	lsls	r3, r3, #8
 80002e4:	4a2d      	ldr	r2, [pc, #180]	; (800039c <HAL_UARTEx_RxEventCallback+0x118>)
 80002e6:	78d2      	ldrb	r2, [r2, #3]
 80002e8:	189a      	adds	r2, r3, r2
 80002ea:	492d      	ldr	r1, [pc, #180]	; (80003a0 <HAL_UARTEx_RxEventCallback+0x11c>)
 80002ec:	4b2d      	ldr	r3, [pc, #180]	; (80003a4 <HAL_UARTEx_RxEventCallback+0x120>)
 80002ee:	0018      	movs	r0, r3
 80002f0:	f004 feb6 	bl	8005060 <siprintf>
    	HAL_UART_Transmit_IT(&huart1, mhz19_tx_buff, strlen((char*)mhz19_tx_buff));
 80002f4:	4b2b      	ldr	r3, [pc, #172]	; (80003a4 <HAL_UARTEx_RxEventCallback+0x120>)
 80002f6:	0018      	movs	r0, r3
 80002f8:	f7ff ff06 	bl	8000108 <strlen>
 80002fc:	0003      	movs	r3, r0
 80002fe:	b29a      	uxth	r2, r3
 8000300:	4928      	ldr	r1, [pc, #160]	; (80003a4 <HAL_UARTEx_RxEventCallback+0x120>)
 8000302:	4b21      	ldr	r3, [pc, #132]	; (8000388 <HAL_UARTEx_RxEventCallback+0x104>)
 8000304:	0018      	movs	r0, r3
 8000306:	f003 fb2d 	bl	8003964 <HAL_UART_Transmit_IT>
    	break;
 800030a:	e012      	b.n	8000332 <HAL_UARTEx_RxEventCallback+0xae>
    	basic_rx_buff[0] = '0';
 800030c:	4b20      	ldr	r3, [pc, #128]	; (8000390 <HAL_UARTEx_RxEventCallback+0x10c>)
 800030e:	2230      	movs	r2, #48	; 0x30
 8000310:	701a      	strb	r2, [r3, #0]
    	TIM3->CCR4 = atoi(basic_rx_buff);
 8000312:	4b1f      	ldr	r3, [pc, #124]	; (8000390 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000314:	0018      	movs	r0, r3
 8000316:	f004 fe07 	bl	8004f28 <atoi>
 800031a:	0002      	movs	r2, r0
 800031c:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <HAL_UARTEx_RxEventCallback+0x124>)
 800031e:	641a      	str	r2, [r3, #64]	; 0x40
    	break;
 8000320:	e007      	b.n	8000332 <HAL_UARTEx_RxEventCallback+0xae>
    	HAL_UART_Transmit(&huart2, mhz19_cmd_calibrate_zero, sizeof(mhz19_cmd_calibrate_zero),UART_MHZ19B_DELAY);
 8000322:	4922      	ldr	r1, [pc, #136]	; (80003ac <HAL_UARTEx_RxEventCallback+0x128>)
 8000324:	481c      	ldr	r0, [pc, #112]	; (8000398 <HAL_UARTEx_RxEventCallback+0x114>)
 8000326:	2396      	movs	r3, #150	; 0x96
 8000328:	2209      	movs	r2, #9
 800032a:	f003 fa7b 	bl	8003824 <HAL_UART_Transmit>
    	break;
 800032e:	e000      	b.n	8000332 <HAL_UARTEx_RxEventCallback+0xae>
    	break;
 8000330:	46c0      	nop			; (mov r8, r8)
    }
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, basic_rx_buff, rx_buff_size);
 8000332:	4917      	ldr	r1, [pc, #92]	; (8000390 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000334:	4b14      	ldr	r3, [pc, #80]	; (8000388 <HAL_UARTEx_RxEventCallback+0x104>)
 8000336:	2214      	movs	r2, #20
 8000338:	0018      	movs	r0, r3
 800033a:	f004 fd8d 	bl	8004e58 <HAL_UARTEx_ReceiveToIdle_IT>
	  HAL_UART_Transmit_IT(&huart1, mhz19_tx_buff, strlen((char*)mhz19_tx_buff));
	  HAL_UART_Receive_IT(&huart2, mhz19_rx_buff, mhz19_rx_buff_size);
  }


}
 800033e:	e01f      	b.n	8000380 <HAL_UARTEx_RxEventCallback+0xfc>
  else if(huart == &huart2)
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <HAL_UARTEx_RxEventCallback+0x114>)
 8000344:	429a      	cmp	r2, r3
 8000346:	d11b      	bne.n	8000380 <HAL_UARTEx_RxEventCallback+0xfc>
	  sprintf((char*)mhz19_tx_buff,"%d\r\n", (((int)mhz19_rx_buff[2]*(int)256U)+(int)mhz19_rx_buff[3]));
 8000348:	4b14      	ldr	r3, [pc, #80]	; (800039c <HAL_UARTEx_RxEventCallback+0x118>)
 800034a:	789b      	ldrb	r3, [r3, #2]
 800034c:	021b      	lsls	r3, r3, #8
 800034e:	4a13      	ldr	r2, [pc, #76]	; (800039c <HAL_UARTEx_RxEventCallback+0x118>)
 8000350:	78d2      	ldrb	r2, [r2, #3]
 8000352:	189a      	adds	r2, r3, r2
 8000354:	4912      	ldr	r1, [pc, #72]	; (80003a0 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000356:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <HAL_UARTEx_RxEventCallback+0x120>)
 8000358:	0018      	movs	r0, r3
 800035a:	f004 fe81 	bl	8005060 <siprintf>
	  HAL_UART_Transmit_IT(&huart1, mhz19_tx_buff, strlen((char*)mhz19_tx_buff));
 800035e:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <HAL_UARTEx_RxEventCallback+0x120>)
 8000360:	0018      	movs	r0, r3
 8000362:	f7ff fed1 	bl	8000108 <strlen>
 8000366:	0003      	movs	r3, r0
 8000368:	b29a      	uxth	r2, r3
 800036a:	490e      	ldr	r1, [pc, #56]	; (80003a4 <HAL_UARTEx_RxEventCallback+0x120>)
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <HAL_UARTEx_RxEventCallback+0x104>)
 800036e:	0018      	movs	r0, r3
 8000370:	f003 faf8 	bl	8003964 <HAL_UART_Transmit_IT>
	  HAL_UART_Receive_IT(&huart2, mhz19_rx_buff, mhz19_rx_buff_size);
 8000374:	4909      	ldr	r1, [pc, #36]	; (800039c <HAL_UARTEx_RxEventCallback+0x118>)
 8000376:	4b08      	ldr	r3, [pc, #32]	; (8000398 <HAL_UARTEx_RxEventCallback+0x114>)
 8000378:	2209      	movs	r2, #9
 800037a:	0018      	movs	r0, r3
 800037c:	f003 fb62 	bl	8003a44 <HAL_UART_Receive_IT>
}
 8000380:	46c0      	nop			; (mov r8, r8)
 8000382:	46bd      	mov	sp, r7
 8000384:	b004      	add	sp, #16
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000198 	.word	0x20000198
 800038c:	08006268 	.word	0x08006268
 8000390:	200002a8 	.word	0x200002a8
 8000394:	20000000 	.word	0x20000000
 8000398:	20000220 	.word	0x20000220
 800039c:	200002bc 	.word	0x200002bc
 80003a0:	08006270 	.word	0x08006270
 80003a4:	200002c8 	.word	0x200002c8
 80003a8:	40000400 	.word	0x40000400
 80003ac:	20000018 	.word	0x20000018

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b6:	f000 fdb5 	bl	8000f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ba:	f000 f87f 	bl	80004bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003be:	f000 faaf 	bl	8000920 <MX_GPIO_Init>
  MX_TIM3_Init();
 80003c2:	f000 f9bd 	bl	8000740 <MX_TIM3_Init>
  MX_ADC_Init();
 80003c6:	f000 f8ed 	bl	80005a4 <MX_ADC_Init>
  MX_RTC_Init();
 80003ca:	f000 f993 	bl	80006f4 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80003ce:	f000 fa45 	bl	800085c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80003d2:	f000 f94f 	bl	8000674 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80003d6:	f000 fa73 	bl	80008c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc);
 80003da:	4b2c      	ldr	r3, [pc, #176]	; (800048c <main+0xdc>)
 80003dc:	0018      	movs	r0, r3
 80003de:	f001 f83b 	bl	8001458 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80003e2:	4b2b      	ldr	r3, [pc, #172]	; (8000490 <main+0xe0>)
 80003e4:	2108      	movs	r1, #8
 80003e6:	0018      	movs	r0, r3
 80003e8:	f002 fbf4 	bl	8002bd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80003ec:	4b28      	ldr	r3, [pc, #160]	; (8000490 <main+0xe0>)
 80003ee:	210c      	movs	r1, #12
 80003f0:	0018      	movs	r0, r3
 80003f2:	f002 fbef 	bl	8002bd4 <HAL_TIM_PWM_Start>
  TIM3->CCR3=1000;
 80003f6:	4b27      	ldr	r3, [pc, #156]	; (8000494 <main+0xe4>)
 80003f8:	22fa      	movs	r2, #250	; 0xfa
 80003fa:	0092      	lsls	r2, r2, #2
 80003fc:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM3->CCR4=2048;
 80003fe:	4b25      	ldr	r3, [pc, #148]	; (8000494 <main+0xe4>)
 8000400:	2280      	movs	r2, #128	; 0x80
 8000402:	0112      	lsls	r2, r2, #4
 8000404:	641a      	str	r2, [r3, #64]	; 0x40

  uint32_t T = HAL_GetTick();
 8000406:	f000 fde7 	bl	8000fd8 <HAL_GetTick>
 800040a:	0003      	movs	r3, r0
 800040c:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart1, "MCU has started\r\n\0", strlen("MCU has started\r\n\0"),10);
 800040e:	4922      	ldr	r1, [pc, #136]	; (8000498 <main+0xe8>)
 8000410:	4822      	ldr	r0, [pc, #136]	; (800049c <main+0xec>)
 8000412:	230a      	movs	r3, #10
 8000414:	2211      	movs	r2, #17
 8000416:	f003 fa05 	bl	8003824 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, "Ready to proceed...\r\n\0", strlen("Ready to proceed...\r\n\0"),10);
 800041a:	4921      	ldr	r1, [pc, #132]	; (80004a0 <main+0xf0>)
 800041c:	481f      	ldr	r0, [pc, #124]	; (800049c <main+0xec>)
 800041e:	230a      	movs	r3, #10
 8000420:	2215      	movs	r2, #21
 8000422:	f003 f9ff 	bl	8003824 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1, "Set detection range to 5000 ppm max\r\n\0", strlen("Set detection range to 5000 ppm max\r\n\0"),10);
 8000426:	491f      	ldr	r1, [pc, #124]	; (80004a4 <main+0xf4>)
 8000428:	481c      	ldr	r0, [pc, #112]	; (800049c <main+0xec>)
 800042a:	230a      	movs	r3, #10
 800042c:	2225      	movs	r2, #37	; 0x25
 800042e:	f003 f9f9 	bl	8003824 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, mhz19_cmd_set_detection_range_5000, sizeof(mhz19_cmd_set_detection_range_5000),UART_MHZ19B_DELAY);
 8000432:	491d      	ldr	r1, [pc, #116]	; (80004a8 <main+0xf8>)
 8000434:	481d      	ldr	r0, [pc, #116]	; (80004ac <main+0xfc>)
 8000436:	2396      	movs	r3, #150	; 0x96
 8000438:	2209      	movs	r2, #9
 800043a:	f003 f9f3 	bl	8003824 <HAL_UART_Transmit>
  //HAL_UART_Transmit(&huart2, mhz19_cmd_self_calib_on, sizeof(mhz19_cmd_self_calib_on),UART_MHZ19B_DELAY);
  //HAL_UART_Transmit(&huart2, mhz19_cmd_calibrate_zero, sizeof(mhz19_cmd_calibrate_zero),UART_MHZ19B_DELAY);
  HAL_UART_Transmit(&huart2, mhz19_cmd_read_co2, sizeof(mhz19_cmd_read_co2),UART_MHZ19B_DELAY);
 800043e:	491c      	ldr	r1, [pc, #112]	; (80004b0 <main+0x100>)
 8000440:	481a      	ldr	r0, [pc, #104]	; (80004ac <main+0xfc>)
 8000442:	2396      	movs	r3, #150	; 0x96
 8000444:	2209      	movs	r2, #9
 8000446:	f003 f9ed 	bl	8003824 <HAL_UART_Transmit>

  //готовимся принимать команды от пк и ответ от датчика
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, basic_rx_buff, rx_buff_size);
 800044a:	491a      	ldr	r1, [pc, #104]	; (80004b4 <main+0x104>)
 800044c:	4b13      	ldr	r3, [pc, #76]	; (800049c <main+0xec>)
 800044e:	2214      	movs	r2, #20
 8000450:	0018      	movs	r0, r3
 8000452:	f004 fd01 	bl	8004e58 <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_UART_Receive_IT (&huart2, mhz19_rx_buff, mhz19_rx_buff_size);
 8000456:	4918      	ldr	r1, [pc, #96]	; (80004b8 <main+0x108>)
 8000458:	4b14      	ldr	r3, [pc, #80]	; (80004ac <main+0xfc>)
 800045a:	2209      	movs	r2, #9
 800045c:	0018      	movs	r0, r3
 800045e:	f003 faf1 	bl	8003a44 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if((HAL_GetTick()-T) >= mhz19_pend_period)
 8000462:	f000 fdb9 	bl	8000fd8 <HAL_GetTick>
 8000466:	0002      	movs	r2, r0
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	1ad2      	subs	r2, r2, r3
 800046c:	23fa      	movs	r3, #250	; 0xfa
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	429a      	cmp	r2, r3
 8000472:	d3f6      	bcc.n	8000462 <main+0xb2>
	  {
		  HAL_UART_Transmit(&huart2, mhz19_cmd_read_co2, sizeof(mhz19_cmd_read_co2),UART_MHZ19B_DELAY);
 8000474:	490e      	ldr	r1, [pc, #56]	; (80004b0 <main+0x100>)
 8000476:	480d      	ldr	r0, [pc, #52]	; (80004ac <main+0xfc>)
 8000478:	2396      	movs	r3, #150	; 0x96
 800047a:	2209      	movs	r2, #9
 800047c:	f003 f9d2 	bl	8003824 <HAL_UART_Transmit>
	  	  T = HAL_GetTick();
 8000480:	f000 fdaa 	bl	8000fd8 <HAL_GetTick>
 8000484:	0003      	movs	r3, r0
 8000486:	607b      	str	r3, [r7, #4]
	  if((HAL_GetTick()-T) >= mhz19_pend_period)
 8000488:	e7eb      	b.n	8000462 <main+0xb2>
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	2000009c 	.word	0x2000009c
 8000490:	20000150 	.word	0x20000150
 8000494:	40000400 	.word	0x40000400
 8000498:	08006278 	.word	0x08006278
 800049c:	20000198 	.word	0x20000198
 80004a0:	0800628c 	.word	0x0800628c
 80004a4:	080062a4 	.word	0x080062a4
 80004a8:	2000000c 	.word	0x2000000c
 80004ac:	20000220 	.word	0x20000220
 80004b0:	20000000 	.word	0x20000000
 80004b4:	200002a8 	.word	0x200002a8
 80004b8:	200002bc 	.word	0x200002bc

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b095      	sub	sp, #84	; 0x54
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	2420      	movs	r4, #32
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	0018      	movs	r0, r3
 80004c8:	2330      	movs	r3, #48	; 0x30
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f004 fe11 	bl	80050f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d2:	2310      	movs	r3, #16
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	0018      	movs	r0, r3
 80004d8:	2310      	movs	r3, #16
 80004da:	001a      	movs	r2, r3
 80004dc:	2100      	movs	r1, #0
 80004de:	f004 fe09 	bl	80050f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004e2:	003b      	movs	r3, r7
 80004e4:	0018      	movs	r0, r3
 80004e6:	2310      	movs	r3, #16
 80004e8:	001a      	movs	r2, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	f004 fe02 	bl	80050f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80004f0:	0021      	movs	r1, r4
 80004f2:	187b      	adds	r3, r7, r1
 80004f4:	221a      	movs	r2, #26
 80004f6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2201      	movs	r2, #1
 80004fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2201      	movs	r2, #1
 8000502:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2210      	movs	r2, #16
 8000508:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2210      	movs	r2, #16
 800050e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2201      	movs	r2, #1
 8000514:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2202      	movs	r2, #2
 800051a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2200      	movs	r2, #0
 8000520:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	22a0      	movs	r2, #160	; 0xa0
 8000526:	0392      	lsls	r2, r2, #14
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2200      	movs	r2, #0
 800052e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000530:	187b      	adds	r3, r7, r1
 8000532:	0018      	movs	r0, r3
 8000534:	f001 fc4e 	bl	8001dd4 <HAL_RCC_OscConfig>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800053c:	f000 fa44 	bl	80009c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000540:	2110      	movs	r1, #16
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2207      	movs	r2, #7
 8000546:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2202      	movs	r2, #2
 800054c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2101      	movs	r1, #1
 800055e:	0018      	movs	r0, r3
 8000560:	f001 ff52 	bl	8002408 <HAL_RCC_ClockConfig>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000568:	f000 fa2e 	bl	80009c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800056c:	003b      	movs	r3, r7
 800056e:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <SystemClock_Config+0xe4>)
 8000570:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000572:	003b      	movs	r3, r7
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000578:	003b      	movs	r3, r7
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800057e:	003b      	movs	r3, r7
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	0092      	lsls	r2, r2, #2
 8000584:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000586:	003b      	movs	r3, r7
 8000588:	0018      	movs	r0, r3
 800058a:	f002 f881 	bl	8002690 <HAL_RCCEx_PeriphCLKConfig>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000592:	f000 fa19 	bl	80009c8 <Error_Handler>
  }
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b015      	add	sp, #84	; 0x54
 800059c:	bd90      	pop	{r4, r7, pc}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	00010021 	.word	0x00010021

080005a4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	0018      	movs	r0, r3
 80005ae:	230c      	movs	r3, #12
 80005b0:	001a      	movs	r2, r3
 80005b2:	2100      	movs	r1, #0
 80005b4:	f004 fd9e 	bl	80050f4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005b8:	4b2c      	ldr	r3, [pc, #176]	; (800066c <MX_ADC_Init+0xc8>)
 80005ba:	4a2d      	ldr	r2, [pc, #180]	; (8000670 <MX_ADC_Init+0xcc>)
 80005bc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005be:	4b2b      	ldr	r3, [pc, #172]	; (800066c <MX_ADC_Init+0xc8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005c4:	4b29      	ldr	r3, [pc, #164]	; (800066c <MX_ADC_Init+0xc8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ca:	4b28      	ldr	r3, [pc, #160]	; (800066c <MX_ADC_Init+0xc8>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005d0:	4b26      	ldr	r3, [pc, #152]	; (800066c <MX_ADC_Init+0xc8>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d6:	4b25      	ldr	r3, [pc, #148]	; (800066c <MX_ADC_Init+0xc8>)
 80005d8:	2204      	movs	r2, #4
 80005da:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80005dc:	4b23      	ldr	r3, [pc, #140]	; (800066c <MX_ADC_Init+0xc8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80005e2:	4b22      	ldr	r3, [pc, #136]	; (800066c <MX_ADC_Init+0xc8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80005e8:	4b20      	ldr	r3, [pc, #128]	; (800066c <MX_ADC_Init+0xc8>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80005ee:	4b1f      	ldr	r3, [pc, #124]	; (800066c <MX_ADC_Init+0xc8>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b1d      	ldr	r3, [pc, #116]	; (800066c <MX_ADC_Init+0xc8>)
 80005f6:	22c2      	movs	r2, #194	; 0xc2
 80005f8:	32ff      	adds	r2, #255	; 0xff
 80005fa:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <MX_ADC_Init+0xc8>)
 80005fe:	2200      	movs	r2, #0
 8000600:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000602:	4b1a      	ldr	r3, [pc, #104]	; (800066c <MX_ADC_Init+0xc8>)
 8000604:	2224      	movs	r2, #36	; 0x24
 8000606:	2100      	movs	r1, #0
 8000608:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <MX_ADC_Init+0xc8>)
 800060c:	2201      	movs	r2, #1
 800060e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000610:	4b16      	ldr	r3, [pc, #88]	; (800066c <MX_ADC_Init+0xc8>)
 8000612:	0018      	movs	r0, r3
 8000614:	f000 fcea 	bl	8000fec <HAL_ADC_Init>
 8000618:	1e03      	subs	r3, r0, #0
 800061a:	d001      	beq.n	8000620 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800061c:	f000 f9d4 	bl	80009c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2201      	movs	r2, #1
 8000624:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2280      	movs	r2, #128	; 0x80
 800062a:	0152      	lsls	r2, r2, #5
 800062c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2201      	movs	r2, #1
 8000632:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000634:	1d3a      	adds	r2, r7, #4
 8000636:	4b0d      	ldr	r3, [pc, #52]	; (800066c <MX_ADC_Init+0xc8>)
 8000638:	0011      	movs	r1, r2
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fe16 	bl	800126c <HAL_ADC_ConfigChannel>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000644:	f000 f9c0 	bl	80009c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2210      	movs	r2, #16
 800064c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800064e:	1d3a      	adds	r2, r7, #4
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_ADC_Init+0xc8>)
 8000652:	0011      	movs	r1, r2
 8000654:	0018      	movs	r0, r3
 8000656:	f000 fe09 	bl	800126c <HAL_ADC_ConfigChannel>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d001      	beq.n	8000662 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800065e:	f000 f9b3 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b004      	add	sp, #16
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	2000009c 	.word	0x2000009c
 8000670:	40012400 	.word	0x40012400

08000674 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_I2C1_Init+0x74>)
 800067a:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <MX_I2C1_Init+0x78>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_I2C1_Init+0x74>)
 8000680:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <MX_I2C1_Init+0x7c>)
 8000682:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_I2C1_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_I2C1_Init+0x74>)
 800068c:	2201      	movs	r2, #1
 800068e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_I2C1_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_I2C1_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_I2C1_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_I2C1_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_I2C1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_I2C1_Init+0x74>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f001 fa61 	bl	8001b78 <HAL_I2C_Init>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006ba:	f000 f985 	bl	80009c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006be:	4b0a      	ldr	r3, [pc, #40]	; (80006e8 <MX_I2C1_Init+0x74>)
 80006c0:	2100      	movs	r1, #0
 80006c2:	0018      	movs	r0, r3
 80006c4:	f001 faee 	bl	8001ca4 <HAL_I2CEx_ConfigAnalogFilter>
 80006c8:	1e03      	subs	r3, r0, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006cc:	f000 f97c 	bl	80009c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <MX_I2C1_Init+0x74>)
 80006d2:	2100      	movs	r1, #0
 80006d4:	0018      	movs	r0, r3
 80006d6:	f001 fb31 	bl	8001d3c <HAL_I2CEx_ConfigDigitalFilter>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006de:	f000 f973 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000dc 	.word	0x200000dc
 80006ec:	40005400 	.word	0x40005400
 80006f0:	2000090e 	.word	0x2000090e

080006f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_RTC_Init+0x44>)
 80006fa:	4a10      	ldr	r2, [pc, #64]	; (800073c <MX_RTC_Init+0x48>)
 80006fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_RTC_Init+0x44>)
 8000700:	2200      	movs	r2, #0
 8000702:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_RTC_Init+0x44>)
 8000706:	227f      	movs	r2, #127	; 0x7f
 8000708:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_RTC_Init+0x44>)
 800070c:	22ff      	movs	r2, #255	; 0xff
 800070e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_RTC_Init+0x44>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_RTC_Init+0x44>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_RTC_Init+0x44>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <MX_RTC_Init+0x44>)
 8000724:	0018      	movs	r0, r3
 8000726:	f002 f881 	bl	800282c <HAL_RTC_Init>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800072e:	f000 f94b 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000130 	.word	0x20000130
 800073c:	40002800 	.word	0x40002800

08000740 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08e      	sub	sp, #56	; 0x38
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000746:	2328      	movs	r3, #40	; 0x28
 8000748:	18fb      	adds	r3, r7, r3
 800074a:	0018      	movs	r0, r3
 800074c:	2310      	movs	r3, #16
 800074e:	001a      	movs	r2, r3
 8000750:	2100      	movs	r1, #0
 8000752:	f004 fccf 	bl	80050f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000756:	2320      	movs	r3, #32
 8000758:	18fb      	adds	r3, r7, r3
 800075a:	0018      	movs	r0, r3
 800075c:	2308      	movs	r3, #8
 800075e:	001a      	movs	r2, r3
 8000760:	2100      	movs	r1, #0
 8000762:	f004 fcc7 	bl	80050f4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	0018      	movs	r0, r3
 800076a:	231c      	movs	r3, #28
 800076c:	001a      	movs	r2, r3
 800076e:	2100      	movs	r1, #0
 8000770:	f004 fcc0 	bl	80050f4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000774:	4b37      	ldr	r3, [pc, #220]	; (8000854 <MX_TIM3_Init+0x114>)
 8000776:	4a38      	ldr	r2, [pc, #224]	; (8000858 <MX_TIM3_Init+0x118>)
 8000778:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800077a:	4b36      	ldr	r3, [pc, #216]	; (8000854 <MX_TIM3_Init+0x114>)
 800077c:	2200      	movs	r2, #0
 800077e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000780:	4b34      	ldr	r3, [pc, #208]	; (8000854 <MX_TIM3_Init+0x114>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096;
 8000786:	4b33      	ldr	r3, [pc, #204]	; (8000854 <MX_TIM3_Init+0x114>)
 8000788:	2280      	movs	r2, #128	; 0x80
 800078a:	0152      	lsls	r2, r2, #5
 800078c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078e:	4b31      	ldr	r3, [pc, #196]	; (8000854 <MX_TIM3_Init+0x114>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000794:	4b2f      	ldr	r3, [pc, #188]	; (8000854 <MX_TIM3_Init+0x114>)
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800079a:	4b2e      	ldr	r3, [pc, #184]	; (8000854 <MX_TIM3_Init+0x114>)
 800079c:	0018      	movs	r0, r3
 800079e:	f002 f971 	bl	8002a84 <HAL_TIM_Base_Init>
 80007a2:	1e03      	subs	r3, r0, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80007a6:	f000 f90f 	bl	80009c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007aa:	2128      	movs	r1, #40	; 0x28
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2280      	movs	r2, #128	; 0x80
 80007b0:	0152      	lsls	r2, r2, #5
 80007b2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007b4:	187a      	adds	r2, r7, r1
 80007b6:	4b27      	ldr	r3, [pc, #156]	; (8000854 <MX_TIM3_Init+0x114>)
 80007b8:	0011      	movs	r1, r2
 80007ba:	0018      	movs	r0, r3
 80007bc:	f002 fb82 	bl	8002ec4 <HAL_TIM_ConfigClockSource>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80007c4:	f000 f900 	bl	80009c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <MX_TIM3_Init+0x114>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f002 f9aa 	bl	8002b24 <HAL_TIM_PWM_Init>
 80007d0:	1e03      	subs	r3, r0, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80007d4:	f000 f8f8 	bl	80009c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d8:	2120      	movs	r1, #32
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007e6:	187a      	adds	r2, r7, r1
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_TIM3_Init+0x114>)
 80007ea:	0011      	movs	r1, r2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f002 ff6d 	bl	80036cc <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80007f6:	f000 f8e7 	bl	80009c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2260      	movs	r2, #96	; 0x60
 80007fe:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	22ff      	movs	r2, #255	; 0xff
 8000804:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000812:	1d39      	adds	r1, r7, #4
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_TIM3_Init+0x114>)
 8000816:	2208      	movs	r2, #8
 8000818:	0018      	movs	r0, r3
 800081a:	f002 fa8d 	bl	8002d38 <HAL_TIM_PWM_ConfigChannel>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000822:	f000 f8d1 	bl	80009c8 <Error_Handler>
  }
  sConfigOC.Pulse = 600;
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2296      	movs	r2, #150	; 0x96
 800082a:	0092      	lsls	r2, r2, #2
 800082c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800082e:	1d39      	adds	r1, r7, #4
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_TIM3_Init+0x114>)
 8000832:	220c      	movs	r2, #12
 8000834:	0018      	movs	r0, r3
 8000836:	f002 fa7f 	bl	8002d38 <HAL_TIM_PWM_ConfigChannel>
 800083a:	1e03      	subs	r3, r0, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800083e:	f000 f8c3 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <MX_TIM3_Init+0x114>)
 8000844:	0018      	movs	r0, r3
 8000846:	f000 f9b3 	bl	8000bb0 <HAL_TIM_MspPostInit>

}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b00e      	add	sp, #56	; 0x38
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	20000150 	.word	0x20000150
 8000858:	40000400 	.word	0x40000400

0800085c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000860:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <MX_USART1_UART_Init+0x5c>)
 8000862:	4a16      	ldr	r2, [pc, #88]	; (80008bc <MX_USART1_UART_Init+0x60>)
 8000864:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_USART1_UART_Init+0x5c>)
 8000868:	2296      	movs	r2, #150	; 0x96
 800086a:	0212      	lsls	r2, r2, #8
 800086c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_USART1_UART_Init+0x5c>)
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	0152      	lsls	r2, r2, #5
 8000874:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <MX_USART1_UART_Init+0x5c>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USART1_UART_Init+0x5c>)
 800087e:	2280      	movs	r2, #128	; 0x80
 8000880:	00d2      	lsls	r2, r2, #3
 8000882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USART1_UART_Init+0x5c>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USART1_UART_Init+0x5c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USART1_UART_Init+0x5c>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USART1_UART_Init+0x5c>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USART1_UART_Init+0x5c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <MX_USART1_UART_Init+0x5c>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f002 ff69 	bl	800377c <HAL_UART_Init>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80008ae:	f000 f88b 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000198 	.word	0x20000198
 80008bc:	40013800 	.word	0x40013800

080008c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008c6:	4a15      	ldr	r2, [pc, #84]	; (800091c <MX_USART2_UART_Init+0x5c>)
 80008c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008cc:	2296      	movs	r2, #150	; 0x96
 80008ce:	0192      	lsls	r2, r2, #6
 80008d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008e6:	220c      	movs	r2, #12
 80008e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_USART2_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <MX_USART2_UART_Init+0x58>)
 8000904:	0018      	movs	r0, r3
 8000906:	f002 ff39 	bl	800377c <HAL_UART_Init>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800090e:	f000 f85b 	bl	80009c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000220 	.word	0x20000220
 800091c:	40004400 	.word	0x40004400

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b089      	sub	sp, #36	; 0x24
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	240c      	movs	r4, #12
 8000928:	193b      	adds	r3, r7, r4
 800092a:	0018      	movs	r0, r3
 800092c:	2314      	movs	r3, #20
 800092e:	001a      	movs	r2, r3
 8000930:	2100      	movs	r1, #0
 8000932:	f004 fbdf 	bl	80050f4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b23      	ldr	r3, [pc, #140]	; (80009c4 <MX_GPIO_Init+0xa4>)
 8000938:	695a      	ldr	r2, [r3, #20]
 800093a:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <MX_GPIO_Init+0xa4>)
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	0289      	lsls	r1, r1, #10
 8000940:	430a      	orrs	r2, r1
 8000942:	615a      	str	r2, [r3, #20]
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <MX_GPIO_Init+0xa4>)
 8000946:	695a      	ldr	r2, [r3, #20]
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	029b      	lsls	r3, r3, #10
 800094c:	4013      	ands	r3, r2
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_GPIO_Init+0xa4>)
 8000954:	695a      	ldr	r2, [r3, #20]
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_GPIO_Init+0xa4>)
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	0309      	lsls	r1, r1, #12
 800095c:	430a      	orrs	r2, r1
 800095e:	615a      	str	r2, [r3, #20]
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_GPIO_Init+0xa4>)
 8000962:	695a      	ldr	r2, [r3, #20]
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	031b      	lsls	r3, r3, #12
 8000968:	4013      	ands	r3, r2
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_GPIO_Init+0xa4>)
 8000970:	695a      	ldr	r2, [r3, #20]
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_GPIO_Init+0xa4>)
 8000974:	2180      	movs	r1, #128	; 0x80
 8000976:	02c9      	lsls	r1, r1, #11
 8000978:	430a      	orrs	r2, r1
 800097a:	615a      	str	r2, [r3, #20]
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_GPIO_Init+0xa4>)
 800097e:	695a      	ldr	r2, [r3, #20]
 8000980:	2380      	movs	r3, #128	; 0x80
 8000982:	02db      	lsls	r3, r3, #11
 8000984:	4013      	ands	r3, r2
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 800098a:	193b      	adds	r3, r7, r4
 800098c:	2201      	movs	r2, #1
 800098e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000990:	193b      	adds	r3, r7, r4
 8000992:	2288      	movs	r2, #136	; 0x88
 8000994:	0352      	lsls	r2, r2, #13
 8000996:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	2202      	movs	r2, #2
 800099c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800099e:	193a      	adds	r2, r7, r4
 80009a0:	2390      	movs	r3, #144	; 0x90
 80009a2:	05db      	lsls	r3, r3, #23
 80009a4:	0011      	movs	r1, r2
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 ff5a 	bl	8001860 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2100      	movs	r1, #0
 80009b0:	2005      	movs	r0, #5
 80009b2:	f000 fea5 	bl	8001700 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80009b6:	2005      	movs	r0, #5
 80009b8:	f000 feb7 	bl	800172a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009bc:	46c0      	nop			; (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	b009      	add	sp, #36	; 0x24
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	40021000 	.word	0x40021000

080009c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009cc:	b672      	cpsid	i
}
 80009ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <Error_Handler+0x8>
	...

080009d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <HAL_MspInit+0x44>)
 80009dc:	699a      	ldr	r2, [r3, #24]
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_MspInit+0x44>)
 80009e0:	2101      	movs	r1, #1
 80009e2:	430a      	orrs	r2, r1
 80009e4:	619a      	str	r2, [r3, #24]
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <HAL_MspInit+0x44>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	2201      	movs	r2, #1
 80009ec:	4013      	ands	r3, r2
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_MspInit+0x44>)
 80009f4:	69da      	ldr	r2, [r3, #28]
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_MspInit+0x44>)
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	0549      	lsls	r1, r1, #21
 80009fc:	430a      	orrs	r2, r1
 80009fe:	61da      	str	r2, [r3, #28]
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_MspInit+0x44>)
 8000a02:	69da      	ldr	r2, [r3, #28]
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	055b      	lsls	r3, r3, #21
 8000a08:	4013      	ands	r3, r2
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b002      	add	sp, #8
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	40021000 	.word	0x40021000

08000a1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b08b      	sub	sp, #44	; 0x2c
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	2414      	movs	r4, #20
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	0018      	movs	r0, r3
 8000a2a:	2314      	movs	r3, #20
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f004 fb60 	bl	80050f4 <memset>
  if(hadc->Instance==ADC1)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a19      	ldr	r2, [pc, #100]	; (8000aa0 <HAL_ADC_MspInit+0x84>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d12b      	bne.n	8000a96 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <HAL_ADC_MspInit+0x88>)
 8000a40:	699a      	ldr	r2, [r3, #24]
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <HAL_ADC_MspInit+0x88>)
 8000a44:	2180      	movs	r1, #128	; 0x80
 8000a46:	0089      	lsls	r1, r1, #2
 8000a48:	430a      	orrs	r2, r1
 8000a4a:	619a      	str	r2, [r3, #24]
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_ADC_MspInit+0x88>)
 8000a4e:	699a      	ldr	r2, [r3, #24]
 8000a50:	2380      	movs	r3, #128	; 0x80
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <HAL_ADC_MspInit+0x88>)
 8000a5c:	695a      	ldr	r2, [r3, #20]
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_ADC_MspInit+0x88>)
 8000a60:	2180      	movs	r1, #128	; 0x80
 8000a62:	0289      	lsls	r1, r1, #10
 8000a64:	430a      	orrs	r2, r1
 8000a66:	615a      	str	r2, [r3, #20]
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_ADC_MspInit+0x88>)
 8000a6a:	695a      	ldr	r2, [r3, #20]
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	029b      	lsls	r3, r3, #10
 8000a70:	4013      	ands	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	2202      	movs	r2, #2
 8000a7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	2203      	movs	r2, #3
 8000a80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	193a      	adds	r2, r7, r4
 8000a8a:	2390      	movs	r3, #144	; 0x90
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	0011      	movs	r1, r2
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 fee5 	bl	8001860 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b00b      	add	sp, #44	; 0x2c
 8000a9c:	bd90      	pop	{r4, r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	40012400 	.word	0x40012400
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b08b      	sub	sp, #44	; 0x2c
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	2414      	movs	r4, #20
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	2314      	movs	r3, #20
 8000ab8:	001a      	movs	r2, r3
 8000aba:	2100      	movs	r1, #0
 8000abc:	f004 fb1a 	bl	80050f4 <memset>
  if(hi2c->Instance==I2C1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a1c      	ldr	r2, [pc, #112]	; (8000b38 <HAL_I2C_MspInit+0x90>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d131      	bne.n	8000b2e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <HAL_I2C_MspInit+0x94>)
 8000acc:	695a      	ldr	r2, [r3, #20]
 8000ace:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <HAL_I2C_MspInit+0x94>)
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	02c9      	lsls	r1, r1, #11
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	615a      	str	r2, [r3, #20]
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <HAL_I2C_MspInit+0x94>)
 8000ada:	695a      	ldr	r2, [r3, #20]
 8000adc:	2380      	movs	r3, #128	; 0x80
 8000ade:	02db      	lsls	r3, r3, #11
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ae6:	0021      	movs	r1, r4
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	22c0      	movs	r2, #192	; 0xc0
 8000aec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2212      	movs	r2, #18
 8000af2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2203      	movs	r2, #3
 8000afe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2201      	movs	r2, #1
 8000b04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <HAL_I2C_MspInit+0x98>)
 8000b0a:	0019      	movs	r1, r3
 8000b0c:	0010      	movs	r0, r2
 8000b0e:	f000 fea7 	bl	8001860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <HAL_I2C_MspInit+0x94>)
 8000b14:	69da      	ldr	r2, [r3, #28]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_I2C_MspInit+0x94>)
 8000b18:	2180      	movs	r1, #128	; 0x80
 8000b1a:	0389      	lsls	r1, r1, #14
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	61da      	str	r2, [r3, #28]
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_I2C_MspInit+0x94>)
 8000b22:	69da      	ldr	r2, [r3, #28]
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	039b      	lsls	r3, r3, #14
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b00b      	add	sp, #44	; 0x2c
 8000b34:	bd90      	pop	{r4, r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	48000400 	.word	0x48000400

08000b44 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <HAL_RTC_MspInit+0x28>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d106      	bne.n	8000b64 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_RTC_MspInit+0x2c>)
 8000b58:	6a1a      	ldr	r2, [r3, #32]
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_RTC_MspInit+0x2c>)
 8000b5c:	2180      	movs	r1, #128	; 0x80
 8000b5e:	0209      	lsls	r1, r1, #8
 8000b60:	430a      	orrs	r2, r1
 8000b62:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40002800 	.word	0x40002800
 8000b70:	40021000 	.word	0x40021000

08000b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a09      	ldr	r2, [pc, #36]	; (8000ba8 <HAL_TIM_Base_MspInit+0x34>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d10b      	bne.n	8000b9e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_TIM_Base_MspInit+0x38>)
 8000b88:	69da      	ldr	r2, [r3, #28]
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_TIM_Base_MspInit+0x38>)
 8000b8c:	2102      	movs	r1, #2
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	61da      	str	r2, [r3, #28]
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_TIM_Base_MspInit+0x38>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	2202      	movs	r2, #2
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b004      	add	sp, #16
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	40000400 	.word	0x40000400
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b089      	sub	sp, #36	; 0x24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	240c      	movs	r4, #12
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	2314      	movs	r3, #20
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	f004 fa96 	bl	80050f4 <memset>
  if(htim->Instance==TIM3)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a20      	ldr	r2, [pc, #128]	; (8000c50 <HAL_TIM_MspPostInit+0xa0>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d13a      	bne.n	8000c48 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd2:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <HAL_TIM_MspPostInit+0xa4>)
 8000bd4:	695a      	ldr	r2, [r3, #20]
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <HAL_TIM_MspPostInit+0xa4>)
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	0309      	lsls	r1, r1, #12
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	615a      	str	r2, [r3, #20]
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <HAL_TIM_MspPostInit+0xa4>)
 8000be2:	695a      	ldr	r2, [r3, #20]
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	031b      	lsls	r3, r3, #12
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	0052      	lsls	r2, r2, #1
 8000bf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	2203      	movs	r2, #3
 8000c06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0e:	193b      	adds	r3, r7, r4
 8000c10:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <HAL_TIM_MspPostInit+0xa8>)
 8000c12:	0019      	movs	r1, r3
 8000c14:	0010      	movs	r0, r2
 8000c16:	f000 fe23 	bl	8001860 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c1a:	0021      	movs	r1, r4
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	2280      	movs	r2, #128	; 0x80
 8000c20:	0092      	lsls	r2, r2, #2
 8000c22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2202      	movs	r2, #2
 8000c28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2203      	movs	r2, #3
 8000c34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	4a06      	ldr	r2, [pc, #24]	; (8000c58 <HAL_TIM_MspPostInit+0xa8>)
 8000c40:	0019      	movs	r1, r3
 8000c42:	0010      	movs	r0, r2
 8000c44:	f000 fe0c 	bl	8001860 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b009      	add	sp, #36	; 0x24
 8000c4e:	bd90      	pop	{r4, r7, pc}
 8000c50:	40000400 	.word	0x40000400
 8000c54:	40021000 	.word	0x40021000
 8000c58:	48000800 	.word	0x48000800

08000c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b08d      	sub	sp, #52	; 0x34
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	241c      	movs	r4, #28
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	0018      	movs	r0, r3
 8000c6a:	2314      	movs	r3, #20
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	2100      	movs	r1, #0
 8000c70:	f004 fa40 	bl	80050f4 <memset>
  if(huart->Instance==USART1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a41      	ldr	r2, [pc, #260]	; (8000d80 <HAL_UART_MspInit+0x124>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d13c      	bne.n	8000cf8 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c7e:	4b41      	ldr	r3, [pc, #260]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000c80:	699a      	ldr	r2, [r3, #24]
 8000c82:	4b40      	ldr	r3, [pc, #256]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	01c9      	lsls	r1, r1, #7
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	619a      	str	r2, [r3, #24]
 8000c8c:	4b3d      	ldr	r3, [pc, #244]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000c8e:	699a      	ldr	r2, [r3, #24]
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	01db      	lsls	r3, r3, #7
 8000c94:	4013      	ands	r3, r2
 8000c96:	61bb      	str	r3, [r7, #24]
 8000c98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	4b3a      	ldr	r3, [pc, #232]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000c9c:	695a      	ldr	r2, [r3, #20]
 8000c9e:	4b39      	ldr	r3, [pc, #228]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000ca0:	2180      	movs	r1, #128	; 0x80
 8000ca2:	0289      	lsls	r1, r1, #10
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	615a      	str	r2, [r3, #20]
 8000ca8:	4b36      	ldr	r3, [pc, #216]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000caa:	695a      	ldr	r2, [r3, #20]
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	029b      	lsls	r3, r3, #10
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	22c0      	movs	r2, #192	; 0xc0
 8000cba:	00d2      	lsls	r2, r2, #3
 8000cbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	0021      	movs	r1, r4
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2203      	movs	r2, #3
 8000cd0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	187a      	adds	r2, r7, r1
 8000cda:	2390      	movs	r3, #144	; 0x90
 8000cdc:	05db      	lsls	r3, r3, #23
 8000cde:	0011      	movs	r1, r2
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f000 fdbd 	bl	8001860 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	201b      	movs	r0, #27
 8000cec:	f000 fd08 	bl	8001700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cf0:	201b      	movs	r0, #27
 8000cf2:	f000 fd1a 	bl	800172a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf6:	e03f      	b.n	8000d78 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a22      	ldr	r2, [pc, #136]	; (8000d88 <HAL_UART_MspInit+0x12c>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d13a      	bne.n	8000d78 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d02:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000d04:	69da      	ldr	r2, [r3, #28]
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000d08:	2180      	movs	r1, #128	; 0x80
 8000d0a:	0289      	lsls	r1, r1, #10
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	61da      	str	r2, [r3, #28]
 8000d10:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000d12:	69da      	ldr	r2, [r3, #28]
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	029b      	lsls	r3, r3, #10
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000d20:	695a      	ldr	r2, [r3, #20]
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000d24:	2180      	movs	r1, #128	; 0x80
 8000d26:	0289      	lsls	r1, r1, #10
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	615a      	str	r2, [r3, #20]
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <HAL_UART_MspInit+0x128>)
 8000d2e:	695a      	ldr	r2, [r3, #20]
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	029b      	lsls	r3, r3, #10
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d3a:	211c      	movs	r1, #28
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	220c      	movs	r2, #12
 8000d40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2202      	movs	r2, #2
 8000d46:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2203      	movs	r2, #3
 8000d52:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	2201      	movs	r2, #1
 8000d58:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	187a      	adds	r2, r7, r1
 8000d5c:	2390      	movs	r3, #144	; 0x90
 8000d5e:	05db      	lsls	r3, r3, #23
 8000d60:	0011      	movs	r1, r2
 8000d62:	0018      	movs	r0, r3
 8000d64:	f000 fd7c 	bl	8001860 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	201c      	movs	r0, #28
 8000d6e:	f000 fcc7 	bl	8001700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d72:	201c      	movs	r0, #28
 8000d74:	f000 fcd9 	bl	800172a <HAL_NVIC_EnableIRQ>
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b00d      	add	sp, #52	; 0x34
 8000d7e:	bd90      	pop	{r4, r7, pc}
 8000d80:	40013800 	.word	0x40013800
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40004400 	.word	0x40004400

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db0:	f000 f900 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(bIsCountingUp && TIM3->CCR3 <= 4095)
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <SysTick_Handler+0x64>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d00b      	beq.n	8000dd6 <SysTick_Handler+0x2a>
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <SysTick_Handler+0x68>)
 8000dc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dc2:	2380      	movs	r3, #128	; 0x80
 8000dc4:	015b      	lsls	r3, r3, #5
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d205      	bcs.n	8000dd6 <SysTick_Handler+0x2a>
	  TIM3->CCR3 += 10;
 8000dca:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <SysTick_Handler+0x68>)
 8000dcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <SysTick_Handler+0x68>)
 8000dd0:	320a      	adds	r2, #10
 8000dd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dd4:	e018      	b.n	8000e08 <SysTick_Handler+0x5c>
  else
	  if(!bIsCountingUp && TIM3->CCR3 >=10)
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <SysTick_Handler+0x64>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d109      	bne.n	8000df4 <SysTick_Handler+0x48>
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <SysTick_Handler+0x68>)
 8000de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000de4:	2b09      	cmp	r3, #9
 8000de6:	d905      	bls.n	8000df4 <SysTick_Handler+0x48>
		  TIM3->CCR3 -= 10;
 8000de8:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <SysTick_Handler+0x68>)
 8000dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <SysTick_Handler+0x68>)
 8000dee:	3a0a      	subs	r2, #10
 8000df0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000df2:	e009      	b.n	8000e08 <SysTick_Handler+0x5c>
	  else bIsCountingUp = !bIsCountingUp;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <SysTick_Handler+0x64>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	425a      	negs	r2, r3
 8000dfc:	4153      	adcs	r3, r2
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	001a      	movs	r2, r3
 8000e02:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <SysTick_Handler+0x64>)
 8000e04:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	20000021 	.word	0x20000021
 8000e14:	40000400 	.word	0x40000400

08000e18 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f000 fe8f 	bl	8001b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <USART1_IRQHandler+0x14>)
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f002 fe60 	bl	8003af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e34:	46c0      	nop			; (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	20000198 	.word	0x20000198

08000e40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e44:	4b03      	ldr	r3, [pc, #12]	; (8000e54 <USART2_IRQHandler+0x14>)
 8000e46:	0018      	movs	r0, r3
 8000e48:	f002 fe54 	bl	8003af4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	20000220 	.word	0x20000220

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	; (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	18d3      	adds	r3, r2, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e88:	f004 f93c 	bl	8005104 <__errno>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	220c      	movs	r2, #12
 8000e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e92:	2301      	movs	r3, #1
 8000e94:	425b      	negs	r3, r3
 8000e96:	e009      	b.n	8000eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	18d2      	adds	r2, r2, r3
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <_sbrk+0x64>)
 8000ea8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b006      	add	sp, #24
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20002000 	.word	0x20002000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	200002d4 	.word	0x200002d4
 8000ec0:	20000428 	.word	0x20000428

08000ec4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ed2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ed4:	f7ff fff6 	bl	8000ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed8:	480c      	ldr	r0, [pc, #48]	; (8000f0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000eda:	490d      	ldr	r1, [pc, #52]	; (8000f10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000edc:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <LoopForever+0xe>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ee0:	e002      	b.n	8000ee8 <LoopCopyDataInit>

08000ee2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ee2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee6:	3304      	adds	r3, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eec:	d3f9      	bcc.n	8000ee2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eee:	4a0a      	ldr	r2, [pc, #40]	; (8000f18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ef0:	4c0a      	ldr	r4, [pc, #40]	; (8000f1c <LoopForever+0x16>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef4:	e001      	b.n	8000efa <LoopFillZerobss>

08000ef6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef8:	3204      	adds	r2, #4

08000efa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000efa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000efc:	d3fb      	bcc.n	8000ef6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000efe:	f004 f907 	bl	8005110 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f02:	f7ff fa55 	bl	80003b0 <main>

08000f06 <LoopForever>:

LoopForever:
    b LoopForever
 8000f06:	e7fe      	b.n	8000f06 <LoopForever>
  ldr   r0, =_estack
 8000f08:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f10:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000f14:	08006468 	.word	0x08006468
  ldr r2, =_sbss
 8000f18:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000f1c:	20000424 	.word	0x20000424

08000f20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f20:	e7fe      	b.n	8000f20 <ADC1_IRQHandler>
	...

08000f24 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <HAL_Init+0x24>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_Init+0x24>)
 8000f2e:	2110      	movs	r1, #16
 8000f30:	430a      	orrs	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f000 f809 	bl	8000f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3a:	f7ff fd4b 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	0018      	movs	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	40022000 	.word	0x40022000

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_InitTick+0x5c>)
 8000f56:	681c      	ldr	r4, [r3, #0]
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_InitTick+0x60>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	0019      	movs	r1, r3
 8000f5e:	23fa      	movs	r3, #250	; 0xfa
 8000f60:	0098      	lsls	r0, r3, #2
 8000f62:	f7ff f8e3 	bl	800012c <__udivsi3>
 8000f66:	0003      	movs	r3, r0
 8000f68:	0019      	movs	r1, r3
 8000f6a:	0020      	movs	r0, r4
 8000f6c:	f7ff f8de 	bl	800012c <__udivsi3>
 8000f70:	0003      	movs	r3, r0
 8000f72:	0018      	movs	r0, r3
 8000f74:	f000 fbe9 	bl	800174a <HAL_SYSTICK_Config>
 8000f78:	1e03      	subs	r3, r0, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e00f      	b.n	8000fa0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d80b      	bhi.n	8000f9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	425b      	negs	r3, r3
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f000 fbb6 	bl	8001700 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_InitTick+0x64>)
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b003      	add	sp, #12
 8000fa6:	bd90      	pop	{r4, r7, pc}
 8000fa8:	20000024 	.word	0x20000024
 8000fac:	2000002c 	.word	0x2000002c
 8000fb0:	20000028 	.word	0x20000028

08000fb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <HAL_IncTick+0x1c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	001a      	movs	r2, r3
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	18d2      	adds	r2, r2, r3
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fc6:	601a      	str	r2, [r3, #0]
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	2000002c 	.word	0x2000002c
 8000fd4:	200002d8 	.word	0x200002d8

08000fd8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b02      	ldr	r3, [pc, #8]	; (8000fe8 <HAL_GetTick+0x10>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	200002d8 	.word	0x200002d8

08000fec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	18fb      	adds	r3, r7, r3
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e125      	b.n	8001256 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10a      	bne.n	8001028 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2234      	movs	r2, #52	; 0x34
 800101c:	2100      	movs	r1, #0
 800101e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	0018      	movs	r0, r3
 8001024:	f7ff fcfa 	bl	8000a1c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102c:	2210      	movs	r2, #16
 800102e:	4013      	ands	r3, r2
 8001030:	d000      	beq.n	8001034 <HAL_ADC_Init+0x48>
 8001032:	e103      	b.n	800123c <HAL_ADC_Init+0x250>
 8001034:	230f      	movs	r3, #15
 8001036:	18fb      	adds	r3, r7, r3
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d000      	beq.n	8001040 <HAL_ADC_Init+0x54>
 800103e:	e0fd      	b.n	800123c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2204      	movs	r2, #4
 8001048:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800104a:	d000      	beq.n	800104e <HAL_ADC_Init+0x62>
 800104c:	e0f6      	b.n	800123c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001052:	4a83      	ldr	r2, [pc, #524]	; (8001260 <HAL_ADC_Init+0x274>)
 8001054:	4013      	ands	r3, r2
 8001056:	2202      	movs	r2, #2
 8001058:	431a      	orrs	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	2203      	movs	r2, #3
 8001066:	4013      	ands	r3, r2
 8001068:	2b01      	cmp	r3, #1
 800106a:	d112      	bne.n	8001092 <HAL_ADC_Init+0xa6>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2201      	movs	r2, #1
 8001074:	4013      	ands	r3, r2
 8001076:	2b01      	cmp	r3, #1
 8001078:	d009      	beq.n	800108e <HAL_ADC_Init+0xa2>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	401a      	ands	r2, r3
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	429a      	cmp	r2, r3
 800108c:	d101      	bne.n	8001092 <HAL_ADC_Init+0xa6>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_ADC_Init+0xa8>
 8001092:	2300      	movs	r3, #0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d116      	bne.n	80010c6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	2218      	movs	r2, #24
 80010a0:	4393      	bics	r3, r2
 80010a2:	0019      	movs	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	430a      	orrs	r2, r1
 80010ae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	0899      	lsrs	r1, r3, #2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	430a      	orrs	r2, r1
 80010c4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68da      	ldr	r2, [r3, #12]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4964      	ldr	r1, [pc, #400]	; (8001264 <HAL_ADC_Init+0x278>)
 80010d2:	400a      	ands	r2, r1
 80010d4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7e1b      	ldrb	r3, [r3, #24]
 80010da:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7e5b      	ldrb	r3, [r3, #25]
 80010e0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80010e2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	7e9b      	ldrb	r3, [r3, #26]
 80010e8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80010ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d002      	beq.n	80010fa <HAL_ADC_Init+0x10e>
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	015b      	lsls	r3, r3, #5
 80010f8:	e000      	b.n	80010fc <HAL_ADC_Init+0x110>
 80010fa:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80010fc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001102:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	2b02      	cmp	r3, #2
 800110a:	d101      	bne.n	8001110 <HAL_ADC_Init+0x124>
 800110c:	2304      	movs	r3, #4
 800110e:	e000      	b.n	8001112 <HAL_ADC_Init+0x126>
 8001110:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001112:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2124      	movs	r1, #36	; 0x24
 8001118:	5c5b      	ldrb	r3, [r3, r1]
 800111a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800111c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	4313      	orrs	r3, r2
 8001122:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7edb      	ldrb	r3, [r3, #27]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d115      	bne.n	8001158 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7e9b      	ldrb	r3, [r3, #26]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d105      	bne.n	8001140 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	2280      	movs	r2, #128	; 0x80
 8001138:	0252      	lsls	r2, r2, #9
 800113a:	4313      	orrs	r3, r2
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	e00b      	b.n	8001158 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001144:	2220      	movs	r2, #32
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001150:	2201      	movs	r2, #1
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69da      	ldr	r2, [r3, #28]
 800115c:	23c2      	movs	r3, #194	; 0xc2
 800115e:	33ff      	adds	r3, #255	; 0xff
 8001160:	429a      	cmp	r2, r3
 8001162:	d007      	beq.n	8001174 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800116c:	4313      	orrs	r3, r2
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	4313      	orrs	r3, r2
 8001172:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	68d9      	ldr	r1, [r3, #12]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	430a      	orrs	r2, r1
 8001182:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	055b      	lsls	r3, r3, #21
 800118c:	429a      	cmp	r2, r3
 800118e:	d01b      	beq.n	80011c8 <HAL_ADC_Init+0x1dc>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001194:	2b01      	cmp	r3, #1
 8001196:	d017      	beq.n	80011c8 <HAL_ADC_Init+0x1dc>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119c:	2b02      	cmp	r3, #2
 800119e:	d013      	beq.n	80011c8 <HAL_ADC_Init+0x1dc>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d00f      	beq.n	80011c8 <HAL_ADC_Init+0x1dc>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ac:	2b04      	cmp	r3, #4
 80011ae:	d00b      	beq.n	80011c8 <HAL_ADC_Init+0x1dc>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b4:	2b05      	cmp	r3, #5
 80011b6:	d007      	beq.n	80011c8 <HAL_ADC_Init+0x1dc>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011bc:	2b06      	cmp	r3, #6
 80011be:	d003      	beq.n	80011c8 <HAL_ADC_Init+0x1dc>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c4:	2b07      	cmp	r3, #7
 80011c6:	d112      	bne.n	80011ee <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	695a      	ldr	r2, [r3, #20]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2107      	movs	r1, #7
 80011d4:	438a      	bics	r2, r1
 80011d6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6959      	ldr	r1, [r3, #20]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e2:	2207      	movs	r2, #7
 80011e4:	401a      	ands	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <HAL_ADC_Init+0x27c>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d10b      	bne.n	8001216 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001208:	2203      	movs	r2, #3
 800120a:	4393      	bics	r3, r2
 800120c:	2201      	movs	r2, #1
 800120e:	431a      	orrs	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001214:	e01c      	b.n	8001250 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121a:	2212      	movs	r2, #18
 800121c:	4393      	bics	r3, r2
 800121e:	2210      	movs	r2, #16
 8001220:	431a      	orrs	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800122a:	2201      	movs	r2, #1
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001232:	230f      	movs	r3, #15
 8001234:	18fb      	adds	r3, r7, r3
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800123a:	e009      	b.n	8001250 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001240:	2210      	movs	r2, #16
 8001242:	431a      	orrs	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001248:	230f      	movs	r3, #15
 800124a:	18fb      	adds	r3, r7, r3
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001250:	230f      	movs	r3, #15
 8001252:	18fb      	adds	r3, r7, r3
 8001254:	781b      	ldrb	r3, [r3, #0]
}
 8001256:	0018      	movs	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	b004      	add	sp, #16
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	fffffefd 	.word	0xfffffefd
 8001264:	fffe0219 	.word	0xfffe0219
 8001268:	833fffe7 	.word	0x833fffe7

0800126c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001276:	230f      	movs	r3, #15
 8001278:	18fb      	adds	r3, r7, r3
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001286:	2380      	movs	r3, #128	; 0x80
 8001288:	055b      	lsls	r3, r3, #21
 800128a:	429a      	cmp	r2, r3
 800128c:	d011      	beq.n	80012b2 <HAL_ADC_ConfigChannel+0x46>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001292:	2b01      	cmp	r3, #1
 8001294:	d00d      	beq.n	80012b2 <HAL_ADC_ConfigChannel+0x46>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129a:	2b02      	cmp	r3, #2
 800129c:	d009      	beq.n	80012b2 <HAL_ADC_ConfigChannel+0x46>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d005      	beq.n	80012b2 <HAL_ADC_ConfigChannel+0x46>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012aa:	2b04      	cmp	r3, #4
 80012ac:	d001      	beq.n	80012b2 <HAL_ADC_ConfigChannel+0x46>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2234      	movs	r2, #52	; 0x34
 80012b6:	5c9b      	ldrb	r3, [r3, r2]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d101      	bne.n	80012c0 <HAL_ADC_ConfigChannel+0x54>
 80012bc:	2302      	movs	r3, #2
 80012be:	e0bb      	b.n	8001438 <HAL_ADC_ConfigChannel+0x1cc>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2234      	movs	r2, #52	; 0x34
 80012c4:	2101      	movs	r1, #1
 80012c6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2204      	movs	r2, #4
 80012d0:	4013      	ands	r3, r2
 80012d2:	d000      	beq.n	80012d6 <HAL_ADC_ConfigChannel+0x6a>
 80012d4:	e09f      	b.n	8001416 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4a59      	ldr	r2, [pc, #356]	; (8001440 <HAL_ADC_ConfigChannel+0x1d4>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d100      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x76>
 80012e0:	e077      	b.n	80013d2 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2201      	movs	r2, #1
 80012ee:	409a      	lsls	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	055b      	lsls	r3, r3, #21
 8001300:	429a      	cmp	r2, r3
 8001302:	d037      	beq.n	8001374 <HAL_ADC_ConfigChannel+0x108>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001308:	2b01      	cmp	r3, #1
 800130a:	d033      	beq.n	8001374 <HAL_ADC_ConfigChannel+0x108>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	2b02      	cmp	r3, #2
 8001312:	d02f      	beq.n	8001374 <HAL_ADC_ConfigChannel+0x108>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	2b03      	cmp	r3, #3
 800131a:	d02b      	beq.n	8001374 <HAL_ADC_ConfigChannel+0x108>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	2b04      	cmp	r3, #4
 8001322:	d027      	beq.n	8001374 <HAL_ADC_ConfigChannel+0x108>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	2b05      	cmp	r3, #5
 800132a:	d023      	beq.n	8001374 <HAL_ADC_ConfigChannel+0x108>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001330:	2b06      	cmp	r3, #6
 8001332:	d01f      	beq.n	8001374 <HAL_ADC_ConfigChannel+0x108>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	2b07      	cmp	r3, #7
 800133a:	d01b      	beq.n	8001374 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	2107      	movs	r1, #7
 8001348:	400b      	ands	r3, r1
 800134a:	429a      	cmp	r2, r3
 800134c:	d012      	beq.n	8001374 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	695a      	ldr	r2, [r3, #20]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2107      	movs	r1, #7
 800135a:	438a      	bics	r2, r1
 800135c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6959      	ldr	r1, [r3, #20]
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	2207      	movs	r2, #7
 800136a:	401a      	ands	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b10      	cmp	r3, #16
 800137a:	d003      	beq.n	8001384 <HAL_ADC_ConfigChannel+0x118>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b11      	cmp	r3, #17
 8001382:	d152      	bne.n	800142a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001384:	4b2f      	ldr	r3, [pc, #188]	; (8001444 <HAL_ADC_ConfigChannel+0x1d8>)
 8001386:	6819      	ldr	r1, [r3, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b10      	cmp	r3, #16
 800138e:	d102      	bne.n	8001396 <HAL_ADC_ConfigChannel+0x12a>
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	041b      	lsls	r3, r3, #16
 8001394:	e001      	b.n	800139a <HAL_ADC_ConfigChannel+0x12e>
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	03db      	lsls	r3, r3, #15
 800139a:	4a2a      	ldr	r2, [pc, #168]	; (8001444 <HAL_ADC_ConfigChannel+0x1d8>)
 800139c:	430b      	orrs	r3, r1
 800139e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b10      	cmp	r3, #16
 80013a6:	d140      	bne.n	800142a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <HAL_ADC_ConfigChannel+0x1dc>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4927      	ldr	r1, [pc, #156]	; (800144c <HAL_ADC_ConfigChannel+0x1e0>)
 80013ae:	0018      	movs	r0, r3
 80013b0:	f7fe febc 	bl	800012c <__udivsi3>
 80013b4:	0003      	movs	r3, r0
 80013b6:	001a      	movs	r2, r3
 80013b8:	0013      	movs	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	189b      	adds	r3, r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013c2:	e002      	b.n	80013ca <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1f9      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x158>
 80013d0:	e02b      	b.n	800142a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2101      	movs	r1, #1
 80013de:	4099      	lsls	r1, r3
 80013e0:	000b      	movs	r3, r1
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	400a      	ands	r2, r1
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b10      	cmp	r3, #16
 80013f2:	d003      	beq.n	80013fc <HAL_ADC_ConfigChannel+0x190>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b11      	cmp	r3, #17
 80013fa:	d116      	bne.n	800142a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <HAL_ADC_ConfigChannel+0x1d8>)
 80013fe:	6819      	ldr	r1, [r3, #0]
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b10      	cmp	r3, #16
 8001406:	d101      	bne.n	800140c <HAL_ADC_ConfigChannel+0x1a0>
 8001408:	4a11      	ldr	r2, [pc, #68]	; (8001450 <HAL_ADC_ConfigChannel+0x1e4>)
 800140a:	e000      	b.n	800140e <HAL_ADC_ConfigChannel+0x1a2>
 800140c:	4a11      	ldr	r2, [pc, #68]	; (8001454 <HAL_ADC_ConfigChannel+0x1e8>)
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <HAL_ADC_ConfigChannel+0x1d8>)
 8001410:	400a      	ands	r2, r1
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e009      	b.n	800142a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141a:	2220      	movs	r2, #32
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001422:	230f      	movs	r3, #15
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2234      	movs	r2, #52	; 0x34
 800142e:	2100      	movs	r1, #0
 8001430:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001432:	230f      	movs	r3, #15
 8001434:	18fb      	adds	r3, r7, r3
 8001436:	781b      	ldrb	r3, [r3, #0]
}
 8001438:	0018      	movs	r0, r3
 800143a:	46bd      	mov	sp, r7
 800143c:	b004      	add	sp, #16
 800143e:	bd80      	pop	{r7, pc}
 8001440:	00001001 	.word	0x00001001
 8001444:	40012708 	.word	0x40012708
 8001448:	20000024 	.word	0x20000024
 800144c:	000f4240 	.word	0x000f4240
 8001450:	ff7fffff 	.word	0xff7fffff
 8001454:	ffbfffff 	.word	0xffbfffff

08001458 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001460:	2317      	movs	r3, #23
 8001462:	18fb      	adds	r3, r7, r3
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2234      	movs	r2, #52	; 0x34
 8001474:	5c9b      	ldrb	r3, [r3, r2]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d101      	bne.n	800147e <HAL_ADCEx_Calibration_Start+0x26>
 800147a:	2302      	movs	r3, #2
 800147c:	e08d      	b.n	800159a <HAL_ADCEx_Calibration_Start+0x142>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2234      	movs	r2, #52	; 0x34
 8001482:	2101      	movs	r1, #1
 8001484:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	2203      	movs	r2, #3
 800148e:	4013      	ands	r3, r2
 8001490:	2b01      	cmp	r3, #1
 8001492:	d112      	bne.n	80014ba <HAL_ADCEx_Calibration_Start+0x62>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2201      	movs	r2, #1
 800149c:	4013      	ands	r3, r2
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d009      	beq.n	80014b6 <HAL_ADCEx_Calibration_Start+0x5e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	401a      	ands	r2, r3
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d101      	bne.n	80014ba <HAL_ADCEx_Calibration_Start+0x62>
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <HAL_ADCEx_Calibration_Start+0x64>
 80014ba:	2300      	movs	r3, #0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d15b      	bne.n	8001578 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c4:	4a37      	ldr	r2, [pc, #220]	; (80015a4 <HAL_ADCEx_Calibration_Start+0x14c>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	2202      	movs	r2, #2
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2203      	movs	r2, #3
 80014d8:	4013      	ands	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2103      	movs	r1, #3
 80014e8:	438a      	bics	r2, r1
 80014ea:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2180      	movs	r1, #128	; 0x80
 80014f8:	0609      	lsls	r1, r1, #24
 80014fa:	430a      	orrs	r2, r1
 80014fc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80014fe:	f7ff fd6b 	bl	8000fd8 <HAL_GetTick>
 8001502:	0003      	movs	r3, r0
 8001504:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001506:	e01d      	b.n	8001544 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001508:	f7ff fd66 	bl	8000fd8 <HAL_GetTick>
 800150c:	0002      	movs	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d916      	bls.n	8001544 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	0fdb      	lsrs	r3, r3, #31
 800151e:	07da      	lsls	r2, r3, #31
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	061b      	lsls	r3, r3, #24
 8001524:	429a      	cmp	r2, r3
 8001526:	d10d      	bne.n	8001544 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800152c:	2212      	movs	r2, #18
 800152e:	4393      	bics	r3, r2
 8001530:	2210      	movs	r2, #16
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2234      	movs	r2, #52	; 0x34
 800153c:	2100      	movs	r1, #0
 800153e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e02a      	b.n	800159a <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	0fdb      	lsrs	r3, r3, #31
 800154c:	07da      	lsls	r2, r3, #31
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	061b      	lsls	r3, r3, #24
 8001552:	429a      	cmp	r2, r3
 8001554:	d0d8      	beq.n	8001508 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68d9      	ldr	r1, [r3, #12]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	430a      	orrs	r2, r1
 8001564:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156a:	2203      	movs	r2, #3
 800156c:	4393      	bics	r3, r2
 800156e:	2201      	movs	r2, #1
 8001570:	431a      	orrs	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	639a      	str	r2, [r3, #56]	; 0x38
 8001576:	e009      	b.n	800158c <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800157c:	2220      	movs	r2, #32
 800157e:	431a      	orrs	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001584:	2317      	movs	r3, #23
 8001586:	18fb      	adds	r3, r7, r3
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2234      	movs	r2, #52	; 0x34
 8001590:	2100      	movs	r1, #0
 8001592:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001594:	2317      	movs	r3, #23
 8001596:	18fb      	adds	r3, r7, r3
 8001598:	781b      	ldrb	r3, [r3, #0]
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b006      	add	sp, #24
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	fffffefd 	.word	0xfffffefd

080015a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	0002      	movs	r2, r0
 80015b0:	1dfb      	adds	r3, r7, #7
 80015b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	1dfb      	adds	r3, r7, #7
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b7f      	cmp	r3, #127	; 0x7f
 80015ba:	d809      	bhi.n	80015d0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015bc:	1dfb      	adds	r3, r7, #7
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	001a      	movs	r2, r3
 80015c2:	231f      	movs	r3, #31
 80015c4:	401a      	ands	r2, r3
 80015c6:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <__NVIC_EnableIRQ+0x30>)
 80015c8:	2101      	movs	r1, #1
 80015ca:	4091      	lsls	r1, r2
 80015cc:	000a      	movs	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]
  }
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b002      	add	sp, #8
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	e000e100 	.word	0xe000e100

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b590      	push	{r4, r7, lr}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	0002      	movs	r2, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	1dfb      	adds	r3, r7, #7
 80015e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015ea:	1dfb      	adds	r3, r7, #7
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b7f      	cmp	r3, #127	; 0x7f
 80015f0:	d828      	bhi.n	8001644 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015f2:	4a2f      	ldr	r2, [pc, #188]	; (80016b0 <__NVIC_SetPriority+0xd4>)
 80015f4:	1dfb      	adds	r3, r7, #7
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	33c0      	adds	r3, #192	; 0xc0
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	589b      	ldr	r3, [r3, r2]
 8001602:	1dfa      	adds	r2, r7, #7
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	0011      	movs	r1, r2
 8001608:	2203      	movs	r2, #3
 800160a:	400a      	ands	r2, r1
 800160c:	00d2      	lsls	r2, r2, #3
 800160e:	21ff      	movs	r1, #255	; 0xff
 8001610:	4091      	lsls	r1, r2
 8001612:	000a      	movs	r2, r1
 8001614:	43d2      	mvns	r2, r2
 8001616:	401a      	ands	r2, r3
 8001618:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	019b      	lsls	r3, r3, #6
 800161e:	22ff      	movs	r2, #255	; 0xff
 8001620:	401a      	ands	r2, r3
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	0018      	movs	r0, r3
 8001628:	2303      	movs	r3, #3
 800162a:	4003      	ands	r3, r0
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001630:	481f      	ldr	r0, [pc, #124]	; (80016b0 <__NVIC_SetPriority+0xd4>)
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b25b      	sxtb	r3, r3
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	430a      	orrs	r2, r1
 800163c:	33c0      	adds	r3, #192	; 0xc0
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001642:	e031      	b.n	80016a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001644:	4a1b      	ldr	r2, [pc, #108]	; (80016b4 <__NVIC_SetPriority+0xd8>)
 8001646:	1dfb      	adds	r3, r7, #7
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	0019      	movs	r1, r3
 800164c:	230f      	movs	r3, #15
 800164e:	400b      	ands	r3, r1
 8001650:	3b08      	subs	r3, #8
 8001652:	089b      	lsrs	r3, r3, #2
 8001654:	3306      	adds	r3, #6
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	18d3      	adds	r3, r2, r3
 800165a:	3304      	adds	r3, #4
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	1dfa      	adds	r2, r7, #7
 8001660:	7812      	ldrb	r2, [r2, #0]
 8001662:	0011      	movs	r1, r2
 8001664:	2203      	movs	r2, #3
 8001666:	400a      	ands	r2, r1
 8001668:	00d2      	lsls	r2, r2, #3
 800166a:	21ff      	movs	r1, #255	; 0xff
 800166c:	4091      	lsls	r1, r2
 800166e:	000a      	movs	r2, r1
 8001670:	43d2      	mvns	r2, r2
 8001672:	401a      	ands	r2, r3
 8001674:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	019b      	lsls	r3, r3, #6
 800167a:	22ff      	movs	r2, #255	; 0xff
 800167c:	401a      	ands	r2, r3
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	0018      	movs	r0, r3
 8001684:	2303      	movs	r3, #3
 8001686:	4003      	ands	r3, r0
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800168c:	4809      	ldr	r0, [pc, #36]	; (80016b4 <__NVIC_SetPriority+0xd8>)
 800168e:	1dfb      	adds	r3, r7, #7
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	001c      	movs	r4, r3
 8001694:	230f      	movs	r3, #15
 8001696:	4023      	ands	r3, r4
 8001698:	3b08      	subs	r3, #8
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	430a      	orrs	r2, r1
 800169e:	3306      	adds	r3, #6
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	18c3      	adds	r3, r0, r3
 80016a4:	3304      	adds	r3, #4
 80016a6:	601a      	str	r2, [r3, #0]
}
 80016a8:	46c0      	nop			; (mov r8, r8)
 80016aa:	46bd      	mov	sp, r7
 80016ac:	b003      	add	sp, #12
 80016ae:	bd90      	pop	{r4, r7, pc}
 80016b0:	e000e100 	.word	0xe000e100
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	1e5a      	subs	r2, r3, #1
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	045b      	lsls	r3, r3, #17
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d301      	bcc.n	80016d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016cc:	2301      	movs	r3, #1
 80016ce:	e010      	b.n	80016f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <SysTick_Config+0x44>)
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	3a01      	subs	r2, #1
 80016d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d8:	2301      	movs	r3, #1
 80016da:	425b      	negs	r3, r3
 80016dc:	2103      	movs	r1, #3
 80016de:	0018      	movs	r0, r3
 80016e0:	f7ff ff7c 	bl	80015dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <SysTick_Config+0x44>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ea:	4b04      	ldr	r3, [pc, #16]	; (80016fc <SysTick_Config+0x44>)
 80016ec:	2207      	movs	r2, #7
 80016ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	0018      	movs	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b002      	add	sp, #8
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	e000e010 	.word	0xe000e010

08001700 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	210f      	movs	r1, #15
 800170c:	187b      	adds	r3, r7, r1
 800170e:	1c02      	adds	r2, r0, #0
 8001710:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	187b      	adds	r3, r7, r1
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b25b      	sxtb	r3, r3
 800171a:	0011      	movs	r1, r2
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff ff5d 	bl	80015dc <__NVIC_SetPriority>
}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b004      	add	sp, #16
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	0002      	movs	r2, r0
 8001732:	1dfb      	adds	r3, r7, #7
 8001734:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001736:	1dfb      	adds	r3, r7, #7
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	b25b      	sxtb	r3, r3
 800173c:	0018      	movs	r0, r3
 800173e:	f7ff ff33 	bl	80015a8 <__NVIC_EnableIRQ>
}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	46bd      	mov	sp, r7
 8001746:	b002      	add	sp, #8
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	0018      	movs	r0, r3
 8001756:	f7ff ffaf 	bl	80016b8 <SysTick_Config>
 800175a:	0003      	movs	r3, r0
}
 800175c:	0018      	movs	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	b002      	add	sp, #8
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2221      	movs	r2, #33	; 0x21
 8001770:	5c9b      	ldrb	r3, [r3, r2]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d008      	beq.n	800178a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2204      	movs	r2, #4
 800177c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2220      	movs	r2, #32
 8001782:	2100      	movs	r1, #0
 8001784:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e020      	b.n	80017cc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	210e      	movs	r1, #14
 8001796:	438a      	bics	r2, r1
 8001798:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2101      	movs	r1, #1
 80017a6:	438a      	bics	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b2:	2101      	movs	r1, #1
 80017b4:	4091      	lsls	r1, r2
 80017b6:	000a      	movs	r2, r1
 80017b8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2221      	movs	r2, #33	; 0x21
 80017be:	2101      	movs	r1, #1
 80017c0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2220      	movs	r2, #32
 80017c6:	2100      	movs	r1, #0
 80017c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	0018      	movs	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	b002      	add	sp, #8
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017dc:	210f      	movs	r1, #15
 80017de:	187b      	adds	r3, r7, r1
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2221      	movs	r2, #33	; 0x21
 80017e8:	5c9b      	ldrb	r3, [r3, r2]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d006      	beq.n	80017fe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2204      	movs	r2, #4
 80017f4:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80017f6:	187b      	adds	r3, r7, r1
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	e028      	b.n	8001850 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	210e      	movs	r1, #14
 800180a:	438a      	bics	r2, r1
 800180c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2101      	movs	r1, #1
 800181a:	438a      	bics	r2, r1
 800181c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001826:	2101      	movs	r1, #1
 8001828:	4091      	lsls	r1, r2
 800182a:	000a      	movs	r2, r1
 800182c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2221      	movs	r2, #33	; 0x21
 8001832:	2101      	movs	r1, #1
 8001834:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2220      	movs	r2, #32
 800183a:	2100      	movs	r1, #0
 800183c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001842:	2b00      	cmp	r3, #0
 8001844:	d004      	beq.n	8001850 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	0010      	movs	r0, r2
 800184e:	4798      	blx	r3
    }
  }
  return status;
 8001850:	230f      	movs	r3, #15
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	781b      	ldrb	r3, [r3, #0]
}
 8001856:	0018      	movs	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	b004      	add	sp, #16
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186e:	e14f      	b.n	8001b10 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2101      	movs	r1, #1
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	4091      	lsls	r1, r2
 800187a:	000a      	movs	r2, r1
 800187c:	4013      	ands	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d100      	bne.n	8001888 <HAL_GPIO_Init+0x28>
 8001886:	e140      	b.n	8001b0a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2203      	movs	r2, #3
 800188e:	4013      	ands	r3, r2
 8001890:	2b01      	cmp	r3, #1
 8001892:	d005      	beq.n	80018a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2203      	movs	r2, #3
 800189a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800189c:	2b02      	cmp	r3, #2
 800189e:	d130      	bne.n	8001902 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	409a      	lsls	r2, r3
 80018ae:	0013      	movs	r3, r2
 80018b0:	43da      	mvns	r2, r3
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	409a      	lsls	r2, r3
 80018c2:	0013      	movs	r3, r2
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018d6:	2201      	movs	r2, #1
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
 80018dc:	0013      	movs	r3, r2
 80018de:	43da      	mvns	r2, r3
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	091b      	lsrs	r3, r3, #4
 80018ec:	2201      	movs	r2, #1
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
 80018f4:	0013      	movs	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2203      	movs	r2, #3
 8001908:	4013      	ands	r3, r2
 800190a:	2b03      	cmp	r3, #3
 800190c:	d017      	beq.n	800193e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	2203      	movs	r2, #3
 800191a:	409a      	lsls	r2, r3
 800191c:	0013      	movs	r3, r2
 800191e:	43da      	mvns	r2, r3
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	409a      	lsls	r2, r3
 8001930:	0013      	movs	r3, r2
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2203      	movs	r2, #3
 8001944:	4013      	ands	r3, r2
 8001946:	2b02      	cmp	r3, #2
 8001948:	d123      	bne.n	8001992 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	08da      	lsrs	r2, r3, #3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3208      	adds	r2, #8
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	58d3      	ldr	r3, [r2, r3]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2207      	movs	r2, #7
 800195c:	4013      	ands	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	409a      	lsls	r2, r3
 8001964:	0013      	movs	r3, r2
 8001966:	43da      	mvns	r2, r3
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	2107      	movs	r1, #7
 8001976:	400b      	ands	r3, r1
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	409a      	lsls	r2, r3
 800197c:	0013      	movs	r3, r2
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	08da      	lsrs	r2, r3, #3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3208      	adds	r2, #8
 800198c:	0092      	lsls	r2, r2, #2
 800198e:	6939      	ldr	r1, [r7, #16]
 8001990:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	2203      	movs	r2, #3
 800199e:	409a      	lsls	r2, r3
 80019a0:	0013      	movs	r3, r2
 80019a2:	43da      	mvns	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2203      	movs	r2, #3
 80019b0:	401a      	ands	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	409a      	lsls	r2, r3
 80019b8:	0013      	movs	r3, r2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	23c0      	movs	r3, #192	; 0xc0
 80019cc:	029b      	lsls	r3, r3, #10
 80019ce:	4013      	ands	r3, r2
 80019d0:	d100      	bne.n	80019d4 <HAL_GPIO_Init+0x174>
 80019d2:	e09a      	b.n	8001b0a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d4:	4b54      	ldr	r3, [pc, #336]	; (8001b28 <HAL_GPIO_Init+0x2c8>)
 80019d6:	699a      	ldr	r2, [r3, #24]
 80019d8:	4b53      	ldr	r3, [pc, #332]	; (8001b28 <HAL_GPIO_Init+0x2c8>)
 80019da:	2101      	movs	r1, #1
 80019dc:	430a      	orrs	r2, r1
 80019de:	619a      	str	r2, [r3, #24]
 80019e0:	4b51      	ldr	r3, [pc, #324]	; (8001b28 <HAL_GPIO_Init+0x2c8>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2201      	movs	r2, #1
 80019e6:	4013      	ands	r3, r2
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019ec:	4a4f      	ldr	r2, [pc, #316]	; (8001b2c <HAL_GPIO_Init+0x2cc>)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	089b      	lsrs	r3, r3, #2
 80019f2:	3302      	adds	r3, #2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	589b      	ldr	r3, [r3, r2]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	2203      	movs	r2, #3
 80019fe:	4013      	ands	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	220f      	movs	r2, #15
 8001a04:	409a      	lsls	r2, r3
 8001a06:	0013      	movs	r3, r2
 8001a08:	43da      	mvns	r2, r3
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	2390      	movs	r3, #144	; 0x90
 8001a14:	05db      	lsls	r3, r3, #23
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d013      	beq.n	8001a42 <HAL_GPIO_Init+0x1e2>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a44      	ldr	r2, [pc, #272]	; (8001b30 <HAL_GPIO_Init+0x2d0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d00d      	beq.n	8001a3e <HAL_GPIO_Init+0x1de>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a43      	ldr	r2, [pc, #268]	; (8001b34 <HAL_GPIO_Init+0x2d4>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d007      	beq.n	8001a3a <HAL_GPIO_Init+0x1da>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a42      	ldr	r2, [pc, #264]	; (8001b38 <HAL_GPIO_Init+0x2d8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_GPIO_Init+0x1d6>
 8001a32:	2303      	movs	r3, #3
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x1e4>
 8001a36:	2305      	movs	r3, #5
 8001a38:	e004      	b.n	8001a44 <HAL_GPIO_Init+0x1e4>
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	e002      	b.n	8001a44 <HAL_GPIO_Init+0x1e4>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_GPIO_Init+0x1e4>
 8001a42:	2300      	movs	r3, #0
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	2103      	movs	r1, #3
 8001a48:	400a      	ands	r2, r1
 8001a4a:	0092      	lsls	r2, r2, #2
 8001a4c:	4093      	lsls	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a54:	4935      	ldr	r1, [pc, #212]	; (8001b2c <HAL_GPIO_Init+0x2cc>)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a62:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <HAL_GPIO_Init+0x2dc>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	035b      	lsls	r3, r3, #13
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a86:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <HAL_GPIO_Init+0x2dc>)
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a8c:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <HAL_GPIO_Init+0x2dc>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	43da      	mvns	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	039b      	lsls	r3, r3, #14
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ab0:	4b22      	ldr	r3, [pc, #136]	; (8001b3c <HAL_GPIO_Init+0x2dc>)
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001ab6:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_GPIO_Init+0x2dc>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	43da      	mvns	r2, r3
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	029b      	lsls	r3, r3, #10
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d003      	beq.n	8001ada <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ada:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <HAL_GPIO_Init+0x2dc>)
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_GPIO_Init+0x2dc>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	43da      	mvns	r2, r3
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4013      	ands	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	025b      	lsls	r3, r3, #9
 8001af8:	4013      	ands	r3, r2
 8001afa:	d003      	beq.n	8001b04 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_GPIO_Init+0x2dc>)
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	40da      	lsrs	r2, r3
 8001b18:	1e13      	subs	r3, r2, #0
 8001b1a:	d000      	beq.n	8001b1e <HAL_GPIO_Init+0x2be>
 8001b1c:	e6a8      	b.n	8001870 <HAL_GPIO_Init+0x10>
  } 
}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	46c0      	nop			; (mov r8, r8)
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b006      	add	sp, #24
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	48000400 	.word	0x48000400
 8001b34:	48000800 	.word	0x48000800
 8001b38:	48000c00 	.word	0x48000c00
 8001b3c:	40010400 	.word	0x40010400

08001b40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	0002      	movs	r2, r0
 8001b48:	1dbb      	adds	r3, r7, #6
 8001b4a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	1dba      	adds	r2, r7, #6
 8001b52:	8812      	ldrh	r2, [r2, #0]
 8001b54:	4013      	ands	r3, r2
 8001b56:	d008      	beq.n	8001b6a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001b5a:	1dba      	adds	r2, r7, #6
 8001b5c:	8812      	ldrh	r2, [r2, #0]
 8001b5e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b60:	1dbb      	adds	r3, r7, #6
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	0018      	movs	r0, r3
 8001b66:	f7fe fb6d 	bl	8000244 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b002      	add	sp, #8
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	46c0      	nop			; (mov r8, r8)
 8001b74:	40010400 	.word	0x40010400

08001b78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e082      	b.n	8001c90 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2241      	movs	r2, #65	; 0x41
 8001b8e:	5c9b      	ldrb	r3, [r3, r2]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d107      	bne.n	8001ba6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2240      	movs	r2, #64	; 0x40
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f7fe ff81 	bl	8000aa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2241      	movs	r2, #65	; 0x41
 8001baa:	2124      	movs	r1, #36	; 0x24
 8001bac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	438a      	bics	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4934      	ldr	r1, [pc, #208]	; (8001c98 <HAL_I2C_Init+0x120>)
 8001bc8:	400a      	ands	r2, r1
 8001bca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4931      	ldr	r1, [pc, #196]	; (8001c9c <HAL_I2C_Init+0x124>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d108      	bne.n	8001bf6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2180      	movs	r1, #128	; 0x80
 8001bee:	0209      	lsls	r1, r1, #8
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	e007      	b.n	8001c06 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2184      	movs	r1, #132	; 0x84
 8001c00:	0209      	lsls	r1, r1, #8
 8001c02:	430a      	orrs	r2, r1
 8001c04:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d104      	bne.n	8001c18 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2280      	movs	r2, #128	; 0x80
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	491f      	ldr	r1, [pc, #124]	; (8001ca0 <HAL_I2C_Init+0x128>)
 8001c24:	430a      	orrs	r2, r1
 8001c26:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	491a      	ldr	r1, [pc, #104]	; (8001c9c <HAL_I2C_Init+0x124>)
 8001c34:	400a      	ands	r2, r1
 8001c36:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	431a      	orrs	r2, r3
 8001c42:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69d9      	ldr	r1, [r3, #28]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1a      	ldr	r2, [r3, #32]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2241      	movs	r2, #65	; 0x41
 8001c7c:	2120      	movs	r1, #32
 8001c7e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2242      	movs	r2, #66	; 0x42
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b002      	add	sp, #8
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	f0ffffff 	.word	0xf0ffffff
 8001c9c:	ffff7fff 	.word	0xffff7fff
 8001ca0:	02008000 	.word	0x02008000

08001ca4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2241      	movs	r2, #65	; 0x41
 8001cb2:	5c9b      	ldrb	r3, [r3, r2]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d138      	bne.n	8001d2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2240      	movs	r2, #64	; 0x40
 8001cbe:	5c9b      	ldrb	r3, [r3, r2]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e032      	b.n	8001d2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2240      	movs	r2, #64	; 0x40
 8001ccc:	2101      	movs	r1, #1
 8001cce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2241      	movs	r2, #65	; 0x41
 8001cd4:	2124      	movs	r1, #36	; 0x24
 8001cd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4911      	ldr	r1, [pc, #68]	; (8001d38 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001cf4:	400a      	ands	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6819      	ldr	r1, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2101      	movs	r1, #1
 8001d14:	430a      	orrs	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2241      	movs	r2, #65	; 0x41
 8001d1c:	2120      	movs	r1, #32
 8001d1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2240      	movs	r2, #64	; 0x40
 8001d24:	2100      	movs	r1, #0
 8001d26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e000      	b.n	8001d2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d2c:	2302      	movs	r3, #2
  }
}
 8001d2e:	0018      	movs	r0, r3
 8001d30:	46bd      	mov	sp, r7
 8001d32:	b002      	add	sp, #8
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	46c0      	nop			; (mov r8, r8)
 8001d38:	ffffefff 	.word	0xffffefff

08001d3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2241      	movs	r2, #65	; 0x41
 8001d4a:	5c9b      	ldrb	r3, [r3, r2]
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b20      	cmp	r3, #32
 8001d50:	d139      	bne.n	8001dc6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2240      	movs	r2, #64	; 0x40
 8001d56:	5c9b      	ldrb	r3, [r3, r2]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e033      	b.n	8001dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2240      	movs	r2, #64	; 0x40
 8001d64:	2101      	movs	r1, #1
 8001d66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2241      	movs	r2, #65	; 0x41
 8001d6c:	2124      	movs	r1, #36	; 0x24
 8001d6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	438a      	bics	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4a11      	ldr	r2, [pc, #68]	; (8001dd0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	021b      	lsls	r3, r3, #8
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2101      	movs	r1, #1
 8001dae:	430a      	orrs	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2241      	movs	r2, #65	; 0x41
 8001db6:	2120      	movs	r1, #32
 8001db8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2240      	movs	r2, #64	; 0x40
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dc6:	2302      	movs	r3, #2
  }
}
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b004      	add	sp, #16
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	fffff0ff 	.word	0xfffff0ff

08001dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e301      	b.n	80023ea <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2201      	movs	r2, #1
 8001dec:	4013      	ands	r3, r2
 8001dee:	d100      	bne.n	8001df2 <HAL_RCC_OscConfig+0x1e>
 8001df0:	e08d      	b.n	8001f0e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001df2:	4bc3      	ldr	r3, [pc, #780]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	220c      	movs	r2, #12
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	d00e      	beq.n	8001e1c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dfe:	4bc0      	ldr	r3, [pc, #768]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	220c      	movs	r2, #12
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d116      	bne.n	8001e38 <HAL_RCC_OscConfig+0x64>
 8001e0a:	4bbd      	ldr	r3, [pc, #756]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	025b      	lsls	r3, r3, #9
 8001e12:	401a      	ands	r2, r3
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	025b      	lsls	r3, r3, #9
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d10d      	bne.n	8001e38 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1c:	4bb8      	ldr	r3, [pc, #736]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	2380      	movs	r3, #128	; 0x80
 8001e22:	029b      	lsls	r3, r3, #10
 8001e24:	4013      	ands	r3, r2
 8001e26:	d100      	bne.n	8001e2a <HAL_RCC_OscConfig+0x56>
 8001e28:	e070      	b.n	8001f0c <HAL_RCC_OscConfig+0x138>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d000      	beq.n	8001e34 <HAL_RCC_OscConfig+0x60>
 8001e32:	e06b      	b.n	8001f0c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e2d8      	b.n	80023ea <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d107      	bne.n	8001e50 <HAL_RCC_OscConfig+0x7c>
 8001e40:	4baf      	ldr	r3, [pc, #700]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4bae      	ldr	r3, [pc, #696]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	0249      	lsls	r1, r1, #9
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	e02f      	b.n	8001eb0 <HAL_RCC_OscConfig+0xdc>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10c      	bne.n	8001e72 <HAL_RCC_OscConfig+0x9e>
 8001e58:	4ba9      	ldr	r3, [pc, #676]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4ba8      	ldr	r3, [pc, #672]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001e5e:	49a9      	ldr	r1, [pc, #676]	; (8002104 <HAL_RCC_OscConfig+0x330>)
 8001e60:	400a      	ands	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	4ba6      	ldr	r3, [pc, #664]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4ba5      	ldr	r3, [pc, #660]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001e6a:	49a7      	ldr	r1, [pc, #668]	; (8002108 <HAL_RCC_OscConfig+0x334>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e01e      	b.n	8001eb0 <HAL_RCC_OscConfig+0xdc>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	d10e      	bne.n	8001e98 <HAL_RCC_OscConfig+0xc4>
 8001e7a:	4ba1      	ldr	r3, [pc, #644]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4ba0      	ldr	r3, [pc, #640]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	02c9      	lsls	r1, r1, #11
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	4b9d      	ldr	r3, [pc, #628]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b9c      	ldr	r3, [pc, #624]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001e8e:	2180      	movs	r1, #128	; 0x80
 8001e90:	0249      	lsls	r1, r1, #9
 8001e92:	430a      	orrs	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCC_OscConfig+0xdc>
 8001e98:	4b99      	ldr	r3, [pc, #612]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b98      	ldr	r3, [pc, #608]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001e9e:	4999      	ldr	r1, [pc, #612]	; (8002104 <HAL_RCC_OscConfig+0x330>)
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	4b96      	ldr	r3, [pc, #600]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b95      	ldr	r3, [pc, #596]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001eaa:	4997      	ldr	r1, [pc, #604]	; (8002108 <HAL_RCC_OscConfig+0x334>)
 8001eac:	400a      	ands	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d014      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff f88e 	bl	8000fd8 <HAL_GetTick>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec2:	f7ff f889 	bl	8000fd8 <HAL_GetTick>
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b64      	cmp	r3, #100	; 0x64
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e28a      	b.n	80023ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed4:	4b8a      	ldr	r3, [pc, #552]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	029b      	lsls	r3, r3, #10
 8001edc:	4013      	ands	r3, r2
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0xee>
 8001ee0:	e015      	b.n	8001f0e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7ff f879 	bl	8000fd8 <HAL_GetTick>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eec:	f7ff f874 	bl	8000fd8 <HAL_GetTick>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b64      	cmp	r3, #100	; 0x64
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e275      	b.n	80023ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efe:	4b80      	ldr	r3, [pc, #512]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	029b      	lsls	r3, r3, #10
 8001f06:	4013      	ands	r3, r2
 8001f08:	d1f0      	bne.n	8001eec <HAL_RCC_OscConfig+0x118>
 8001f0a:	e000      	b.n	8001f0e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2202      	movs	r2, #2
 8001f14:	4013      	ands	r3, r2
 8001f16:	d100      	bne.n	8001f1a <HAL_RCC_OscConfig+0x146>
 8001f18:	e069      	b.n	8001fee <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f1a:	4b79      	ldr	r3, [pc, #484]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	220c      	movs	r2, #12
 8001f20:	4013      	ands	r3, r2
 8001f22:	d00b      	beq.n	8001f3c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f24:	4b76      	ldr	r3, [pc, #472]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	220c      	movs	r2, #12
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d11c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x196>
 8001f30:	4b73      	ldr	r3, [pc, #460]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	025b      	lsls	r3, r3, #9
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d116      	bne.n	8001f6a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3c:	4b70      	ldr	r3, [pc, #448]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2202      	movs	r2, #2
 8001f42:	4013      	ands	r3, r2
 8001f44:	d005      	beq.n	8001f52 <HAL_RCC_OscConfig+0x17e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e24b      	b.n	80023ea <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f52:	4b6b      	ldr	r3, [pc, #428]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	22f8      	movs	r2, #248	; 0xf8
 8001f58:	4393      	bics	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	00da      	lsls	r2, r3, #3
 8001f62:	4b67      	ldr	r3, [pc, #412]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001f64:	430a      	orrs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f68:	e041      	b.n	8001fee <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d024      	beq.n	8001fbc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f72:	4b63      	ldr	r3, [pc, #396]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4b62      	ldr	r3, [pc, #392]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001f78:	2101      	movs	r1, #1
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7ff f82b 	bl	8000fd8 <HAL_GetTick>
 8001f82:	0003      	movs	r3, r0
 8001f84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f88:	f7ff f826 	bl	8000fd8 <HAL_GetTick>
 8001f8c:	0002      	movs	r2, r0
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e227      	b.n	80023ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9a:	4b59      	ldr	r3, [pc, #356]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d0f1      	beq.n	8001f88 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa4:	4b56      	ldr	r3, [pc, #344]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	22f8      	movs	r2, #248	; 0xf8
 8001faa:	4393      	bics	r3, r2
 8001fac:	0019      	movs	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00da      	lsls	r2, r3, #3
 8001fb4:	4b52      	ldr	r3, [pc, #328]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	e018      	b.n	8001fee <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fbc:	4b50      	ldr	r3, [pc, #320]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b4f      	ldr	r3, [pc, #316]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	438a      	bics	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7ff f806 	bl	8000fd8 <HAL_GetTick>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd2:	f7ff f801 	bl	8000fd8 <HAL_GetTick>
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e202      	b.n	80023ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe4:	4b46      	ldr	r3, [pc, #280]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	4013      	ands	r3, r2
 8001fec:	d1f1      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d036      	beq.n	8002066 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69db      	ldr	r3, [r3, #28]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d019      	beq.n	8002034 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002000:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8002002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002004:	4b3e      	ldr	r3, [pc, #248]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8002006:	2101      	movs	r1, #1
 8002008:	430a      	orrs	r2, r1
 800200a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200c:	f7fe ffe4 	bl	8000fd8 <HAL_GetTick>
 8002010:	0003      	movs	r3, r0
 8002012:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002016:	f7fe ffdf 	bl	8000fd8 <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e1e0      	b.n	80023ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002028:	4b35      	ldr	r3, [pc, #212]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	2202      	movs	r2, #2
 800202e:	4013      	ands	r3, r2
 8002030:	d0f1      	beq.n	8002016 <HAL_RCC_OscConfig+0x242>
 8002032:	e018      	b.n	8002066 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002034:	4b32      	ldr	r3, [pc, #200]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8002036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002038:	4b31      	ldr	r3, [pc, #196]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 800203a:	2101      	movs	r1, #1
 800203c:	438a      	bics	r2, r1
 800203e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002040:	f7fe ffca 	bl	8000fd8 <HAL_GetTick>
 8002044:	0003      	movs	r3, r0
 8002046:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002048:	e008      	b.n	800205c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204a:	f7fe ffc5 	bl	8000fd8 <HAL_GetTick>
 800204e:	0002      	movs	r2, r0
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d901      	bls.n	800205c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e1c6      	b.n	80023ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205c:	4b28      	ldr	r3, [pc, #160]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	2202      	movs	r2, #2
 8002062:	4013      	ands	r3, r2
 8002064:	d1f1      	bne.n	800204a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2204      	movs	r2, #4
 800206c:	4013      	ands	r3, r2
 800206e:	d100      	bne.n	8002072 <HAL_RCC_OscConfig+0x29e>
 8002070:	e0b4      	b.n	80021dc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002072:	201f      	movs	r0, #31
 8002074:	183b      	adds	r3, r7, r0
 8002076:	2200      	movs	r2, #0
 8002078:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207a:	4b21      	ldr	r3, [pc, #132]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 800207c:	69da      	ldr	r2, [r3, #28]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	055b      	lsls	r3, r3, #21
 8002082:	4013      	ands	r3, r2
 8002084:	d110      	bne.n	80020a8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8002088:	69da      	ldr	r2, [r3, #28]
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 800208c:	2180      	movs	r1, #128	; 0x80
 800208e:	0549      	lsls	r1, r1, #21
 8002090:	430a      	orrs	r2, r1
 8002092:	61da      	str	r2, [r3, #28]
 8002094:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 8002096:	69da      	ldr	r2, [r3, #28]
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	055b      	lsls	r3, r3, #21
 800209c:	4013      	ands	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020a2:	183b      	adds	r3, r7, r0
 80020a4:	2201      	movs	r2, #1
 80020a6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_RCC_OscConfig+0x338>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4013      	ands	r3, r2
 80020b2:	d11a      	bne.n	80020ea <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020b4:	4b15      	ldr	r3, [pc, #84]	; (800210c <HAL_RCC_OscConfig+0x338>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b14      	ldr	r3, [pc, #80]	; (800210c <HAL_RCC_OscConfig+0x338>)
 80020ba:	2180      	movs	r1, #128	; 0x80
 80020bc:	0049      	lsls	r1, r1, #1
 80020be:	430a      	orrs	r2, r1
 80020c0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c2:	f7fe ff89 	bl	8000fd8 <HAL_GetTick>
 80020c6:	0003      	movs	r3, r0
 80020c8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020cc:	f7fe ff84 	bl	8000fd8 <HAL_GetTick>
 80020d0:	0002      	movs	r2, r0
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	; 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e185      	b.n	80023ea <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCC_OscConfig+0x338>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4013      	ands	r3, r2
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d10e      	bne.n	8002110 <HAL_RCC_OscConfig+0x33c>
 80020f2:	4b03      	ldr	r3, [pc, #12]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 80020f4:	6a1a      	ldr	r2, [r3, #32]
 80020f6:	4b02      	ldr	r3, [pc, #8]	; (8002100 <HAL_RCC_OscConfig+0x32c>)
 80020f8:	2101      	movs	r1, #1
 80020fa:	430a      	orrs	r2, r1
 80020fc:	621a      	str	r2, [r3, #32]
 80020fe:	e035      	b.n	800216c <HAL_RCC_OscConfig+0x398>
 8002100:	40021000 	.word	0x40021000
 8002104:	fffeffff 	.word	0xfffeffff
 8002108:	fffbffff 	.word	0xfffbffff
 800210c:	40007000 	.word	0x40007000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10c      	bne.n	8002132 <HAL_RCC_OscConfig+0x35e>
 8002118:	4bb6      	ldr	r3, [pc, #728]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 800211a:	6a1a      	ldr	r2, [r3, #32]
 800211c:	4bb5      	ldr	r3, [pc, #724]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 800211e:	2101      	movs	r1, #1
 8002120:	438a      	bics	r2, r1
 8002122:	621a      	str	r2, [r3, #32]
 8002124:	4bb3      	ldr	r3, [pc, #716]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002126:	6a1a      	ldr	r2, [r3, #32]
 8002128:	4bb2      	ldr	r3, [pc, #712]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 800212a:	2104      	movs	r1, #4
 800212c:	438a      	bics	r2, r1
 800212e:	621a      	str	r2, [r3, #32]
 8002130:	e01c      	b.n	800216c <HAL_RCC_OscConfig+0x398>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b05      	cmp	r3, #5
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x380>
 800213a:	4bae      	ldr	r3, [pc, #696]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 800213c:	6a1a      	ldr	r2, [r3, #32]
 800213e:	4bad      	ldr	r3, [pc, #692]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002140:	2104      	movs	r1, #4
 8002142:	430a      	orrs	r2, r1
 8002144:	621a      	str	r2, [r3, #32]
 8002146:	4bab      	ldr	r3, [pc, #684]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002148:	6a1a      	ldr	r2, [r3, #32]
 800214a:	4baa      	ldr	r3, [pc, #680]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 800214c:	2101      	movs	r1, #1
 800214e:	430a      	orrs	r2, r1
 8002150:	621a      	str	r2, [r3, #32]
 8002152:	e00b      	b.n	800216c <HAL_RCC_OscConfig+0x398>
 8002154:	4ba7      	ldr	r3, [pc, #668]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002156:	6a1a      	ldr	r2, [r3, #32]
 8002158:	4ba6      	ldr	r3, [pc, #664]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 800215a:	2101      	movs	r1, #1
 800215c:	438a      	bics	r2, r1
 800215e:	621a      	str	r2, [r3, #32]
 8002160:	4ba4      	ldr	r3, [pc, #656]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002162:	6a1a      	ldr	r2, [r3, #32]
 8002164:	4ba3      	ldr	r3, [pc, #652]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002166:	2104      	movs	r1, #4
 8002168:	438a      	bics	r2, r1
 800216a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d014      	beq.n	800219e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002174:	f7fe ff30 	bl	8000fd8 <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217c:	e009      	b.n	8002192 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7fe ff2b 	bl	8000fd8 <HAL_GetTick>
 8002182:	0002      	movs	r2, r0
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	4a9b      	ldr	r2, [pc, #620]	; (80023f8 <HAL_RCC_OscConfig+0x624>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e12b      	b.n	80023ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002192:	4b98      	ldr	r3, [pc, #608]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	2202      	movs	r2, #2
 8002198:	4013      	ands	r3, r2
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x3aa>
 800219c:	e013      	b.n	80021c6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219e:	f7fe ff1b 	bl	8000fd8 <HAL_GetTick>
 80021a2:	0003      	movs	r3, r0
 80021a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a6:	e009      	b.n	80021bc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a8:	f7fe ff16 	bl	8000fd8 <HAL_GetTick>
 80021ac:	0002      	movs	r2, r0
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	4a91      	ldr	r2, [pc, #580]	; (80023f8 <HAL_RCC_OscConfig+0x624>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e116      	b.n	80023ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021bc:	4b8d      	ldr	r3, [pc, #564]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	2202      	movs	r2, #2
 80021c2:	4013      	ands	r3, r2
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021c6:	231f      	movs	r3, #31
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d105      	bne.n	80021dc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d0:	4b88      	ldr	r3, [pc, #544]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 80021d2:	69da      	ldr	r2, [r3, #28]
 80021d4:	4b87      	ldr	r3, [pc, #540]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 80021d6:	4989      	ldr	r1, [pc, #548]	; (80023fc <HAL_RCC_OscConfig+0x628>)
 80021d8:	400a      	ands	r2, r1
 80021da:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2210      	movs	r2, #16
 80021e2:	4013      	ands	r3, r2
 80021e4:	d063      	beq.n	80022ae <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d12a      	bne.n	8002244 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021ee:	4b81      	ldr	r3, [pc, #516]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 80021f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021f2:	4b80      	ldr	r3, [pc, #512]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 80021f4:	2104      	movs	r1, #4
 80021f6:	430a      	orrs	r2, r1
 80021f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80021fa:	4b7e      	ldr	r3, [pc, #504]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 80021fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021fe:	4b7d      	ldr	r3, [pc, #500]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002200:	2101      	movs	r1, #1
 8002202:	430a      	orrs	r2, r1
 8002204:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002206:	f7fe fee7 	bl	8000fd8 <HAL_GetTick>
 800220a:	0003      	movs	r3, r0
 800220c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002210:	f7fe fee2 	bl	8000fd8 <HAL_GetTick>
 8002214:	0002      	movs	r2, r0
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e0e3      	b.n	80023ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002222:	4b74      	ldr	r3, [pc, #464]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002226:	2202      	movs	r2, #2
 8002228:	4013      	ands	r3, r2
 800222a:	d0f1      	beq.n	8002210 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800222c:	4b71      	ldr	r3, [pc, #452]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 800222e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002230:	22f8      	movs	r2, #248	; 0xf8
 8002232:	4393      	bics	r3, r2
 8002234:	0019      	movs	r1, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	00da      	lsls	r2, r3, #3
 800223c:	4b6d      	ldr	r3, [pc, #436]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 800223e:	430a      	orrs	r2, r1
 8002240:	635a      	str	r2, [r3, #52]	; 0x34
 8002242:	e034      	b.n	80022ae <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	3305      	adds	r3, #5
 800224a:	d111      	bne.n	8002270 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800224c:	4b69      	ldr	r3, [pc, #420]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 800224e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002250:	4b68      	ldr	r3, [pc, #416]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002252:	2104      	movs	r1, #4
 8002254:	438a      	bics	r2, r1
 8002256:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002258:	4b66      	ldr	r3, [pc, #408]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 800225a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225c:	22f8      	movs	r2, #248	; 0xf8
 800225e:	4393      	bics	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	00da      	lsls	r2, r3, #3
 8002268:	4b62      	ldr	r3, [pc, #392]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 800226a:	430a      	orrs	r2, r1
 800226c:	635a      	str	r2, [r3, #52]	; 0x34
 800226e:	e01e      	b.n	80022ae <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002270:	4b60      	ldr	r3, [pc, #384]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002272:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002274:	4b5f      	ldr	r3, [pc, #380]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002276:	2104      	movs	r1, #4
 8002278:	430a      	orrs	r2, r1
 800227a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800227c:	4b5d      	ldr	r3, [pc, #372]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 800227e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002280:	4b5c      	ldr	r3, [pc, #368]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002282:	2101      	movs	r1, #1
 8002284:	438a      	bics	r2, r1
 8002286:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002288:	f7fe fea6 	bl	8000fd8 <HAL_GetTick>
 800228c:	0003      	movs	r3, r0
 800228e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002292:	f7fe fea1 	bl	8000fd8 <HAL_GetTick>
 8002296:	0002      	movs	r2, r0
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e0a2      	b.n	80023ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022a4:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 80022a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a8:	2202      	movs	r2, #2
 80022aa:	4013      	ands	r3, r2
 80022ac:	d1f1      	bne.n	8002292 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d100      	bne.n	80022b8 <HAL_RCC_OscConfig+0x4e4>
 80022b6:	e097      	b.n	80023e8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b8:	4b4e      	ldr	r3, [pc, #312]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	220c      	movs	r2, #12
 80022be:	4013      	ands	r3, r2
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d100      	bne.n	80022c6 <HAL_RCC_OscConfig+0x4f2>
 80022c4:	e06b      	b.n	800239e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d14c      	bne.n	8002368 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ce:	4b49      	ldr	r3, [pc, #292]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b48      	ldr	r3, [pc, #288]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 80022d4:	494a      	ldr	r1, [pc, #296]	; (8002400 <HAL_RCC_OscConfig+0x62c>)
 80022d6:	400a      	ands	r2, r1
 80022d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022da:	f7fe fe7d 	bl	8000fd8 <HAL_GetTick>
 80022de:	0003      	movs	r3, r0
 80022e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e4:	f7fe fe78 	bl	8000fd8 <HAL_GetTick>
 80022e8:	0002      	movs	r2, r0
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e079      	b.n	80023ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f6:	4b3f      	ldr	r3, [pc, #252]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	049b      	lsls	r3, r3, #18
 80022fe:	4013      	ands	r3, r2
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002302:	4b3c      	ldr	r3, [pc, #240]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	220f      	movs	r2, #15
 8002308:	4393      	bics	r3, r2
 800230a:	0019      	movs	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002310:	4b38      	ldr	r3, [pc, #224]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002312:	430a      	orrs	r2, r1
 8002314:	62da      	str	r2, [r3, #44]	; 0x2c
 8002316:	4b37      	ldr	r3, [pc, #220]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4a3a      	ldr	r2, [pc, #232]	; (8002404 <HAL_RCC_OscConfig+0x630>)
 800231c:	4013      	ands	r3, r2
 800231e:	0019      	movs	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002328:	431a      	orrs	r2, r3
 800232a:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 800232c:	430a      	orrs	r2, r1
 800232e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002330:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002336:	2180      	movs	r1, #128	; 0x80
 8002338:	0449      	lsls	r1, r1, #17
 800233a:	430a      	orrs	r2, r1
 800233c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7fe fe4b 	bl	8000fd8 <HAL_GetTick>
 8002342:	0003      	movs	r3, r0
 8002344:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002348:	f7fe fe46 	bl	8000fd8 <HAL_GetTick>
 800234c:	0002      	movs	r2, r0
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e047      	b.n	80023ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	049b      	lsls	r3, r3, #18
 8002362:	4013      	ands	r3, r2
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x574>
 8002366:	e03f      	b.n	80023e8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002368:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 800236e:	4924      	ldr	r1, [pc, #144]	; (8002400 <HAL_RCC_OscConfig+0x62c>)
 8002370:	400a      	ands	r2, r1
 8002372:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7fe fe30 	bl	8000fd8 <HAL_GetTick>
 8002378:	0003      	movs	r3, r0
 800237a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237e:	f7fe fe2b 	bl	8000fd8 <HAL_GetTick>
 8002382:	0002      	movs	r2, r0
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e02c      	b.n	80023ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002390:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	049b      	lsls	r3, r3, #18
 8002398:	4013      	ands	r3, r2
 800239a:	d1f0      	bne.n	800237e <HAL_RCC_OscConfig+0x5aa>
 800239c:	e024      	b.n	80023e8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e01f      	b.n	80023ea <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80023b0:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <HAL_RCC_OscConfig+0x620>)
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	2380      	movs	r3, #128	; 0x80
 80023ba:	025b      	lsls	r3, r3, #9
 80023bc:	401a      	ands	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d10e      	bne.n	80023e4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	220f      	movs	r2, #15
 80023ca:	401a      	ands	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	23f0      	movs	r3, #240	; 0xf0
 80023d8:	039b      	lsls	r3, r3, #14
 80023da:	401a      	ands	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d001      	beq.n	80023e8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	0018      	movs	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b008      	add	sp, #32
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	40021000 	.word	0x40021000
 80023f8:	00001388 	.word	0x00001388
 80023fc:	efffffff 	.word	0xefffffff
 8002400:	feffffff 	.word	0xfeffffff
 8002404:	ffc2ffff 	.word	0xffc2ffff

08002408 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0b3      	b.n	8002584 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800241c:	4b5b      	ldr	r3, [pc, #364]	; (800258c <HAL_RCC_ClockConfig+0x184>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2201      	movs	r2, #1
 8002422:	4013      	ands	r3, r2
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d911      	bls.n	800244e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b58      	ldr	r3, [pc, #352]	; (800258c <HAL_RCC_ClockConfig+0x184>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2201      	movs	r2, #1
 8002430:	4393      	bics	r3, r2
 8002432:	0019      	movs	r1, r3
 8002434:	4b55      	ldr	r3, [pc, #340]	; (800258c <HAL_RCC_ClockConfig+0x184>)
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243c:	4b53      	ldr	r3, [pc, #332]	; (800258c <HAL_RCC_ClockConfig+0x184>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2201      	movs	r2, #1
 8002442:	4013      	ands	r3, r2
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d001      	beq.n	800244e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e09a      	b.n	8002584 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2202      	movs	r2, #2
 8002454:	4013      	ands	r3, r2
 8002456:	d015      	beq.n	8002484 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2204      	movs	r2, #4
 800245e:	4013      	ands	r3, r2
 8002460:	d006      	beq.n	8002470 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002462:	4b4b      	ldr	r3, [pc, #300]	; (8002590 <HAL_RCC_ClockConfig+0x188>)
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	4b4a      	ldr	r3, [pc, #296]	; (8002590 <HAL_RCC_ClockConfig+0x188>)
 8002468:	21e0      	movs	r1, #224	; 0xe0
 800246a:	00c9      	lsls	r1, r1, #3
 800246c:	430a      	orrs	r2, r1
 800246e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002470:	4b47      	ldr	r3, [pc, #284]	; (8002590 <HAL_RCC_ClockConfig+0x188>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	22f0      	movs	r2, #240	; 0xf0
 8002476:	4393      	bics	r3, r2
 8002478:	0019      	movs	r1, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	4b44      	ldr	r3, [pc, #272]	; (8002590 <HAL_RCC_ClockConfig+0x188>)
 8002480:	430a      	orrs	r2, r1
 8002482:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2201      	movs	r2, #1
 800248a:	4013      	ands	r3, r2
 800248c:	d040      	beq.n	8002510 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	4b3e      	ldr	r3, [pc, #248]	; (8002590 <HAL_RCC_ClockConfig+0x188>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	029b      	lsls	r3, r3, #10
 800249e:	4013      	ands	r3, r2
 80024a0:	d114      	bne.n	80024cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e06e      	b.n	8002584 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ae:	4b38      	ldr	r3, [pc, #224]	; (8002590 <HAL_RCC_ClockConfig+0x188>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	049b      	lsls	r3, r3, #18
 80024b6:	4013      	ands	r3, r2
 80024b8:	d108      	bne.n	80024cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e062      	b.n	8002584 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024be:	4b34      	ldr	r3, [pc, #208]	; (8002590 <HAL_RCC_ClockConfig+0x188>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2202      	movs	r2, #2
 80024c4:	4013      	ands	r3, r2
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e05b      	b.n	8002584 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024cc:	4b30      	ldr	r3, [pc, #192]	; (8002590 <HAL_RCC_ClockConfig+0x188>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2203      	movs	r2, #3
 80024d2:	4393      	bics	r3, r2
 80024d4:	0019      	movs	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	4b2d      	ldr	r3, [pc, #180]	; (8002590 <HAL_RCC_ClockConfig+0x188>)
 80024dc:	430a      	orrs	r2, r1
 80024de:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e0:	f7fe fd7a 	bl	8000fd8 <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e8:	e009      	b.n	80024fe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ea:	f7fe fd75 	bl	8000fd8 <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	4a27      	ldr	r2, [pc, #156]	; (8002594 <HAL_RCC_ClockConfig+0x18c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e042      	b.n	8002584 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	4b24      	ldr	r3, [pc, #144]	; (8002590 <HAL_RCC_ClockConfig+0x188>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	220c      	movs	r2, #12
 8002504:	401a      	ands	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	429a      	cmp	r2, r3
 800250e:	d1ec      	bne.n	80024ea <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002510:	4b1e      	ldr	r3, [pc, #120]	; (800258c <HAL_RCC_ClockConfig+0x184>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2201      	movs	r2, #1
 8002516:	4013      	ands	r3, r2
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d211      	bcs.n	8002542 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b1b      	ldr	r3, [pc, #108]	; (800258c <HAL_RCC_ClockConfig+0x184>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2201      	movs	r2, #1
 8002524:	4393      	bics	r3, r2
 8002526:	0019      	movs	r1, r3
 8002528:	4b18      	ldr	r3, [pc, #96]	; (800258c <HAL_RCC_ClockConfig+0x184>)
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002530:	4b16      	ldr	r3, [pc, #88]	; (800258c <HAL_RCC_ClockConfig+0x184>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2201      	movs	r2, #1
 8002536:	4013      	ands	r3, r2
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d001      	beq.n	8002542 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e020      	b.n	8002584 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2204      	movs	r2, #4
 8002548:	4013      	ands	r3, r2
 800254a:	d009      	beq.n	8002560 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <HAL_RCC_ClockConfig+0x188>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	4a11      	ldr	r2, [pc, #68]	; (8002598 <HAL_RCC_ClockConfig+0x190>)
 8002552:	4013      	ands	r3, r2
 8002554:	0019      	movs	r1, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <HAL_RCC_ClockConfig+0x188>)
 800255c:	430a      	orrs	r2, r1
 800255e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002560:	f000 f820 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 8002564:	0001      	movs	r1, r0
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_RCC_ClockConfig+0x188>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	220f      	movs	r2, #15
 800256e:	4013      	ands	r3, r2
 8002570:	4a0a      	ldr	r2, [pc, #40]	; (800259c <HAL_RCC_ClockConfig+0x194>)
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	000a      	movs	r2, r1
 8002576:	40da      	lsrs	r2, r3
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_RCC_ClockConfig+0x198>)
 800257a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800257c:	2000      	movs	r0, #0
 800257e:	f7fe fce5 	bl	8000f4c <HAL_InitTick>
  
  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	b004      	add	sp, #16
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40022000 	.word	0x40022000
 8002590:	40021000 	.word	0x40021000
 8002594:	00001388 	.word	0x00001388
 8002598:	fffff8ff 	.word	0xfffff8ff
 800259c:	080062d8 	.word	0x080062d8
 80025a0:	20000024 	.word	0x20000024

080025a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	2300      	movs	r3, #0
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	2300      	movs	r3, #0
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	2300      	movs	r3, #0
 80025b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80025be:	4b20      	ldr	r3, [pc, #128]	; (8002640 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	220c      	movs	r2, #12
 80025c8:	4013      	ands	r3, r2
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d002      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x30>
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d003      	beq.n	80025da <HAL_RCC_GetSysClockFreq+0x36>
 80025d2:	e02c      	b.n	800262e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025d6:	613b      	str	r3, [r7, #16]
      break;
 80025d8:	e02c      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	0c9b      	lsrs	r3, r3, #18
 80025de:	220f      	movs	r2, #15
 80025e0:	4013      	ands	r3, r2
 80025e2:	4a19      	ldr	r2, [pc, #100]	; (8002648 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025e4:	5cd3      	ldrb	r3, [r2, r3]
 80025e6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80025e8:	4b15      	ldr	r3, [pc, #84]	; (8002640 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	220f      	movs	r2, #15
 80025ee:	4013      	ands	r3, r2
 80025f0:	4a16      	ldr	r2, [pc, #88]	; (800264c <HAL_RCC_GetSysClockFreq+0xa8>)
 80025f2:	5cd3      	ldrb	r3, [r2, r3]
 80025f4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	025b      	lsls	r3, r3, #9
 80025fc:	4013      	ands	r3, r2
 80025fe:	d009      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	4810      	ldr	r0, [pc, #64]	; (8002644 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002604:	f7fd fd92 	bl	800012c <__udivsi3>
 8002608:	0003      	movs	r3, r0
 800260a:	001a      	movs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4353      	muls	r3, r2
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	e009      	b.n	8002628 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	000a      	movs	r2, r1
 8002618:	0152      	lsls	r2, r2, #5
 800261a:	1a52      	subs	r2, r2, r1
 800261c:	0193      	lsls	r3, r2, #6
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	185b      	adds	r3, r3, r1
 8002624:	021b      	lsls	r3, r3, #8
 8002626:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	613b      	str	r3, [r7, #16]
      break;
 800262c:	e002      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002630:	613b      	str	r3, [r7, #16]
      break;
 8002632:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002634:	693b      	ldr	r3, [r7, #16]
}
 8002636:	0018      	movs	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	b006      	add	sp, #24
 800263c:	bd80      	pop	{r7, pc}
 800263e:	46c0      	nop			; (mov r8, r8)
 8002640:	40021000 	.word	0x40021000
 8002644:	007a1200 	.word	0x007a1200
 8002648:	080062f0 	.word	0x080062f0
 800264c:	08006300 	.word	0x08006300

08002650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002654:	4b02      	ldr	r3, [pc, #8]	; (8002660 <HAL_RCC_GetHCLKFreq+0x10>)
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	0018      	movs	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	20000024 	.word	0x20000024

08002664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002668:	f7ff fff2 	bl	8002650 <HAL_RCC_GetHCLKFreq>
 800266c:	0001      	movs	r1, r0
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	0a1b      	lsrs	r3, r3, #8
 8002674:	2207      	movs	r2, #7
 8002676:	4013      	ands	r3, r2
 8002678:	4a04      	ldr	r2, [pc, #16]	; (800268c <HAL_RCC_GetPCLK1Freq+0x28>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	40d9      	lsrs	r1, r3
 800267e:	000b      	movs	r3, r1
}    
 8002680:	0018      	movs	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	40021000 	.word	0x40021000
 800268c:	080062e8 	.word	0x080062e8

08002690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	025b      	lsls	r3, r3, #9
 80026a8:	4013      	ands	r3, r2
 80026aa:	d100      	bne.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80026ac:	e08e      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80026ae:	2017      	movs	r0, #23
 80026b0:	183b      	adds	r3, r7, r0
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b6:	4b57      	ldr	r3, [pc, #348]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026b8:	69da      	ldr	r2, [r3, #28]
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	055b      	lsls	r3, r3, #21
 80026be:	4013      	ands	r3, r2
 80026c0:	d110      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026c2:	4b54      	ldr	r3, [pc, #336]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	4b53      	ldr	r3, [pc, #332]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026c8:	2180      	movs	r1, #128	; 0x80
 80026ca:	0549      	lsls	r1, r1, #21
 80026cc:	430a      	orrs	r2, r1
 80026ce:	61da      	str	r2, [r3, #28]
 80026d0:	4b50      	ldr	r3, [pc, #320]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026d2:	69da      	ldr	r2, [r3, #28]
 80026d4:	2380      	movs	r3, #128	; 0x80
 80026d6:	055b      	lsls	r3, r3, #21
 80026d8:	4013      	ands	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026de:	183b      	adds	r3, r7, r0
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	4b4c      	ldr	r3, [pc, #304]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4013      	ands	r3, r2
 80026ee:	d11a      	bne.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f0:	4b49      	ldr	r3, [pc, #292]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b48      	ldr	r3, [pc, #288]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	0049      	lsls	r1, r1, #1
 80026fa:	430a      	orrs	r2, r1
 80026fc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fe:	f7fe fc6b 	bl	8000fd8 <HAL_GetTick>
 8002702:	0003      	movs	r3, r0
 8002704:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002706:	e008      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002708:	f7fe fc66 	bl	8000fd8 <HAL_GetTick>
 800270c:	0002      	movs	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e077      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271a:	4b3f      	ldr	r3, [pc, #252]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4013      	ands	r3, r2
 8002724:	d0f0      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002726:	4b3b      	ldr	r3, [pc, #236]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002728:	6a1a      	ldr	r2, [r3, #32]
 800272a:	23c0      	movs	r3, #192	; 0xc0
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4013      	ands	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d034      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	23c0      	movs	r3, #192	; 0xc0
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4013      	ands	r3, r2
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	429a      	cmp	r2, r3
 8002746:	d02c      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002748:	4b32      	ldr	r3, [pc, #200]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	4a33      	ldr	r2, [pc, #204]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800274e:	4013      	ands	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002752:	4b30      	ldr	r3, [pc, #192]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002754:	6a1a      	ldr	r2, [r3, #32]
 8002756:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002758:	2180      	movs	r1, #128	; 0x80
 800275a:	0249      	lsls	r1, r1, #9
 800275c:	430a      	orrs	r2, r1
 800275e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002760:	4b2c      	ldr	r3, [pc, #176]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002762:	6a1a      	ldr	r2, [r3, #32]
 8002764:	4b2b      	ldr	r3, [pc, #172]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002766:	492e      	ldr	r1, [pc, #184]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002768:	400a      	ands	r2, r1
 800276a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800276c:	4b29      	ldr	r3, [pc, #164]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	4013      	ands	r3, r2
 8002778:	d013      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277a:	f7fe fc2d 	bl	8000fd8 <HAL_GetTick>
 800277e:	0003      	movs	r3, r0
 8002780:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002782:	e009      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002784:	f7fe fc28 	bl	8000fd8 <HAL_GetTick>
 8002788:	0002      	movs	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	4a25      	ldr	r2, [pc, #148]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d901      	bls.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e038      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002798:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	2202      	movs	r2, #2
 800279e:	4013      	ands	r3, r2
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027a2:	4b1c      	ldr	r3, [pc, #112]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4a1d      	ldr	r2, [pc, #116]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	0019      	movs	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	4b18      	ldr	r3, [pc, #96]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027b2:	430a      	orrs	r2, r1
 80027b4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027b6:	2317      	movs	r3, #23
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d105      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c0:	4b14      	ldr	r3, [pc, #80]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027c2:	69da      	ldr	r2, [r3, #28]
 80027c4:	4b13      	ldr	r3, [pc, #76]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027c6:	4918      	ldr	r1, [pc, #96]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80027c8:	400a      	ands	r2, r1
 80027ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2201      	movs	r2, #1
 80027d2:	4013      	ands	r3, r2
 80027d4:	d009      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	2203      	movs	r2, #3
 80027dc:	4393      	bics	r3, r2
 80027de:	0019      	movs	r1, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027e6:	430a      	orrs	r2, r1
 80027e8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2220      	movs	r2, #32
 80027f0:	4013      	ands	r3, r2
 80027f2:	d009      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027f4:	4b07      	ldr	r3, [pc, #28]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	2210      	movs	r2, #16
 80027fa:	4393      	bics	r3, r2
 80027fc:	0019      	movs	r1, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	4b04      	ldr	r3, [pc, #16]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002804:	430a      	orrs	r2, r1
 8002806:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b006      	add	sp, #24
 8002810:	bd80      	pop	{r7, pc}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	40021000 	.word	0x40021000
 8002818:	40007000 	.word	0x40007000
 800281c:	fffffcff 	.word	0xfffffcff
 8002820:	fffeffff 	.word	0xfffeffff
 8002824:	00001388 	.word	0x00001388
 8002828:	efffffff 	.word	0xefffffff

0800282c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800282c:	b5b0      	push	{r4, r5, r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002834:	230f      	movs	r3, #15
 8002836:	18fb      	adds	r3, r7, r3
 8002838:	2201      	movs	r2, #1
 800283a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e081      	b.n	800294a <HAL_RTC_Init+0x11e>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	7f5b      	ldrb	r3, [r3, #29]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d106      	bne.n	800285e <HAL_RTC_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	0018      	movs	r0, r3
 800285a:	f7fe f973 	bl	8000b44 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2202      	movs	r2, #2
 8002862:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2210      	movs	r2, #16
 800286c:	4013      	ands	r3, r2
 800286e:	2b10      	cmp	r3, #16
 8002870:	d05c      	beq.n	800292c <HAL_RTC_Init+0x100>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	22ca      	movs	r2, #202	; 0xca
 8002878:	625a      	str	r2, [r3, #36]	; 0x24
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2253      	movs	r2, #83	; 0x53
 8002880:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002882:	250f      	movs	r5, #15
 8002884:	197c      	adds	r4, r7, r5
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	0018      	movs	r0, r3
 800288a:	f000 f88f 	bl	80029ac <RTC_EnterInitMode>
 800288e:	0003      	movs	r3, r0
 8002890:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002892:	0028      	movs	r0, r5
 8002894:	183b      	adds	r3, r7, r0
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d12c      	bne.n	80028f6 <HAL_RTC_Init+0xca>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	492b      	ldr	r1, [pc, #172]	; (8002954 <HAL_RTC_Init+0x128>)
 80028a8:	400a      	ands	r2, r1
 80028aa:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6899      	ldr	r1, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	431a      	orrs	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	68d2      	ldr	r2, [r2, #12]
 80028d2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6919      	ldr	r1, [r3, #16]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	041a      	lsls	r2, r3, #16
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80028e8:	183c      	adds	r4, r7, r0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f000 f8a0 	bl	8002a32 <RTC_ExitInitMode>
 80028f2:	0003      	movs	r3, r0
 80028f4:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80028f6:	230f      	movs	r3, #15
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d110      	bne.n	8002922 <HAL_RTC_Init+0xf6>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4913      	ldr	r1, [pc, #76]	; (8002958 <HAL_RTC_Init+0x12c>)
 800290c:	400a      	ands	r2, r1
 800290e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	22ff      	movs	r2, #255	; 0xff
 8002928:	625a      	str	r2, [r3, #36]	; 0x24
 800292a:	e003      	b.n	8002934 <HAL_RTC_Init+0x108>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800292c:	230f      	movs	r3, #15
 800292e:	18fb      	adds	r3, r7, r3
 8002930:	2200      	movs	r2, #0
 8002932:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002934:	230f      	movs	r3, #15
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <HAL_RTC_Init+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002944:	230f      	movs	r3, #15
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	781b      	ldrb	r3, [r3, #0]
}
 800294a:	0018      	movs	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	b004      	add	sp, #16
 8002950:	bdb0      	pop	{r4, r5, r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	ff8fffbf 	.word	0xff8fffbf
 8002958:	fffbffff 	.word	0xfffbffff

0800295c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0e      	ldr	r2, [pc, #56]	; (80029a8 <HAL_RTC_WaitForSynchro+0x4c>)
 800296e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002970:	f7fe fb32 	bl	8000fd8 <HAL_GetTick>
 8002974:	0003      	movs	r3, r0
 8002976:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002978:	e00a      	b.n	8002990 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800297a:	f7fe fb2d 	bl	8000fd8 <HAL_GetTick>
 800297e:	0002      	movs	r2, r0
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	1ad2      	subs	r2, r2, r3
 8002984:	23fa      	movs	r3, #250	; 0xfa
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	429a      	cmp	r2, r3
 800298a:	d901      	bls.n	8002990 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e006      	b.n	800299e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	4013      	ands	r3, r2
 800299a:	d0ee      	beq.n	800297a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	0018      	movs	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	b004      	add	sp, #16
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	00017959 	.word	0x00017959

080029ac <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80029b8:	230f      	movs	r3, #15
 80029ba:	18fb      	adds	r3, r7, r3
 80029bc:	2200      	movs	r2, #0
 80029be:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2240      	movs	r2, #64	; 0x40
 80029c8:	4013      	ands	r3, r2
 80029ca:	d12b      	bne.n	8002a24 <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2180      	movs	r1, #128	; 0x80
 80029d8:	430a      	orrs	r2, r1
 80029da:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029dc:	f7fe fafc 	bl	8000fd8 <HAL_GetTick>
 80029e0:	0003      	movs	r3, r0
 80029e2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029e4:	e013      	b.n	8002a0e <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80029e6:	f7fe faf7 	bl	8000fd8 <HAL_GetTick>
 80029ea:	0002      	movs	r2, r0
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	1ad2      	subs	r2, r2, r3
 80029f0:	200f      	movs	r0, #15
 80029f2:	183b      	adds	r3, r7, r0
 80029f4:	1839      	adds	r1, r7, r0
 80029f6:	7809      	ldrb	r1, [r1, #0]
 80029f8:	7019      	strb	r1, [r3, #0]
 80029fa:	23fa      	movs	r3, #250	; 0xfa
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d905      	bls.n	8002a0e <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2204      	movs	r2, #4
 8002a06:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002a08:	183b      	adds	r3, r7, r0
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2240      	movs	r2, #64	; 0x40
 8002a16:	4013      	ands	r3, r2
 8002a18:	d104      	bne.n	8002a24 <RTC_EnterInitMode+0x78>
 8002a1a:	230f      	movs	r3, #15
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d1e0      	bne.n	80029e6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002a24:	230f      	movs	r3, #15
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	781b      	ldrb	r3, [r3, #0]
}
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b004      	add	sp, #16
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a32:	b590      	push	{r4, r7, lr}
 8002a34:	b085      	sub	sp, #20
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3a:	240f      	movs	r4, #15
 8002a3c:	193b      	adds	r3, r7, r4
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2180      	movs	r1, #128	; 0x80
 8002a4e:	438a      	bics	r2, r1
 8002a50:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d10b      	bne.n	8002a76 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	0018      	movs	r0, r3
 8002a62:	f7ff ff7b 	bl	800295c <HAL_RTC_WaitForSynchro>
 8002a66:	1e03      	subs	r3, r0, #0
 8002a68:	d005      	beq.n	8002a76 <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2204      	movs	r2, #4
 8002a6e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002a70:	193b      	adds	r3, r7, r4
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002a76:	230f      	movs	r3, #15
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	781b      	ldrb	r3, [r3, #0]
}
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b005      	add	sp, #20
 8002a82:	bd90      	pop	{r4, r7, pc}

08002a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e042      	b.n	8002b1c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	223d      	movs	r2, #61	; 0x3d
 8002a9a:	5c9b      	ldrb	r3, [r3, r2]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d107      	bne.n	8002ab2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	223c      	movs	r2, #60	; 0x3c
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7fe f861 	bl	8000b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	223d      	movs	r2, #61	; 0x3d
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	0010      	movs	r0, r2
 8002ac6:	f000 fad1 	bl	800306c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2246      	movs	r2, #70	; 0x46
 8002ace:	2101      	movs	r1, #1
 8002ad0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	223e      	movs	r2, #62	; 0x3e
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	5499      	strb	r1, [r3, r2]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	223f      	movs	r2, #63	; 0x3f
 8002ade:	2101      	movs	r1, #1
 8002ae0:	5499      	strb	r1, [r3, r2]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2240      	movs	r2, #64	; 0x40
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	5499      	strb	r1, [r3, r2]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2241      	movs	r2, #65	; 0x41
 8002aee:	2101      	movs	r1, #1
 8002af0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2242      	movs	r2, #66	; 0x42
 8002af6:	2101      	movs	r1, #1
 8002af8:	5499      	strb	r1, [r3, r2]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2243      	movs	r2, #67	; 0x43
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2244      	movs	r2, #68	; 0x44
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2245      	movs	r2, #69	; 0x45
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	223d      	movs	r2, #61	; 0x3d
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b002      	add	sp, #8
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e042      	b.n	8002bbc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	223d      	movs	r2, #61	; 0x3d
 8002b3a:	5c9b      	ldrb	r3, [r3, r2]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d107      	bne.n	8002b52 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	223c      	movs	r2, #60	; 0x3c
 8002b46:	2100      	movs	r1, #0
 8002b48:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 f839 	bl	8002bc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	223d      	movs	r2, #61	; 0x3d
 8002b56:	2102      	movs	r1, #2
 8002b58:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	3304      	adds	r3, #4
 8002b62:	0019      	movs	r1, r3
 8002b64:	0010      	movs	r0, r2
 8002b66:	f000 fa81 	bl	800306c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2246      	movs	r2, #70	; 0x46
 8002b6e:	2101      	movs	r1, #1
 8002b70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	223e      	movs	r2, #62	; 0x3e
 8002b76:	2101      	movs	r1, #1
 8002b78:	5499      	strb	r1, [r3, r2]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	223f      	movs	r2, #63	; 0x3f
 8002b7e:	2101      	movs	r1, #1
 8002b80:	5499      	strb	r1, [r3, r2]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2240      	movs	r2, #64	; 0x40
 8002b86:	2101      	movs	r1, #1
 8002b88:	5499      	strb	r1, [r3, r2]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2241      	movs	r2, #65	; 0x41
 8002b8e:	2101      	movs	r1, #1
 8002b90:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2242      	movs	r2, #66	; 0x42
 8002b96:	2101      	movs	r1, #1
 8002b98:	5499      	strb	r1, [r3, r2]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2243      	movs	r2, #67	; 0x43
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	5499      	strb	r1, [r3, r2]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2244      	movs	r2, #68	; 0x44
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	5499      	strb	r1, [r3, r2]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2245      	movs	r2, #69	; 0x45
 8002bae:	2101      	movs	r1, #1
 8002bb0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	223d      	movs	r2, #61	; 0x3d
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b002      	add	sp, #8
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b002      	add	sp, #8
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d108      	bne.n	8002bf6 <HAL_TIM_PWM_Start+0x22>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	223e      	movs	r2, #62	; 0x3e
 8002be8:	5c9b      	ldrb	r3, [r3, r2]
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	1e5a      	subs	r2, r3, #1
 8002bf0:	4193      	sbcs	r3, r2
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	e01f      	b.n	8002c36 <HAL_TIM_PWM_Start+0x62>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b04      	cmp	r3, #4
 8002bfa:	d108      	bne.n	8002c0e <HAL_TIM_PWM_Start+0x3a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	223f      	movs	r2, #63	; 0x3f
 8002c00:	5c9b      	ldrb	r3, [r3, r2]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	1e5a      	subs	r2, r3, #1
 8002c08:	4193      	sbcs	r3, r2
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	e013      	b.n	8002c36 <HAL_TIM_PWM_Start+0x62>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	d108      	bne.n	8002c26 <HAL_TIM_PWM_Start+0x52>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2240      	movs	r2, #64	; 0x40
 8002c18:	5c9b      	ldrb	r3, [r3, r2]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	1e5a      	subs	r2, r3, #1
 8002c20:	4193      	sbcs	r3, r2
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	e007      	b.n	8002c36 <HAL_TIM_PWM_Start+0x62>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2241      	movs	r2, #65	; 0x41
 8002c2a:	5c9b      	ldrb	r3, [r3, r2]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	1e5a      	subs	r2, r3, #1
 8002c32:	4193      	sbcs	r3, r2
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e06e      	b.n	8002d1c <HAL_TIM_PWM_Start+0x148>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d104      	bne.n	8002c4e <HAL_TIM_PWM_Start+0x7a>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	223e      	movs	r2, #62	; 0x3e
 8002c48:	2102      	movs	r1, #2
 8002c4a:	5499      	strb	r1, [r3, r2]
 8002c4c:	e013      	b.n	8002c76 <HAL_TIM_PWM_Start+0xa2>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d104      	bne.n	8002c5e <HAL_TIM_PWM_Start+0x8a>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	223f      	movs	r2, #63	; 0x3f
 8002c58:	2102      	movs	r1, #2
 8002c5a:	5499      	strb	r1, [r3, r2]
 8002c5c:	e00b      	b.n	8002c76 <HAL_TIM_PWM_Start+0xa2>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b08      	cmp	r3, #8
 8002c62:	d104      	bne.n	8002c6e <HAL_TIM_PWM_Start+0x9a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2240      	movs	r2, #64	; 0x40
 8002c68:	2102      	movs	r1, #2
 8002c6a:	5499      	strb	r1, [r3, r2]
 8002c6c:	e003      	b.n	8002c76 <HAL_TIM_PWM_Start+0xa2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2241      	movs	r2, #65	; 0x41
 8002c72:	2102      	movs	r1, #2
 8002c74:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6839      	ldr	r1, [r7, #0]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	0018      	movs	r0, r3
 8002c80:	f000 fd00 	bl	8003684 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a26      	ldr	r2, [pc, #152]	; (8002d24 <HAL_TIM_PWM_Start+0x150>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00e      	beq.n	8002cac <HAL_TIM_PWM_Start+0xd8>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a25      	ldr	r2, [pc, #148]	; (8002d28 <HAL_TIM_PWM_Start+0x154>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d009      	beq.n	8002cac <HAL_TIM_PWM_Start+0xd8>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a23      	ldr	r2, [pc, #140]	; (8002d2c <HAL_TIM_PWM_Start+0x158>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d004      	beq.n	8002cac <HAL_TIM_PWM_Start+0xd8>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a22      	ldr	r2, [pc, #136]	; (8002d30 <HAL_TIM_PWM_Start+0x15c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d101      	bne.n	8002cb0 <HAL_TIM_PWM_Start+0xdc>
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <HAL_TIM_PWM_Start+0xde>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2180      	movs	r1, #128	; 0x80
 8002cc2:	0209      	lsls	r1, r1, #8
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a15      	ldr	r2, [pc, #84]	; (8002d24 <HAL_TIM_PWM_Start+0x150>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d009      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0x112>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a17      	ldr	r2, [pc, #92]	; (8002d34 <HAL_TIM_PWM_Start+0x160>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d004      	beq.n	8002ce6 <HAL_TIM_PWM_Start+0x112>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a11      	ldr	r2, [pc, #68]	; (8002d28 <HAL_TIM_PWM_Start+0x154>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d111      	bne.n	8002d0a <HAL_TIM_PWM_Start+0x136>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2207      	movs	r2, #7
 8002cee:	4013      	ands	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b06      	cmp	r3, #6
 8002cf6:	d010      	beq.n	8002d1a <HAL_TIM_PWM_Start+0x146>
    {
      __HAL_TIM_ENABLE(htim);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2101      	movs	r1, #1
 8002d04:	430a      	orrs	r2, r1
 8002d06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d08:	e007      	b.n	8002d1a <HAL_TIM_PWM_Start+0x146>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2101      	movs	r1, #1
 8002d16:	430a      	orrs	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b004      	add	sp, #16
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40012c00 	.word	0x40012c00
 8002d28:	40014000 	.word	0x40014000
 8002d2c:	40014400 	.word	0x40014400
 8002d30:	40014800 	.word	0x40014800
 8002d34:	40000400 	.word	0x40000400

08002d38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d44:	2317      	movs	r3, #23
 8002d46:	18fb      	adds	r3, r7, r3
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	223c      	movs	r2, #60	; 0x3c
 8002d50:	5c9b      	ldrb	r3, [r3, r2]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e0ad      	b.n	8002eb6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	223c      	movs	r2, #60	; 0x3c
 8002d5e:	2101      	movs	r1, #1
 8002d60:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b0c      	cmp	r3, #12
 8002d66:	d100      	bne.n	8002d6a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002d68:	e076      	b.n	8002e58 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b0c      	cmp	r3, #12
 8002d6e:	d900      	bls.n	8002d72 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002d70:	e095      	b.n	8002e9e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d04e      	beq.n	8002e16 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b08      	cmp	r3, #8
 8002d7c:	d900      	bls.n	8002d80 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002d7e:	e08e      	b.n	8002e9e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d021      	beq.n	8002dd0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002d8c:	e087      	b.n	8002e9e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	0011      	movs	r1, r2
 8002d96:	0018      	movs	r0, r3
 8002d98:	f000 f9de 	bl	8003158 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	699a      	ldr	r2, [r3, #24]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2108      	movs	r1, #8
 8002da8:	430a      	orrs	r2, r1
 8002daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2104      	movs	r1, #4
 8002db8:	438a      	bics	r2, r1
 8002dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6999      	ldr	r1, [r3, #24]
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	691a      	ldr	r2, [r3, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	619a      	str	r2, [r3, #24]
      break;
 8002dce:	e06b      	b.n	8002ea8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	0011      	movs	r1, r2
 8002dd8:	0018      	movs	r0, r3
 8002dda:	f000 fa45 	bl	8003268 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699a      	ldr	r2, [r3, #24]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2180      	movs	r1, #128	; 0x80
 8002dea:	0109      	lsls	r1, r1, #4
 8002dec:	430a      	orrs	r2, r1
 8002dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4931      	ldr	r1, [pc, #196]	; (8002ec0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002dfc:	400a      	ands	r2, r1
 8002dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6999      	ldr	r1, [r3, #24]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	021a      	lsls	r2, r3, #8
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	619a      	str	r2, [r3, #24]
      break;
 8002e14:	e048      	b.n	8002ea8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	0011      	movs	r1, r2
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f000 faa6 	bl	8003370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2108      	movs	r1, #8
 8002e30:	430a      	orrs	r2, r1
 8002e32:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	69da      	ldr	r2, [r3, #28]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2104      	movs	r1, #4
 8002e40:	438a      	bics	r2, r1
 8002e42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	69d9      	ldr	r1, [r3, #28]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	61da      	str	r2, [r3, #28]
      break;
 8002e56:	e027      	b.n	8002ea8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	0011      	movs	r1, r2
 8002e60:	0018      	movs	r0, r3
 8002e62:	f000 fb0b 	bl	800347c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69da      	ldr	r2, [r3, #28]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2180      	movs	r1, #128	; 0x80
 8002e72:	0109      	lsls	r1, r1, #4
 8002e74:	430a      	orrs	r2, r1
 8002e76:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	69da      	ldr	r2, [r3, #28]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	490f      	ldr	r1, [pc, #60]	; (8002ec0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002e84:	400a      	ands	r2, r1
 8002e86:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	69d9      	ldr	r1, [r3, #28]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	021a      	lsls	r2, r3, #8
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	61da      	str	r2, [r3, #28]
      break;
 8002e9c:	e004      	b.n	8002ea8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002e9e:	2317      	movs	r3, #23
 8002ea0:	18fb      	adds	r3, r7, r3
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
      break;
 8002ea6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	223c      	movs	r2, #60	; 0x3c
 8002eac:	2100      	movs	r1, #0
 8002eae:	5499      	strb	r1, [r3, r2]

  return status;
 8002eb0:	2317      	movs	r3, #23
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	781b      	ldrb	r3, [r3, #0]
}
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b006      	add	sp, #24
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	fffffbff 	.word	0xfffffbff

08002ec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ece:	230f      	movs	r3, #15
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	223c      	movs	r2, #60	; 0x3c
 8002eda:	5c9b      	ldrb	r3, [r3, r2]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_TIM_ConfigClockSource+0x20>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e0bc      	b.n	800305e <HAL_TIM_ConfigClockSource+0x19a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	223c      	movs	r2, #60	; 0x3c
 8002ee8:	2101      	movs	r1, #1
 8002eea:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	223d      	movs	r2, #61	; 0x3d
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2277      	movs	r2, #119	; 0x77
 8002f00:	4393      	bics	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	4a58      	ldr	r2, [pc, #352]	; (8003068 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2280      	movs	r2, #128	; 0x80
 8002f1a:	0192      	lsls	r2, r2, #6
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d040      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0xde>
 8002f20:	2280      	movs	r2, #128	; 0x80
 8002f22:	0192      	lsls	r2, r2, #6
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d900      	bls.n	8002f2a <HAL_TIM_ConfigClockSource+0x66>
 8002f28:	e088      	b.n	800303c <HAL_TIM_ConfigClockSource+0x178>
 8002f2a:	2280      	movs	r2, #128	; 0x80
 8002f2c:	0152      	lsls	r2, r2, #5
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d100      	bne.n	8002f34 <HAL_TIM_ConfigClockSource+0x70>
 8002f32:	e088      	b.n	8003046 <HAL_TIM_ConfigClockSource+0x182>
 8002f34:	2280      	movs	r2, #128	; 0x80
 8002f36:	0152      	lsls	r2, r2, #5
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d900      	bls.n	8002f3e <HAL_TIM_ConfigClockSource+0x7a>
 8002f3c:	e07e      	b.n	800303c <HAL_TIM_ConfigClockSource+0x178>
 8002f3e:	2b70      	cmp	r3, #112	; 0x70
 8002f40:	d018      	beq.n	8002f74 <HAL_TIM_ConfigClockSource+0xb0>
 8002f42:	d900      	bls.n	8002f46 <HAL_TIM_ConfigClockSource+0x82>
 8002f44:	e07a      	b.n	800303c <HAL_TIM_ConfigClockSource+0x178>
 8002f46:	2b60      	cmp	r3, #96	; 0x60
 8002f48:	d04f      	beq.n	8002fea <HAL_TIM_ConfigClockSource+0x126>
 8002f4a:	d900      	bls.n	8002f4e <HAL_TIM_ConfigClockSource+0x8a>
 8002f4c:	e076      	b.n	800303c <HAL_TIM_ConfigClockSource+0x178>
 8002f4e:	2b50      	cmp	r3, #80	; 0x50
 8002f50:	d03b      	beq.n	8002fca <HAL_TIM_ConfigClockSource+0x106>
 8002f52:	d900      	bls.n	8002f56 <HAL_TIM_ConfigClockSource+0x92>
 8002f54:	e072      	b.n	800303c <HAL_TIM_ConfigClockSource+0x178>
 8002f56:	2b40      	cmp	r3, #64	; 0x40
 8002f58:	d057      	beq.n	800300a <HAL_TIM_ConfigClockSource+0x146>
 8002f5a:	d900      	bls.n	8002f5e <HAL_TIM_ConfigClockSource+0x9a>
 8002f5c:	e06e      	b.n	800303c <HAL_TIM_ConfigClockSource+0x178>
 8002f5e:	2b30      	cmp	r3, #48	; 0x30
 8002f60:	d063      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x166>
 8002f62:	d86b      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x178>
 8002f64:	2b20      	cmp	r3, #32
 8002f66:	d060      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x166>
 8002f68:	d868      	bhi.n	800303c <HAL_TIM_ConfigClockSource+0x178>
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d05d      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x166>
 8002f6e:	2b10      	cmp	r3, #16
 8002f70:	d05b      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x166>
 8002f72:	e063      	b.n	800303c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f84:	f000 fb5e 	bl	8003644 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2277      	movs	r2, #119	; 0x77
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	609a      	str	r2, [r3, #8]
      break;
 8002fa0:	e052      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fb2:	f000 fb47 	bl	8003644 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2180      	movs	r1, #128	; 0x80
 8002fc2:	01c9      	lsls	r1, r1, #7
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	609a      	str	r2, [r3, #8]
      break;
 8002fc8:	e03e      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd6:	001a      	movs	r2, r3
 8002fd8:	f000 faba 	bl	8003550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2150      	movs	r1, #80	; 0x50
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f000 fb14 	bl	8003610 <TIM_ITRx_SetConfig>
      break;
 8002fe8:	e02e      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ff6:	001a      	movs	r2, r3
 8002ff8:	f000 fad8 	bl	80035ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2160      	movs	r1, #96	; 0x60
 8003002:	0018      	movs	r0, r3
 8003004:	f000 fb04 	bl	8003610 <TIM_ITRx_SetConfig>
      break;
 8003008:	e01e      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003016:	001a      	movs	r2, r3
 8003018:	f000 fa9a 	bl	8003550 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2140      	movs	r1, #64	; 0x40
 8003022:	0018      	movs	r0, r3
 8003024:	f000 faf4 	bl	8003610 <TIM_ITRx_SetConfig>
      break;
 8003028:	e00e      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	0019      	movs	r1, r3
 8003034:	0010      	movs	r0, r2
 8003036:	f000 faeb 	bl	8003610 <TIM_ITRx_SetConfig>
      break;
 800303a:	e005      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800303c:	230f      	movs	r3, #15
 800303e:	18fb      	adds	r3, r7, r3
 8003040:	2201      	movs	r2, #1
 8003042:	701a      	strb	r2, [r3, #0]
      break;
 8003044:	e000      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003046:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	223d      	movs	r2, #61	; 0x3d
 800304c:	2101      	movs	r1, #1
 800304e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	223c      	movs	r2, #60	; 0x3c
 8003054:	2100      	movs	r1, #0
 8003056:	5499      	strb	r1, [r3, r2]

  return status;
 8003058:	230f      	movs	r3, #15
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	781b      	ldrb	r3, [r3, #0]
}
 800305e:	0018      	movs	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	b004      	add	sp, #16
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	ffff00ff 	.word	0xffff00ff

0800306c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a2f      	ldr	r2, [pc, #188]	; (800313c <TIM_Base_SetConfig+0xd0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d003      	beq.n	800308c <TIM_Base_SetConfig+0x20>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a2e      	ldr	r2, [pc, #184]	; (8003140 <TIM_Base_SetConfig+0xd4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d108      	bne.n	800309e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2270      	movs	r2, #112	; 0x70
 8003090:	4393      	bics	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a26      	ldr	r2, [pc, #152]	; (800313c <TIM_Base_SetConfig+0xd0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d013      	beq.n	80030ce <TIM_Base_SetConfig+0x62>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a25      	ldr	r2, [pc, #148]	; (8003140 <TIM_Base_SetConfig+0xd4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00f      	beq.n	80030ce <TIM_Base_SetConfig+0x62>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a24      	ldr	r2, [pc, #144]	; (8003144 <TIM_Base_SetConfig+0xd8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00b      	beq.n	80030ce <TIM_Base_SetConfig+0x62>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a23      	ldr	r2, [pc, #140]	; (8003148 <TIM_Base_SetConfig+0xdc>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <TIM_Base_SetConfig+0x62>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a22      	ldr	r2, [pc, #136]	; (800314c <TIM_Base_SetConfig+0xe0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d003      	beq.n	80030ce <TIM_Base_SetConfig+0x62>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a21      	ldr	r2, [pc, #132]	; (8003150 <TIM_Base_SetConfig+0xe4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d108      	bne.n	80030e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4a20      	ldr	r2, [pc, #128]	; (8003154 <TIM_Base_SetConfig+0xe8>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2280      	movs	r2, #128	; 0x80
 80030e4:	4393      	bics	r3, r2
 80030e6:	001a      	movs	r2, r3
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a0c      	ldr	r2, [pc, #48]	; (800313c <TIM_Base_SetConfig+0xd0>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00b      	beq.n	8003126 <TIM_Base_SetConfig+0xba>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a0d      	ldr	r2, [pc, #52]	; (8003148 <TIM_Base_SetConfig+0xdc>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d007      	beq.n	8003126 <TIM_Base_SetConfig+0xba>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a0c      	ldr	r2, [pc, #48]	; (800314c <TIM_Base_SetConfig+0xe0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d003      	beq.n	8003126 <TIM_Base_SetConfig+0xba>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a0b      	ldr	r2, [pc, #44]	; (8003150 <TIM_Base_SetConfig+0xe4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d103      	bne.n	800312e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	691a      	ldr	r2, [r3, #16]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	615a      	str	r2, [r3, #20]
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b004      	add	sp, #16
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40012c00 	.word	0x40012c00
 8003140:	40000400 	.word	0x40000400
 8003144:	40002000 	.word	0x40002000
 8003148:	40014000 	.word	0x40014000
 800314c:	40014400 	.word	0x40014400
 8003150:	40014800 	.word	0x40014800
 8003154:	fffffcff 	.word	0xfffffcff

08003158 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	2201      	movs	r2, #1
 8003168:	4393      	bics	r3, r2
 800316a:	001a      	movs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2270      	movs	r2, #112	; 0x70
 8003186:	4393      	bics	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2203      	movs	r2, #3
 800318e:	4393      	bics	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4313      	orrs	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2202      	movs	r2, #2
 80031a0:	4393      	bics	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a27      	ldr	r2, [pc, #156]	; (8003250 <TIM_OC1_SetConfig+0xf8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00b      	beq.n	80031ce <TIM_OC1_SetConfig+0x76>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a26      	ldr	r2, [pc, #152]	; (8003254 <TIM_OC1_SetConfig+0xfc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d007      	beq.n	80031ce <TIM_OC1_SetConfig+0x76>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a25      	ldr	r2, [pc, #148]	; (8003258 <TIM_OC1_SetConfig+0x100>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d003      	beq.n	80031ce <TIM_OC1_SetConfig+0x76>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a24      	ldr	r2, [pc, #144]	; (800325c <TIM_OC1_SetConfig+0x104>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d10c      	bne.n	80031e8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2208      	movs	r2, #8
 80031d2:	4393      	bics	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2204      	movs	r2, #4
 80031e4:	4393      	bics	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a19      	ldr	r2, [pc, #100]	; (8003250 <TIM_OC1_SetConfig+0xf8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00b      	beq.n	8003208 <TIM_OC1_SetConfig+0xb0>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a18      	ldr	r2, [pc, #96]	; (8003254 <TIM_OC1_SetConfig+0xfc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d007      	beq.n	8003208 <TIM_OC1_SetConfig+0xb0>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a17      	ldr	r2, [pc, #92]	; (8003258 <TIM_OC1_SetConfig+0x100>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d003      	beq.n	8003208 <TIM_OC1_SetConfig+0xb0>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a16      	ldr	r2, [pc, #88]	; (800325c <TIM_OC1_SetConfig+0x104>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d111      	bne.n	800322c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4a15      	ldr	r2, [pc, #84]	; (8003260 <TIM_OC1_SetConfig+0x108>)
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4a14      	ldr	r2, [pc, #80]	; (8003264 <TIM_OC1_SetConfig+0x10c>)
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	621a      	str	r2, [r3, #32]
}
 8003246:	46c0      	nop			; (mov r8, r8)
 8003248:	46bd      	mov	sp, r7
 800324a:	b006      	add	sp, #24
 800324c:	bd80      	pop	{r7, pc}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	40012c00 	.word	0x40012c00
 8003254:	40014000 	.word	0x40014000
 8003258:	40014400 	.word	0x40014400
 800325c:	40014800 	.word	0x40014800
 8003260:	fffffeff 	.word	0xfffffeff
 8003264:	fffffdff 	.word	0xfffffdff

08003268 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	2210      	movs	r2, #16
 8003278:	4393      	bics	r3, r2
 800327a:	001a      	movs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4a2e      	ldr	r2, [pc, #184]	; (8003350 <TIM_OC2_SetConfig+0xe8>)
 8003296:	4013      	ands	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4a2d      	ldr	r2, [pc, #180]	; (8003354 <TIM_OC2_SetConfig+0xec>)
 800329e:	4013      	ands	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2220      	movs	r2, #32
 80032b2:	4393      	bics	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a24      	ldr	r2, [pc, #144]	; (8003358 <TIM_OC2_SetConfig+0xf0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d10d      	bne.n	80032e6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2280      	movs	r2, #128	; 0x80
 80032ce:	4393      	bics	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2240      	movs	r2, #64	; 0x40
 80032e2:	4393      	bics	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a1b      	ldr	r2, [pc, #108]	; (8003358 <TIM_OC2_SetConfig+0xf0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00b      	beq.n	8003306 <TIM_OC2_SetConfig+0x9e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a1a      	ldr	r2, [pc, #104]	; (800335c <TIM_OC2_SetConfig+0xf4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d007      	beq.n	8003306 <TIM_OC2_SetConfig+0x9e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a19      	ldr	r2, [pc, #100]	; (8003360 <TIM_OC2_SetConfig+0xf8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d003      	beq.n	8003306 <TIM_OC2_SetConfig+0x9e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a18      	ldr	r2, [pc, #96]	; (8003364 <TIM_OC2_SetConfig+0xfc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d113      	bne.n	800332e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4a17      	ldr	r2, [pc, #92]	; (8003368 <TIM_OC2_SetConfig+0x100>)
 800330a:	4013      	ands	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4a16      	ldr	r2, [pc, #88]	; (800336c <TIM_OC2_SetConfig+0x104>)
 8003312:	4013      	ands	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4313      	orrs	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	621a      	str	r2, [r3, #32]
}
 8003348:	46c0      	nop			; (mov r8, r8)
 800334a:	46bd      	mov	sp, r7
 800334c:	b006      	add	sp, #24
 800334e:	bd80      	pop	{r7, pc}
 8003350:	ffff8fff 	.word	0xffff8fff
 8003354:	fffffcff 	.word	0xfffffcff
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40014000 	.word	0x40014000
 8003360:	40014400 	.word	0x40014400
 8003364:	40014800 	.word	0x40014800
 8003368:	fffffbff 	.word	0xfffffbff
 800336c:	fffff7ff 	.word	0xfffff7ff

08003370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	4a35      	ldr	r2, [pc, #212]	; (8003454 <TIM_OC3_SetConfig+0xe4>)
 8003380:	401a      	ands	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2270      	movs	r2, #112	; 0x70
 800339c:	4393      	bics	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2203      	movs	r2, #3
 80033a4:	4393      	bics	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	4a28      	ldr	r2, [pc, #160]	; (8003458 <TIM_OC3_SetConfig+0xe8>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a24      	ldr	r2, [pc, #144]	; (800345c <TIM_OC3_SetConfig+0xec>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d10d      	bne.n	80033ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	4a23      	ldr	r2, [pc, #140]	; (8003460 <TIM_OC3_SetConfig+0xf0>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	021b      	lsls	r3, r3, #8
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	4a1f      	ldr	r2, [pc, #124]	; (8003464 <TIM_OC3_SetConfig+0xf4>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a1b      	ldr	r2, [pc, #108]	; (800345c <TIM_OC3_SetConfig+0xec>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00b      	beq.n	800340a <TIM_OC3_SetConfig+0x9a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <TIM_OC3_SetConfig+0xf8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d007      	beq.n	800340a <TIM_OC3_SetConfig+0x9a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a1b      	ldr	r2, [pc, #108]	; (800346c <TIM_OC3_SetConfig+0xfc>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d003      	beq.n	800340a <TIM_OC3_SetConfig+0x9a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a1a      	ldr	r2, [pc, #104]	; (8003470 <TIM_OC3_SetConfig+0x100>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d113      	bne.n	8003432 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4a19      	ldr	r2, [pc, #100]	; (8003474 <TIM_OC3_SetConfig+0x104>)
 800340e:	4013      	ands	r3, r2
 8003410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4a18      	ldr	r2, [pc, #96]	; (8003478 <TIM_OC3_SetConfig+0x108>)
 8003416:	4013      	ands	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	621a      	str	r2, [r3, #32]
}
 800344c:	46c0      	nop			; (mov r8, r8)
 800344e:	46bd      	mov	sp, r7
 8003450:	b006      	add	sp, #24
 8003452:	bd80      	pop	{r7, pc}
 8003454:	fffffeff 	.word	0xfffffeff
 8003458:	fffffdff 	.word	0xfffffdff
 800345c:	40012c00 	.word	0x40012c00
 8003460:	fffff7ff 	.word	0xfffff7ff
 8003464:	fffffbff 	.word	0xfffffbff
 8003468:	40014000 	.word	0x40014000
 800346c:	40014400 	.word	0x40014400
 8003470:	40014800 	.word	0x40014800
 8003474:	ffffefff 	.word	0xffffefff
 8003478:	ffffdfff 	.word	0xffffdfff

0800347c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	4a28      	ldr	r2, [pc, #160]	; (800352c <TIM_OC4_SetConfig+0xb0>)
 800348c:	401a      	ands	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4a22      	ldr	r2, [pc, #136]	; (8003530 <TIM_OC4_SetConfig+0xb4>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4a21      	ldr	r2, [pc, #132]	; (8003534 <TIM_OC4_SetConfig+0xb8>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <TIM_OC4_SetConfig+0xbc>)
 80034c4:	4013      	ands	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	031b      	lsls	r3, r3, #12
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a19      	ldr	r2, [pc, #100]	; (800353c <TIM_OC4_SetConfig+0xc0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00b      	beq.n	80034f4 <TIM_OC4_SetConfig+0x78>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a18      	ldr	r2, [pc, #96]	; (8003540 <TIM_OC4_SetConfig+0xc4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d007      	beq.n	80034f4 <TIM_OC4_SetConfig+0x78>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a17      	ldr	r2, [pc, #92]	; (8003544 <TIM_OC4_SetConfig+0xc8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d003      	beq.n	80034f4 <TIM_OC4_SetConfig+0x78>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a16      	ldr	r2, [pc, #88]	; (8003548 <TIM_OC4_SetConfig+0xcc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d109      	bne.n	8003508 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	4a15      	ldr	r2, [pc, #84]	; (800354c <TIM_OC4_SetConfig+0xd0>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	695b      	ldr	r3, [r3, #20]
 8003500:	019b      	lsls	r3, r3, #6
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	621a      	str	r2, [r3, #32]
}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	b006      	add	sp, #24
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	ffffefff 	.word	0xffffefff
 8003530:	ffff8fff 	.word	0xffff8fff
 8003534:	fffffcff 	.word	0xfffffcff
 8003538:	ffffdfff 	.word	0xffffdfff
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40014000 	.word	0x40014000
 8003544:	40014400 	.word	0x40014400
 8003548:	40014800 	.word	0x40014800
 800354c:	ffffbfff 	.word	0xffffbfff

08003550 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	2201      	movs	r2, #1
 8003568:	4393      	bics	r3, r2
 800356a:	001a      	movs	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	22f0      	movs	r2, #240	; 0xf0
 800357a:	4393      	bics	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	220a      	movs	r2, #10
 800358c:	4393      	bics	r3, r2
 800358e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	621a      	str	r2, [r3, #32]
}
 80035a4:	46c0      	nop			; (mov r8, r8)
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b006      	add	sp, #24
 80035aa:	bd80      	pop	{r7, pc}

080035ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	2210      	movs	r2, #16
 80035be:	4393      	bics	r3, r2
 80035c0:	001a      	movs	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	4a0d      	ldr	r2, [pc, #52]	; (800360c <TIM_TI2_ConfigInputStage+0x60>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	031b      	lsls	r3, r3, #12
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	22a0      	movs	r2, #160	; 0xa0
 80035e8:	4393      	bics	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	621a      	str	r2, [r3, #32]
}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	46bd      	mov	sp, r7
 8003606:	b006      	add	sp, #24
 8003608:	bd80      	pop	{r7, pc}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	ffff0fff 	.word	0xffff0fff

08003610 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2270      	movs	r2, #112	; 0x70
 8003624:	4393      	bics	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	2207      	movs	r2, #7
 8003630:	4313      	orrs	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	609a      	str	r2, [r3, #8]
}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	46bd      	mov	sp, r7
 800363e:	b004      	add	sp, #16
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	4a09      	ldr	r2, [pc, #36]	; (8003680 <TIM_ETR_SetConfig+0x3c>)
 800365c:	4013      	ands	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	021a      	lsls	r2, r3, #8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	431a      	orrs	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4313      	orrs	r3, r2
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	609a      	str	r2, [r3, #8]
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b006      	add	sp, #24
 800367e:	bd80      	pop	{r7, pc}
 8003680:	ffff00ff 	.word	0xffff00ff

08003684 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	221f      	movs	r2, #31
 8003694:	4013      	ands	r3, r2
 8003696:	2201      	movs	r2, #1
 8003698:	409a      	lsls	r2, r3
 800369a:	0013      	movs	r3, r2
 800369c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	43d2      	mvns	r2, r2
 80036a6:	401a      	ands	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a1a      	ldr	r2, [r3, #32]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	211f      	movs	r1, #31
 80036b4:	400b      	ands	r3, r1
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4099      	lsls	r1, r3
 80036ba:	000b      	movs	r3, r1
 80036bc:	431a      	orrs	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	621a      	str	r2, [r3, #32]
}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	46bd      	mov	sp, r7
 80036c6:	b006      	add	sp, #24
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	223c      	movs	r2, #60	; 0x3c
 80036da:	5c9b      	ldrb	r3, [r3, r2]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e041      	b.n	8003768 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	223c      	movs	r2, #60	; 0x3c
 80036e8:	2101      	movs	r1, #1
 80036ea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	223d      	movs	r2, #61	; 0x3d
 80036f0:	2102      	movs	r1, #2
 80036f2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2270      	movs	r2, #112	; 0x70
 8003708:	4393      	bics	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a13      	ldr	r2, [pc, #76]	; (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d009      	beq.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a11      	ldr	r2, [pc, #68]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d004      	beq.n	800373c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a10      	ldr	r2, [pc, #64]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d10c      	bne.n	8003756 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2280      	movs	r2, #128	; 0x80
 8003740:	4393      	bics	r3, r2
 8003742:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	4313      	orrs	r3, r2
 800374c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	223d      	movs	r2, #61	; 0x3d
 800375a:	2101      	movs	r1, #1
 800375c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	223c      	movs	r2, #60	; 0x3c
 8003762:	2100      	movs	r1, #0
 8003764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	0018      	movs	r0, r3
 800376a:	46bd      	mov	sp, r7
 800376c:	b004      	add	sp, #16
 800376e:	bd80      	pop	{r7, pc}
 8003770:	40012c00 	.word	0x40012c00
 8003774:	40000400 	.word	0x40000400
 8003778:	40014000 	.word	0x40014000

0800377c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e044      	b.n	8003818 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003792:	2b00      	cmp	r3, #0
 8003794:	d107      	bne.n	80037a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2278      	movs	r2, #120	; 0x78
 800379a:	2100      	movs	r1, #0
 800379c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	0018      	movs	r0, r3
 80037a2:	f7fd fa5b 	bl	8000c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2224      	movs	r2, #36	; 0x24
 80037aa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2101      	movs	r1, #1
 80037b8:	438a      	bics	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	0018      	movs	r0, r3
 80037c0:	f000 fc78 	bl	80040b4 <UART_SetConfig>
 80037c4:	0003      	movs	r3, r0
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e024      	b.n	8003818 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	0018      	movs	r0, r3
 80037da:	f000 fdab 	bl	8004334 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	490d      	ldr	r1, [pc, #52]	; (8003820 <HAL_UART_Init+0xa4>)
 80037ea:	400a      	ands	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2108      	movs	r1, #8
 80037fa:	438a      	bics	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2101      	movs	r1, #1
 800380a:	430a      	orrs	r2, r1
 800380c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	0018      	movs	r0, r3
 8003812:	f000 fe43 	bl	800449c <UART_CheckIdleState>
 8003816:	0003      	movs	r3, r0
}
 8003818:	0018      	movs	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	b002      	add	sp, #8
 800381e:	bd80      	pop	{r7, pc}
 8003820:	fffff7ff 	.word	0xfffff7ff

08003824 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	; 0x28
 8003828:	af02      	add	r7, sp, #8
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	1dbb      	adds	r3, r7, #6
 8003832:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003838:	2b20      	cmp	r3, #32
 800383a:	d000      	beq.n	800383e <HAL_UART_Transmit+0x1a>
 800383c:	e08d      	b.n	800395a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_UART_Transmit+0x28>
 8003844:	1dbb      	adds	r3, r7, #6
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e085      	b.n	800395c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	015b      	lsls	r3, r3, #5
 8003858:	429a      	cmp	r2, r3
 800385a:	d109      	bne.n	8003870 <HAL_UART_Transmit+0x4c>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d105      	bne.n	8003870 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	2201      	movs	r2, #1
 8003868:	4013      	ands	r3, r2
 800386a:	d001      	beq.n	8003870 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e075      	b.n	800395c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2284      	movs	r2, #132	; 0x84
 8003874:	2100      	movs	r1, #0
 8003876:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2221      	movs	r2, #33	; 0x21
 800387c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800387e:	f7fd fbab 	bl	8000fd8 <HAL_GetTick>
 8003882:	0003      	movs	r3, r0
 8003884:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1dba      	adds	r2, r7, #6
 800388a:	2150      	movs	r1, #80	; 0x50
 800388c:	8812      	ldrh	r2, [r2, #0]
 800388e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1dba      	adds	r2, r7, #6
 8003894:	2152      	movs	r1, #82	; 0x52
 8003896:	8812      	ldrh	r2, [r2, #0]
 8003898:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	2380      	movs	r3, #128	; 0x80
 80038a0:	015b      	lsls	r3, r3, #5
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d108      	bne.n	80038b8 <HAL_UART_Transmit+0x94>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d104      	bne.n	80038b8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	e003      	b.n	80038c0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038bc:	2300      	movs	r3, #0
 80038be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038c0:	e030      	b.n	8003924 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	0013      	movs	r3, r2
 80038cc:	2200      	movs	r2, #0
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	f000 fe8c 	bl	80045ec <UART_WaitOnFlagUntilTimeout>
 80038d4:	1e03      	subs	r3, r0, #0
 80038d6:	d004      	beq.n	80038e2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2220      	movs	r2, #32
 80038dc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e03c      	b.n	800395c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10b      	bne.n	8003900 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	881a      	ldrh	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	05d2      	lsls	r2, r2, #23
 80038f2:	0dd2      	lsrs	r2, r2, #23
 80038f4:	b292      	uxth	r2, r2
 80038f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	3302      	adds	r3, #2
 80038fc:	61bb      	str	r3, [r7, #24]
 80038fe:	e008      	b.n	8003912 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	781a      	ldrb	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	b292      	uxth	r2, r2
 800390a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	3301      	adds	r3, #1
 8003910:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2252      	movs	r2, #82	; 0x52
 8003916:	5a9b      	ldrh	r3, [r3, r2]
 8003918:	b29b      	uxth	r3, r3
 800391a:	3b01      	subs	r3, #1
 800391c:	b299      	uxth	r1, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2252      	movs	r2, #82	; 0x52
 8003922:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2252      	movs	r2, #82	; 0x52
 8003928:	5a9b      	ldrh	r3, [r3, r2]
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1c8      	bne.n	80038c2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	0013      	movs	r3, r2
 800393a:	2200      	movs	r2, #0
 800393c:	2140      	movs	r1, #64	; 0x40
 800393e:	f000 fe55 	bl	80045ec <UART_WaitOnFlagUntilTimeout>
 8003942:	1e03      	subs	r3, r0, #0
 8003944:	d004      	beq.n	8003950 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e005      	b.n	800395c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	e000      	b.n	800395c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
  }
}
 800395c:	0018      	movs	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	b008      	add	sp, #32
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	1dbb      	adds	r3, r7, #6
 8003970:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003976:	2b20      	cmp	r3, #32
 8003978:	d15b      	bne.n	8003a32 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_UART_Transmit_IT+0x24>
 8003980:	1dbb      	adds	r3, r7, #6
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e053      	b.n	8003a34 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	015b      	lsls	r3, r3, #5
 8003994:	429a      	cmp	r2, r3
 8003996:	d109      	bne.n	80039ac <HAL_UART_Transmit_IT+0x48>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2201      	movs	r2, #1
 80039a4:	4013      	ands	r3, r2
 80039a6:	d001      	beq.n	80039ac <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e043      	b.n	8003a34 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	1dba      	adds	r2, r7, #6
 80039b6:	2150      	movs	r1, #80	; 0x50
 80039b8:	8812      	ldrh	r2, [r2, #0]
 80039ba:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	1dba      	adds	r2, r7, #6
 80039c0:	2152      	movs	r1, #82	; 0x52
 80039c2:	8812      	ldrh	r2, [r2, #0]
 80039c4:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2284      	movs	r2, #132	; 0x84
 80039d0:	2100      	movs	r1, #0
 80039d2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2221      	movs	r2, #33	; 0x21
 80039d8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	2380      	movs	r3, #128	; 0x80
 80039e0:	015b      	lsls	r3, r3, #5
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d107      	bne.n	80039f6 <HAL_UART_Transmit_IT+0x92>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d103      	bne.n	80039f6 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4a12      	ldr	r2, [pc, #72]	; (8003a3c <HAL_UART_Transmit_IT+0xd8>)
 80039f2:	66da      	str	r2, [r3, #108]	; 0x6c
 80039f4:	e002      	b.n	80039fc <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4a11      	ldr	r2, [pc, #68]	; (8003a40 <HAL_UART_Transmit_IT+0xdc>)
 80039fa:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003a00:	613b      	str	r3, [r7, #16]
  return(result);
 8003a02:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	2301      	movs	r3, #1
 8003a08:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f383 8810 	msr	PRIMASK, r3
}
 8003a10:	46c0      	nop			; (mov r8, r8)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2180      	movs	r1, #128	; 0x80
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	f383 8810 	msr	PRIMASK, r3
}
 8003a2c:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e000      	b.n	8003a34 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
  }
}
 8003a34:	0018      	movs	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b008      	add	sp, #32
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	080049d7 	.word	0x080049d7
 8003a40:	08004923 	.word	0x08004923

08003a44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	1dbb      	adds	r3, r7, #6
 8003a50:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2280      	movs	r2, #128	; 0x80
 8003a56:	589b      	ldr	r3, [r3, r2]
 8003a58:	2b20      	cmp	r3, #32
 8003a5a:	d145      	bne.n	8003ae8 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_UART_Receive_IT+0x26>
 8003a62:	1dbb      	adds	r3, r7, #6
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e03d      	b.n	8003aea <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	2380      	movs	r3, #128	; 0x80
 8003a74:	015b      	lsls	r3, r3, #5
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d109      	bne.n	8003a8e <HAL_UART_Receive_IT+0x4a>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d105      	bne.n	8003a8e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2201      	movs	r2, #1
 8003a86:	4013      	ands	r3, r2
 8003a88:	d001      	beq.n	8003a8e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e02d      	b.n	8003aea <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	2380      	movs	r3, #128	; 0x80
 8003a9c:	041b      	lsls	r3, r3, #16
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d019      	beq.n	8003ad6 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa6:	613b      	str	r3, [r7, #16]
  return(result);
 8003aa8:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003aaa:	61fb      	str	r3, [r7, #28]
 8003aac:	2301      	movs	r3, #1
 8003aae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f383 8810 	msr	PRIMASK, r3
}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2180      	movs	r1, #128	; 0x80
 8003ac4:	04c9      	lsls	r1, r1, #19
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	f383 8810 	msr	PRIMASK, r3
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ad6:	1dbb      	adds	r3, r7, #6
 8003ad8:	881a      	ldrh	r2, [r3, #0]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f000 fdee 	bl	80046c0 <UART_Start_Receive_IT>
 8003ae4:	0003      	movs	r3, r0
 8003ae6:	e000      	b.n	8003aea <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003ae8:	2302      	movs	r3, #2
  }
}
 8003aea:	0018      	movs	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b008      	add	sp, #32
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003af4:	b590      	push	{r4, r7, lr}
 8003af6:	b0ab      	sub	sp, #172	; 0xac
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	22a4      	movs	r2, #164	; 0xa4
 8003b04:	18b9      	adds	r1, r7, r2
 8003b06:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	20a0      	movs	r0, #160	; 0xa0
 8003b10:	1839      	adds	r1, r7, r0
 8003b12:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	219c      	movs	r1, #156	; 0x9c
 8003b1c:	1879      	adds	r1, r7, r1
 8003b1e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b20:	0011      	movs	r1, r2
 8003b22:	18bb      	adds	r3, r7, r2
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a99      	ldr	r2, [pc, #612]	; (8003d8c <HAL_UART_IRQHandler+0x298>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2298      	movs	r2, #152	; 0x98
 8003b2c:	18bc      	adds	r4, r7, r2
 8003b2e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003b30:	18bb      	adds	r3, r7, r2
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d114      	bne.n	8003b62 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b38:	187b      	adds	r3, r7, r1
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d00f      	beq.n	8003b62 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b42:	183b      	adds	r3, r7, r0
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2220      	movs	r2, #32
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d00a      	beq.n	8003b62 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d100      	bne.n	8003b56 <HAL_UART_IRQHandler+0x62>
 8003b54:	e286      	b.n	8004064 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	0010      	movs	r0, r2
 8003b5e:	4798      	blx	r3
      }
      return;
 8003b60:	e280      	b.n	8004064 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b62:	2398      	movs	r3, #152	; 0x98
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d100      	bne.n	8003b6e <HAL_UART_IRQHandler+0x7a>
 8003b6c:	e114      	b.n	8003d98 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b6e:	239c      	movs	r3, #156	; 0x9c
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2201      	movs	r2, #1
 8003b76:	4013      	ands	r3, r2
 8003b78:	d106      	bne.n	8003b88 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b7a:	23a0      	movs	r3, #160	; 0xa0
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a83      	ldr	r2, [pc, #524]	; (8003d90 <HAL_UART_IRQHandler+0x29c>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	d100      	bne.n	8003b88 <HAL_UART_IRQHandler+0x94>
 8003b86:	e107      	b.n	8003d98 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b88:	23a4      	movs	r3, #164	; 0xa4
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	4013      	ands	r3, r2
 8003b92:	d012      	beq.n	8003bba <HAL_UART_IRQHandler+0xc6>
 8003b94:	23a0      	movs	r3, #160	; 0xa0
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	2380      	movs	r3, #128	; 0x80
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d00b      	beq.n	8003bba <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2284      	movs	r2, #132	; 0x84
 8003bae:	589b      	ldr	r3, [r3, r2]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2184      	movs	r1, #132	; 0x84
 8003bb8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bba:	23a4      	movs	r3, #164	; 0xa4
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d011      	beq.n	8003bea <HAL_UART_IRQHandler+0xf6>
 8003bc6:	239c      	movs	r3, #156	; 0x9c
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d00b      	beq.n	8003bea <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2284      	movs	r2, #132	; 0x84
 8003bde:	589b      	ldr	r3, [r3, r2]
 8003be0:	2204      	movs	r2, #4
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2184      	movs	r1, #132	; 0x84
 8003be8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bea:	23a4      	movs	r3, #164	; 0xa4
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2204      	movs	r2, #4
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d011      	beq.n	8003c1a <HAL_UART_IRQHandler+0x126>
 8003bf6:	239c      	movs	r3, #156	; 0x9c
 8003bf8:	18fb      	adds	r3, r7, r3
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	4013      	ands	r3, r2
 8003c00:	d00b      	beq.n	8003c1a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2204      	movs	r2, #4
 8003c08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2284      	movs	r2, #132	; 0x84
 8003c0e:	589b      	ldr	r3, [r3, r2]
 8003c10:	2202      	movs	r2, #2
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2184      	movs	r1, #132	; 0x84
 8003c18:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c1a:	23a4      	movs	r3, #164	; 0xa4
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2208      	movs	r2, #8
 8003c22:	4013      	ands	r3, r2
 8003c24:	d017      	beq.n	8003c56 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c26:	23a0      	movs	r3, #160	; 0xa0
 8003c28:	18fb      	adds	r3, r7, r3
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d105      	bne.n	8003c3e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c32:	239c      	movs	r3, #156	; 0x9c
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c3c:	d00b      	beq.n	8003c56 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2208      	movs	r2, #8
 8003c44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2284      	movs	r2, #132	; 0x84
 8003c4a:	589b      	ldr	r3, [r3, r2]
 8003c4c:	2208      	movs	r2, #8
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2184      	movs	r1, #132	; 0x84
 8003c54:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c56:	23a4      	movs	r3, #164	; 0xa4
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	2380      	movs	r3, #128	; 0x80
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	4013      	ands	r3, r2
 8003c62:	d013      	beq.n	8003c8c <HAL_UART_IRQHandler+0x198>
 8003c64:	23a0      	movs	r3, #160	; 0xa0
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	04db      	lsls	r3, r3, #19
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d00c      	beq.n	8003c8c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2280      	movs	r2, #128	; 0x80
 8003c78:	0112      	lsls	r2, r2, #4
 8003c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2284      	movs	r2, #132	; 0x84
 8003c80:	589b      	ldr	r3, [r3, r2]
 8003c82:	2220      	movs	r2, #32
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2184      	movs	r1, #132	; 0x84
 8003c8a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2284      	movs	r2, #132	; 0x84
 8003c90:	589b      	ldr	r3, [r3, r2]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d100      	bne.n	8003c98 <HAL_UART_IRQHandler+0x1a4>
 8003c96:	e1e7      	b.n	8004068 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c98:	23a4      	movs	r3, #164	; 0xa4
 8003c9a:	18fb      	adds	r3, r7, r3
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d00e      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ca4:	23a0      	movs	r3, #160	; 0xa0
 8003ca6:	18fb      	adds	r3, r7, r3
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2220      	movs	r2, #32
 8003cac:	4013      	ands	r3, r2
 8003cae:	d008      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	0010      	movs	r0, r2
 8003cc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2284      	movs	r2, #132	; 0x84
 8003cc6:	589b      	ldr	r3, [r3, r2]
 8003cc8:	2194      	movs	r1, #148	; 0x94
 8003cca:	187a      	adds	r2, r7, r1
 8003ccc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	2240      	movs	r2, #64	; 0x40
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b40      	cmp	r3, #64	; 0x40
 8003cda:	d004      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cdc:	187b      	adds	r3, r7, r1
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2228      	movs	r2, #40	; 0x28
 8003ce2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ce4:	d047      	beq.n	8003d76 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f000 fd9f 	bl	800482c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2240      	movs	r2, #64	; 0x40
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b40      	cmp	r3, #64	; 0x40
 8003cfa:	d137      	bne.n	8003d6c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8003d00:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d04:	2090      	movs	r0, #144	; 0x90
 8003d06:	183a      	adds	r2, r7, r0
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d10:	f383 8810 	msr	PRIMASK, r3
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2140      	movs	r1, #64	; 0x40
 8003d22:	438a      	bics	r2, r1
 8003d24:	609a      	str	r2, [r3, #8]
 8003d26:	183b      	adds	r3, r7, r0
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d2e:	f383 8810 	msr	PRIMASK, r3
}
 8003d32:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d012      	beq.n	8003d62 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d40:	4a14      	ldr	r2, [pc, #80]	; (8003d94 <HAL_UART_IRQHandler+0x2a0>)
 8003d42:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f7fd fd43 	bl	80017d4 <HAL_DMA_Abort_IT>
 8003d4e:	1e03      	subs	r3, r0, #0
 8003d50:	d01a      	beq.n	8003d88 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5c:	0018      	movs	r0, r3
 8003d5e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d60:	e012      	b.n	8003d88 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	0018      	movs	r0, r3
 8003d66:	f000 f99d 	bl	80040a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d6a:	e00d      	b.n	8003d88 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f000 f998 	bl	80040a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d74:	e008      	b.n	8003d88 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f000 f993 	bl	80040a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2284      	movs	r2, #132	; 0x84
 8003d82:	2100      	movs	r1, #0
 8003d84:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003d86:	e16f      	b.n	8004068 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d88:	46c0      	nop			; (mov r8, r8)
    return;
 8003d8a:	e16d      	b.n	8004068 <HAL_UART_IRQHandler+0x574>
 8003d8c:	0000080f 	.word	0x0000080f
 8003d90:	04000120 	.word	0x04000120
 8003d94:	080048f5 	.word	0x080048f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d000      	beq.n	8003da2 <HAL_UART_IRQHandler+0x2ae>
 8003da0:	e139      	b.n	8004016 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003da2:	23a4      	movs	r3, #164	; 0xa4
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2210      	movs	r2, #16
 8003daa:	4013      	ands	r3, r2
 8003dac:	d100      	bne.n	8003db0 <HAL_UART_IRQHandler+0x2bc>
 8003dae:	e132      	b.n	8004016 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003db0:	23a0      	movs	r3, #160	; 0xa0
 8003db2:	18fb      	adds	r3, r7, r3
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2210      	movs	r2, #16
 8003db8:	4013      	ands	r3, r2
 8003dba:	d100      	bne.n	8003dbe <HAL_UART_IRQHandler+0x2ca>
 8003dbc:	e12b      	b.n	8004016 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2210      	movs	r2, #16
 8003dc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2240      	movs	r2, #64	; 0x40
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b40      	cmp	r3, #64	; 0x40
 8003dd2:	d000      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x2e2>
 8003dd4:	e09f      	b.n	8003f16 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	217e      	movs	r1, #126	; 0x7e
 8003de0:	187b      	adds	r3, r7, r1
 8003de2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d100      	bne.n	8003dee <HAL_UART_IRQHandler+0x2fa>
 8003dec:	e13e      	b.n	800406c <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2258      	movs	r2, #88	; 0x58
 8003df2:	5a9b      	ldrh	r3, [r3, r2]
 8003df4:	187a      	adds	r2, r7, r1
 8003df6:	8812      	ldrh	r2, [r2, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d300      	bcc.n	8003dfe <HAL_UART_IRQHandler+0x30a>
 8003dfc:	e136      	b.n	800406c <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	187a      	adds	r2, r7, r1
 8003e02:	215a      	movs	r1, #90	; 0x5a
 8003e04:	8812      	ldrh	r2, [r2, #0]
 8003e06:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	d06f      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e12:	f3ef 8310 	mrs	r3, PRIMASK
 8003e16:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e22:	f383 8810 	msr	PRIMASK, r3
}
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4992      	ldr	r1, [pc, #584]	; (800407c <HAL_UART_IRQHandler+0x588>)
 8003e34:	400a      	ands	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e3a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	f383 8810 	msr	PRIMASK, r3
}
 8003e42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e44:	f3ef 8310 	mrs	r3, PRIMASK
 8003e48:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4c:	677b      	str	r3, [r7, #116]	; 0x74
 8003e4e:	2301      	movs	r3, #1
 8003e50:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e54:	f383 8810 	msr	PRIMASK, r3
}
 8003e58:	46c0      	nop			; (mov r8, r8)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2101      	movs	r1, #1
 8003e66:	438a      	bics	r2, r1
 8003e68:	609a      	str	r2, [r3, #8]
 8003e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e6c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e70:	f383 8810 	msr	PRIMASK, r3
}
 8003e74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e76:	f3ef 8310 	mrs	r3, PRIMASK
 8003e7a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003e7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e7e:	673b      	str	r3, [r7, #112]	; 0x70
 8003e80:	2301      	movs	r3, #1
 8003e82:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e86:	f383 8810 	msr	PRIMASK, r3
}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689a      	ldr	r2, [r3, #8]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2140      	movs	r1, #64	; 0x40
 8003e98:	438a      	bics	r2, r1
 8003e9a:	609a      	str	r2, [r3, #8]
 8003e9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e9e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ea2:	f383 8810 	msr	PRIMASK, r3
}
 8003ea6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2280      	movs	r2, #128	; 0x80
 8003eac:	2120      	movs	r1, #32
 8003eae:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eba:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ebe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ec6:	f383 8810 	msr	PRIMASK, r3
}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2110      	movs	r1, #16
 8003ed8:	438a      	bics	r2, r1
 8003eda:	601a      	str	r2, [r3, #0]
 8003edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ede:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ee2:	f383 8810 	msr	PRIMASK, r3
}
 8003ee6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eec:	0018      	movs	r0, r3
 8003eee:	f7fd fc39 	bl	8001764 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2258      	movs	r2, #88	; 0x58
 8003efc:	5a9a      	ldrh	r2, [r3, r2]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	215a      	movs	r1, #90	; 0x5a
 8003f02:	5a5b      	ldrh	r3, [r3, r1]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	0011      	movs	r1, r2
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f7fc f9b8 	bl	8000284 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f14:	e0aa      	b.n	800406c <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2258      	movs	r2, #88	; 0x58
 8003f1a:	5a99      	ldrh	r1, [r3, r2]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	225a      	movs	r2, #90	; 0x5a
 8003f20:	5a9b      	ldrh	r3, [r3, r2]
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	208e      	movs	r0, #142	; 0x8e
 8003f26:	183b      	adds	r3, r7, r0
 8003f28:	1a8a      	subs	r2, r1, r2
 8003f2a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	225a      	movs	r2, #90	; 0x5a
 8003f30:	5a9b      	ldrh	r3, [r3, r2]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d100      	bne.n	8003f3a <HAL_UART_IRQHandler+0x446>
 8003f38:	e09a      	b.n	8004070 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8003f3a:	183b      	adds	r3, r7, r0
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d100      	bne.n	8003f44 <HAL_UART_IRQHandler+0x450>
 8003f42:	e095      	b.n	8004070 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f44:	f3ef 8310 	mrs	r3, PRIMASK
 8003f48:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4c:	2488      	movs	r4, #136	; 0x88
 8003f4e:	193a      	adds	r2, r7, r4
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	2301      	movs	r3, #1
 8003f54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f383 8810 	msr	PRIMASK, r3
}
 8003f5c:	46c0      	nop			; (mov r8, r8)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4945      	ldr	r1, [pc, #276]	; (8004080 <HAL_UART_IRQHandler+0x58c>)
 8003f6a:	400a      	ands	r2, r1
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	193b      	adds	r3, r7, r4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f383 8810 	msr	PRIMASK, r3
}
 8003f7a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f80:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f82:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f84:	2484      	movs	r4, #132	; 0x84
 8003f86:	193a      	adds	r2, r7, r4
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f383 8810 	msr	PRIMASK, r3
}
 8003f94:	46c0      	nop			; (mov r8, r8)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	438a      	bics	r2, r1
 8003fa4:	609a      	str	r2, [r3, #8]
 8003fa6:	193b      	adds	r3, r7, r4
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	f383 8810 	msr	PRIMASK, r3
}
 8003fb2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2280      	movs	r2, #128	; 0x80
 8003fb8:	2120      	movs	r1, #32
 8003fba:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fcc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd0:	2480      	movs	r4, #128	; 0x80
 8003fd2:	193a      	adds	r2, r7, r4
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fdc:	f383 8810 	msr	PRIMASK, r3
}
 8003fe0:	46c0      	nop			; (mov r8, r8)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2110      	movs	r1, #16
 8003fee:	438a      	bics	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	193b      	adds	r3, r7, r4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffa:	f383 8810 	msr	PRIMASK, r3
}
 8003ffe:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004006:	183b      	adds	r3, r7, r0
 8004008:	881a      	ldrh	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	0011      	movs	r1, r2
 800400e:	0018      	movs	r0, r3
 8004010:	f7fc f938 	bl	8000284 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004014:	e02c      	b.n	8004070 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004016:	23a4      	movs	r3, #164	; 0xa4
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2280      	movs	r2, #128	; 0x80
 800401e:	4013      	ands	r3, r2
 8004020:	d00f      	beq.n	8004042 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004022:	23a0      	movs	r3, #160	; 0xa0
 8004024:	18fb      	adds	r3, r7, r3
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2280      	movs	r2, #128	; 0x80
 800402a:	4013      	ands	r3, r2
 800402c:	d009      	beq.n	8004042 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004032:	2b00      	cmp	r3, #0
 8004034:	d01e      	beq.n	8004074 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	0010      	movs	r0, r2
 800403e:	4798      	blx	r3
    }
    return;
 8004040:	e018      	b.n	8004074 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004042:	23a4      	movs	r3, #164	; 0xa4
 8004044:	18fb      	adds	r3, r7, r3
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2240      	movs	r2, #64	; 0x40
 800404a:	4013      	ands	r3, r2
 800404c:	d013      	beq.n	8004076 <HAL_UART_IRQHandler+0x582>
 800404e:	23a0      	movs	r3, #160	; 0xa0
 8004050:	18fb      	adds	r3, r7, r3
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2240      	movs	r2, #64	; 0x40
 8004056:	4013      	ands	r3, r2
 8004058:	d00d      	beq.n	8004076 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	0018      	movs	r0, r3
 800405e:	f000 fd18 	bl	8004a92 <UART_EndTransmit_IT>
    return;
 8004062:	e008      	b.n	8004076 <HAL_UART_IRQHandler+0x582>
      return;
 8004064:	46c0      	nop			; (mov r8, r8)
 8004066:	e006      	b.n	8004076 <HAL_UART_IRQHandler+0x582>
    return;
 8004068:	46c0      	nop			; (mov r8, r8)
 800406a:	e004      	b.n	8004076 <HAL_UART_IRQHandler+0x582>
      return;
 800406c:	46c0      	nop			; (mov r8, r8)
 800406e:	e002      	b.n	8004076 <HAL_UART_IRQHandler+0x582>
      return;
 8004070:	46c0      	nop			; (mov r8, r8)
 8004072:	e000      	b.n	8004076 <HAL_UART_IRQHandler+0x582>
    return;
 8004074:	46c0      	nop			; (mov r8, r8)
  }

}
 8004076:	46bd      	mov	sp, r7
 8004078:	b02b      	add	sp, #172	; 0xac
 800407a:	bd90      	pop	{r4, r7, pc}
 800407c:	fffffeff 	.word	0xfffffeff
 8004080:	fffffedf 	.word	0xfffffedf

08004084 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800408c:	46c0      	nop			; (mov r8, r8)
 800408e:	46bd      	mov	sp, r7
 8004090:	b002      	add	sp, #8
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800409c:	46c0      	nop			; (mov r8, r8)
 800409e:	46bd      	mov	sp, r7
 80040a0:	b002      	add	sp, #8
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80040ac:	46c0      	nop			; (mov r8, r8)
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b002      	add	sp, #8
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040bc:	231e      	movs	r3, #30
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a8d      	ldr	r2, [pc, #564]	; (8004318 <UART_SetConfig+0x264>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	0019      	movs	r1, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	4a88      	ldr	r2, [pc, #544]	; (800431c <UART_SetConfig+0x268>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	0019      	movs	r1, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1b      	ldr	r3, [r3, #32]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4a7f      	ldr	r2, [pc, #508]	; (8004320 <UART_SetConfig+0x26c>)
 8004122:	4013      	ands	r3, r2
 8004124:	0019      	movs	r1, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	430a      	orrs	r2, r1
 800412e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a7b      	ldr	r2, [pc, #492]	; (8004324 <UART_SetConfig+0x270>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d127      	bne.n	800418a <UART_SetConfig+0xd6>
 800413a:	4b7b      	ldr	r3, [pc, #492]	; (8004328 <UART_SetConfig+0x274>)
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	2203      	movs	r2, #3
 8004140:	4013      	ands	r3, r2
 8004142:	2b03      	cmp	r3, #3
 8004144:	d00d      	beq.n	8004162 <UART_SetConfig+0xae>
 8004146:	d81b      	bhi.n	8004180 <UART_SetConfig+0xcc>
 8004148:	2b02      	cmp	r3, #2
 800414a:	d014      	beq.n	8004176 <UART_SetConfig+0xc2>
 800414c:	d818      	bhi.n	8004180 <UART_SetConfig+0xcc>
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <UART_SetConfig+0xa4>
 8004152:	2b01      	cmp	r3, #1
 8004154:	d00a      	beq.n	800416c <UART_SetConfig+0xb8>
 8004156:	e013      	b.n	8004180 <UART_SetConfig+0xcc>
 8004158:	231f      	movs	r3, #31
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	2200      	movs	r2, #0
 800415e:	701a      	strb	r2, [r3, #0]
 8004160:	e021      	b.n	80041a6 <UART_SetConfig+0xf2>
 8004162:	231f      	movs	r3, #31
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	2202      	movs	r2, #2
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	e01c      	b.n	80041a6 <UART_SetConfig+0xf2>
 800416c:	231f      	movs	r3, #31
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	2204      	movs	r2, #4
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e017      	b.n	80041a6 <UART_SetConfig+0xf2>
 8004176:	231f      	movs	r3, #31
 8004178:	18fb      	adds	r3, r7, r3
 800417a:	2208      	movs	r2, #8
 800417c:	701a      	strb	r2, [r3, #0]
 800417e:	e012      	b.n	80041a6 <UART_SetConfig+0xf2>
 8004180:	231f      	movs	r3, #31
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	2210      	movs	r2, #16
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	e00d      	b.n	80041a6 <UART_SetConfig+0xf2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a67      	ldr	r2, [pc, #412]	; (800432c <UART_SetConfig+0x278>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d104      	bne.n	800419e <UART_SetConfig+0xea>
 8004194:	231f      	movs	r3, #31
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]
 800419c:	e003      	b.n	80041a6 <UART_SetConfig+0xf2>
 800419e:	231f      	movs	r3, #31
 80041a0:	18fb      	adds	r3, r7, r3
 80041a2:	2210      	movs	r2, #16
 80041a4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69da      	ldr	r2, [r3, #28]
 80041aa:	2380      	movs	r3, #128	; 0x80
 80041ac:	021b      	lsls	r3, r3, #8
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d15c      	bne.n	800426c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80041b2:	231f      	movs	r3, #31
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d015      	beq.n	80041e8 <UART_SetConfig+0x134>
 80041bc:	dc18      	bgt.n	80041f0 <UART_SetConfig+0x13c>
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d00d      	beq.n	80041de <UART_SetConfig+0x12a>
 80041c2:	dc15      	bgt.n	80041f0 <UART_SetConfig+0x13c>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <UART_SetConfig+0x11a>
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d005      	beq.n	80041d8 <UART_SetConfig+0x124>
 80041cc:	e010      	b.n	80041f0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041ce:	f7fe fa49 	bl	8002664 <HAL_RCC_GetPCLK1Freq>
 80041d2:	0003      	movs	r3, r0
 80041d4:	61bb      	str	r3, [r7, #24]
        break;
 80041d6:	e012      	b.n	80041fe <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041d8:	4b55      	ldr	r3, [pc, #340]	; (8004330 <UART_SetConfig+0x27c>)
 80041da:	61bb      	str	r3, [r7, #24]
        break;
 80041dc:	e00f      	b.n	80041fe <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041de:	f7fe f9e1 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 80041e2:	0003      	movs	r3, r0
 80041e4:	61bb      	str	r3, [r7, #24]
        break;
 80041e6:	e00a      	b.n	80041fe <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	021b      	lsls	r3, r3, #8
 80041ec:	61bb      	str	r3, [r7, #24]
        break;
 80041ee:	e006      	b.n	80041fe <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041f4:	231e      	movs	r3, #30
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	2201      	movs	r2, #1
 80041fa:	701a      	strb	r2, [r3, #0]
        break;
 80041fc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d100      	bne.n	8004206 <UART_SetConfig+0x152>
 8004204:	e07a      	b.n	80042fc <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004206:	69bb      	ldr	r3, [r7, #24]
 8004208:	005a      	lsls	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	085b      	lsrs	r3, r3, #1
 8004210:	18d2      	adds	r2, r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	0019      	movs	r1, r3
 8004218:	0010      	movs	r0, r2
 800421a:	f7fb ff87 	bl	800012c <__udivsi3>
 800421e:	0003      	movs	r3, r0
 8004220:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2b0f      	cmp	r3, #15
 8004226:	d91c      	bls.n	8004262 <UART_SetConfig+0x1ae>
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	2380      	movs	r3, #128	; 0x80
 800422c:	025b      	lsls	r3, r3, #9
 800422e:	429a      	cmp	r2, r3
 8004230:	d217      	bcs.n	8004262 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	b29a      	uxth	r2, r3
 8004236:	200e      	movs	r0, #14
 8004238:	183b      	adds	r3, r7, r0
 800423a:	210f      	movs	r1, #15
 800423c:	438a      	bics	r2, r1
 800423e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	b29b      	uxth	r3, r3
 8004246:	2207      	movs	r2, #7
 8004248:	4013      	ands	r3, r2
 800424a:	b299      	uxth	r1, r3
 800424c:	183b      	adds	r3, r7, r0
 800424e:	183a      	adds	r2, r7, r0
 8004250:	8812      	ldrh	r2, [r2, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	183a      	adds	r2, r7, r0
 800425c:	8812      	ldrh	r2, [r2, #0]
 800425e:	60da      	str	r2, [r3, #12]
 8004260:	e04c      	b.n	80042fc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004262:	231e      	movs	r3, #30
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	2201      	movs	r2, #1
 8004268:	701a      	strb	r2, [r3, #0]
 800426a:	e047      	b.n	80042fc <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800426c:	231f      	movs	r3, #31
 800426e:	18fb      	adds	r3, r7, r3
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b08      	cmp	r3, #8
 8004274:	d015      	beq.n	80042a2 <UART_SetConfig+0x1ee>
 8004276:	dc18      	bgt.n	80042aa <UART_SetConfig+0x1f6>
 8004278:	2b04      	cmp	r3, #4
 800427a:	d00d      	beq.n	8004298 <UART_SetConfig+0x1e4>
 800427c:	dc15      	bgt.n	80042aa <UART_SetConfig+0x1f6>
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <UART_SetConfig+0x1d4>
 8004282:	2b02      	cmp	r3, #2
 8004284:	d005      	beq.n	8004292 <UART_SetConfig+0x1de>
 8004286:	e010      	b.n	80042aa <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004288:	f7fe f9ec 	bl	8002664 <HAL_RCC_GetPCLK1Freq>
 800428c:	0003      	movs	r3, r0
 800428e:	61bb      	str	r3, [r7, #24]
        break;
 8004290:	e012      	b.n	80042b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004292:	4b27      	ldr	r3, [pc, #156]	; (8004330 <UART_SetConfig+0x27c>)
 8004294:	61bb      	str	r3, [r7, #24]
        break;
 8004296:	e00f      	b.n	80042b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004298:	f7fe f984 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 800429c:	0003      	movs	r3, r0
 800429e:	61bb      	str	r3, [r7, #24]
        break;
 80042a0:	e00a      	b.n	80042b8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042a2:	2380      	movs	r3, #128	; 0x80
 80042a4:	021b      	lsls	r3, r3, #8
 80042a6:	61bb      	str	r3, [r7, #24]
        break;
 80042a8:	e006      	b.n	80042b8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042ae:	231e      	movs	r3, #30
 80042b0:	18fb      	adds	r3, r7, r3
 80042b2:	2201      	movs	r2, #1
 80042b4:	701a      	strb	r2, [r3, #0]
        break;
 80042b6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01e      	beq.n	80042fc <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	085a      	lsrs	r2, r3, #1
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	18d2      	adds	r2, r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	0019      	movs	r1, r3
 80042ce:	0010      	movs	r0, r2
 80042d0:	f7fb ff2c 	bl	800012c <__udivsi3>
 80042d4:	0003      	movs	r3, r0
 80042d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	2b0f      	cmp	r3, #15
 80042dc:	d90a      	bls.n	80042f4 <UART_SetConfig+0x240>
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	2380      	movs	r3, #128	; 0x80
 80042e2:	025b      	lsls	r3, r3, #9
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d205      	bcs.n	80042f4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60da      	str	r2, [r3, #12]
 80042f2:	e003      	b.n	80042fc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80042f4:	231e      	movs	r3, #30
 80042f6:	18fb      	adds	r3, r7, r3
 80042f8:	2201      	movs	r2, #1
 80042fa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004308:	231e      	movs	r3, #30
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	781b      	ldrb	r3, [r3, #0]
}
 800430e:	0018      	movs	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	b008      	add	sp, #32
 8004314:	bd80      	pop	{r7, pc}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	ffff69f3 	.word	0xffff69f3
 800431c:	ffffcfff 	.word	0xffffcfff
 8004320:	fffff4ff 	.word	0xfffff4ff
 8004324:	40013800 	.word	0x40013800
 8004328:	40021000 	.word	0x40021000
 800432c:	40004400 	.word	0x40004400
 8004330:	007a1200 	.word	0x007a1200

08004334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	2201      	movs	r2, #1
 8004342:	4013      	ands	r3, r2
 8004344:	d00b      	beq.n	800435e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	4a4a      	ldr	r2, [pc, #296]	; (8004478 <UART_AdvFeatureConfig+0x144>)
 800434e:	4013      	ands	r3, r2
 8004350:	0019      	movs	r1, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	430a      	orrs	r2, r1
 800435c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	2202      	movs	r2, #2
 8004364:	4013      	ands	r3, r2
 8004366:	d00b      	beq.n	8004380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4a43      	ldr	r2, [pc, #268]	; (800447c <UART_AdvFeatureConfig+0x148>)
 8004370:	4013      	ands	r3, r2
 8004372:	0019      	movs	r1, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	430a      	orrs	r2, r1
 800437e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	2204      	movs	r2, #4
 8004386:	4013      	ands	r3, r2
 8004388:	d00b      	beq.n	80043a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	4a3b      	ldr	r2, [pc, #236]	; (8004480 <UART_AdvFeatureConfig+0x14c>)
 8004392:	4013      	ands	r3, r2
 8004394:	0019      	movs	r1, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	2208      	movs	r2, #8
 80043a8:	4013      	ands	r3, r2
 80043aa:	d00b      	beq.n	80043c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	4a34      	ldr	r2, [pc, #208]	; (8004484 <UART_AdvFeatureConfig+0x150>)
 80043b4:	4013      	ands	r3, r2
 80043b6:	0019      	movs	r1, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	2210      	movs	r2, #16
 80043ca:	4013      	ands	r3, r2
 80043cc:	d00b      	beq.n	80043e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	4a2c      	ldr	r2, [pc, #176]	; (8004488 <UART_AdvFeatureConfig+0x154>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	0019      	movs	r1, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ea:	2220      	movs	r2, #32
 80043ec:	4013      	ands	r3, r2
 80043ee:	d00b      	beq.n	8004408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	4a25      	ldr	r2, [pc, #148]	; (800448c <UART_AdvFeatureConfig+0x158>)
 80043f8:	4013      	ands	r3, r2
 80043fa:	0019      	movs	r1, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	2240      	movs	r2, #64	; 0x40
 800440e:	4013      	ands	r3, r2
 8004410:	d01d      	beq.n	800444e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	4a1d      	ldr	r2, [pc, #116]	; (8004490 <UART_AdvFeatureConfig+0x15c>)
 800441a:	4013      	ands	r3, r2
 800441c:	0019      	movs	r1, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	430a      	orrs	r2, r1
 8004428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	035b      	lsls	r3, r3, #13
 8004432:	429a      	cmp	r2, r3
 8004434:	d10b      	bne.n	800444e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4a15      	ldr	r2, [pc, #84]	; (8004494 <UART_AdvFeatureConfig+0x160>)
 800443e:	4013      	ands	r3, r2
 8004440:	0019      	movs	r1, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	2280      	movs	r2, #128	; 0x80
 8004454:	4013      	ands	r3, r2
 8004456:	d00b      	beq.n	8004470 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	4a0e      	ldr	r2, [pc, #56]	; (8004498 <UART_AdvFeatureConfig+0x164>)
 8004460:	4013      	ands	r3, r2
 8004462:	0019      	movs	r1, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	605a      	str	r2, [r3, #4]
  }
}
 8004470:	46c0      	nop			; (mov r8, r8)
 8004472:	46bd      	mov	sp, r7
 8004474:	b002      	add	sp, #8
 8004476:	bd80      	pop	{r7, pc}
 8004478:	fffdffff 	.word	0xfffdffff
 800447c:	fffeffff 	.word	0xfffeffff
 8004480:	fffbffff 	.word	0xfffbffff
 8004484:	ffff7fff 	.word	0xffff7fff
 8004488:	ffffefff 	.word	0xffffefff
 800448c:	ffffdfff 	.word	0xffffdfff
 8004490:	ffefffff 	.word	0xffefffff
 8004494:	ff9fffff 	.word	0xff9fffff
 8004498:	fff7ffff 	.word	0xfff7ffff

0800449c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b092      	sub	sp, #72	; 0x48
 80044a0:	af02      	add	r7, sp, #8
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2284      	movs	r2, #132	; 0x84
 80044a8:	2100      	movs	r1, #0
 80044aa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044ac:	f7fc fd94 	bl	8000fd8 <HAL_GetTick>
 80044b0:	0003      	movs	r3, r0
 80044b2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2208      	movs	r2, #8
 80044bc:	4013      	ands	r3, r2
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d12c      	bne.n	800451c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c4:	2280      	movs	r2, #128	; 0x80
 80044c6:	0391      	lsls	r1, r2, #14
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	4a46      	ldr	r2, [pc, #280]	; (80045e4 <UART_CheckIdleState+0x148>)
 80044cc:	9200      	str	r2, [sp, #0]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f000 f88c 	bl	80045ec <UART_WaitOnFlagUntilTimeout>
 80044d4:	1e03      	subs	r3, r0, #0
 80044d6:	d021      	beq.n	800451c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d8:	f3ef 8310 	mrs	r3, PRIMASK
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80044e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80044e2:	2301      	movs	r3, #1
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	f383 8810 	msr	PRIMASK, r3
}
 80044ec:	46c0      	nop			; (mov r8, r8)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2180      	movs	r1, #128	; 0x80
 80044fa:	438a      	bics	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004504:	f383 8810 	msr	PRIMASK, r3
}
 8004508:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2278      	movs	r2, #120	; 0x78
 8004514:	2100      	movs	r1, #0
 8004516:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e05f      	b.n	80045dc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2204      	movs	r2, #4
 8004524:	4013      	ands	r3, r2
 8004526:	2b04      	cmp	r3, #4
 8004528:	d146      	bne.n	80045b8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800452a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800452c:	2280      	movs	r2, #128	; 0x80
 800452e:	03d1      	lsls	r1, r2, #15
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	4a2c      	ldr	r2, [pc, #176]	; (80045e4 <UART_CheckIdleState+0x148>)
 8004534:	9200      	str	r2, [sp, #0]
 8004536:	2200      	movs	r2, #0
 8004538:	f000 f858 	bl	80045ec <UART_WaitOnFlagUntilTimeout>
 800453c:	1e03      	subs	r3, r0, #0
 800453e:	d03b      	beq.n	80045b8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004540:	f3ef 8310 	mrs	r3, PRIMASK
 8004544:	60fb      	str	r3, [r7, #12]
  return(result);
 8004546:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004548:	637b      	str	r3, [r7, #52]	; 0x34
 800454a:	2301      	movs	r3, #1
 800454c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f383 8810 	msr	PRIMASK, r3
}
 8004554:	46c0      	nop			; (mov r8, r8)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4921      	ldr	r1, [pc, #132]	; (80045e8 <UART_CheckIdleState+0x14c>)
 8004562:	400a      	ands	r2, r1
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004568:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f383 8810 	msr	PRIMASK, r3
}
 8004570:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004572:	f3ef 8310 	mrs	r3, PRIMASK
 8004576:	61bb      	str	r3, [r7, #24]
  return(result);
 8004578:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457a:	633b      	str	r3, [r7, #48]	; 0x30
 800457c:	2301      	movs	r3, #1
 800457e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f383 8810 	msr	PRIMASK, r3
}
 8004586:	46c0      	nop			; (mov r8, r8)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2101      	movs	r1, #1
 8004594:	438a      	bics	r2, r1
 8004596:	609a      	str	r2, [r3, #8]
 8004598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	f383 8810 	msr	PRIMASK, r3
}
 80045a2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2280      	movs	r2, #128	; 0x80
 80045a8:	2120      	movs	r1, #32
 80045aa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2278      	movs	r2, #120	; 0x78
 80045b0:	2100      	movs	r1, #0
 80045b2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e011      	b.n	80045dc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2280      	movs	r2, #128	; 0x80
 80045c2:	2120      	movs	r1, #32
 80045c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2278      	movs	r2, #120	; 0x78
 80045d6:	2100      	movs	r1, #0
 80045d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	0018      	movs	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	b010      	add	sp, #64	; 0x40
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	01ffffff 	.word	0x01ffffff
 80045e8:	fffffedf 	.word	0xfffffedf

080045ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	1dfb      	adds	r3, r7, #7
 80045fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045fc:	e04b      	b.n	8004696 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	3301      	adds	r3, #1
 8004602:	d048      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004604:	f7fc fce8 	bl	8000fd8 <HAL_GetTick>
 8004608:	0002      	movs	r2, r0
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	429a      	cmp	r2, r3
 8004612:	d302      	bcc.n	800461a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e04b      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2204      	movs	r2, #4
 8004626:	4013      	ands	r3, r2
 8004628:	d035      	beq.n	8004696 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	2208      	movs	r2, #8
 8004632:	4013      	ands	r3, r2
 8004634:	2b08      	cmp	r3, #8
 8004636:	d111      	bne.n	800465c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2208      	movs	r2, #8
 800463e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	0018      	movs	r0, r3
 8004644:	f000 f8f2 	bl	800482c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2284      	movs	r2, #132	; 0x84
 800464c:	2108      	movs	r1, #8
 800464e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2278      	movs	r2, #120	; 0x78
 8004654:	2100      	movs	r1, #0
 8004656:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e02c      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69da      	ldr	r2, [r3, #28]
 8004662:	2380      	movs	r3, #128	; 0x80
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	401a      	ands	r2, r3
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	429a      	cmp	r2, r3
 800466e:	d112      	bne.n	8004696 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2280      	movs	r2, #128	; 0x80
 8004676:	0112      	lsls	r2, r2, #4
 8004678:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	0018      	movs	r0, r3
 800467e:	f000 f8d5 	bl	800482c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2284      	movs	r2, #132	; 0x84
 8004686:	2120      	movs	r1, #32
 8004688:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2278      	movs	r2, #120	; 0x78
 800468e:	2100      	movs	r1, #0
 8004690:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e00f      	b.n	80046b6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	4013      	ands	r3, r2
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	425a      	negs	r2, r3
 80046a6:	4153      	adcs	r3, r2
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	001a      	movs	r2, r3
 80046ac:	1dfb      	adds	r3, r7, #7
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d0a4      	beq.n	80045fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b004      	add	sp, #16
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b090      	sub	sp, #64	; 0x40
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	1dbb      	adds	r3, r7, #6
 80046cc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	68ba      	ldr	r2, [r7, #8]
 80046d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	1dba      	adds	r2, r7, #6
 80046d8:	2158      	movs	r1, #88	; 0x58
 80046da:	8812      	ldrh	r2, [r2, #0]
 80046dc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1dba      	adds	r2, r7, #6
 80046e2:	215a      	movs	r1, #90	; 0x5a
 80046e4:	8812      	ldrh	r2, [r2, #0]
 80046e6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	2380      	movs	r3, #128	; 0x80
 80046f4:	015b      	lsls	r3, r3, #5
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d10d      	bne.n	8004716 <UART_Start_Receive_IT+0x56>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d104      	bne.n	800470c <UART_Start_Receive_IT+0x4c>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	225c      	movs	r2, #92	; 0x5c
 8004706:	4946      	ldr	r1, [pc, #280]	; (8004820 <UART_Start_Receive_IT+0x160>)
 8004708:	5299      	strh	r1, [r3, r2]
 800470a:	e01a      	b.n	8004742 <UART_Start_Receive_IT+0x82>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	225c      	movs	r2, #92	; 0x5c
 8004710:	21ff      	movs	r1, #255	; 0xff
 8004712:	5299      	strh	r1, [r3, r2]
 8004714:	e015      	b.n	8004742 <UART_Start_Receive_IT+0x82>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10d      	bne.n	800473a <UART_Start_Receive_IT+0x7a>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d104      	bne.n	8004730 <UART_Start_Receive_IT+0x70>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	225c      	movs	r2, #92	; 0x5c
 800472a:	21ff      	movs	r1, #255	; 0xff
 800472c:	5299      	strh	r1, [r3, r2]
 800472e:	e008      	b.n	8004742 <UART_Start_Receive_IT+0x82>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	225c      	movs	r2, #92	; 0x5c
 8004734:	217f      	movs	r1, #127	; 0x7f
 8004736:	5299      	strh	r1, [r3, r2]
 8004738:	e003      	b.n	8004742 <UART_Start_Receive_IT+0x82>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	225c      	movs	r2, #92	; 0x5c
 800473e:	2100      	movs	r1, #0
 8004740:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2284      	movs	r2, #132	; 0x84
 8004746:	2100      	movs	r1, #0
 8004748:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2280      	movs	r2, #128	; 0x80
 800474e:	2122      	movs	r1, #34	; 0x22
 8004750:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004752:	f3ef 8310 	mrs	r3, PRIMASK
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800475c:	2301      	movs	r3, #1
 800475e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004762:	f383 8810 	msr	PRIMASK, r3
}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689a      	ldr	r2, [r3, #8]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2101      	movs	r1, #1
 8004774:	430a      	orrs	r2, r1
 8004776:	609a      	str	r2, [r3, #8]
 8004778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800477a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477e:	f383 8810 	msr	PRIMASK, r3
}
 8004782:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	015b      	lsls	r3, r3, #5
 800478c:	429a      	cmp	r2, r3
 800478e:	d107      	bne.n	80047a0 <UART_Start_Receive_IT+0xe0>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d103      	bne.n	80047a0 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a22      	ldr	r2, [pc, #136]	; (8004824 <UART_Start_Receive_IT+0x164>)
 800479c:	669a      	str	r2, [r3, #104]	; 0x68
 800479e:	e002      	b.n	80047a6 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4a21      	ldr	r2, [pc, #132]	; (8004828 <UART_Start_Receive_IT+0x168>)
 80047a4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d019      	beq.n	80047e2 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ae:	f3ef 8310 	mrs	r3, PRIMASK
 80047b2:	61fb      	str	r3, [r7, #28]
  return(result);
 80047b4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80047b6:	637b      	str	r3, [r7, #52]	; 0x34
 80047b8:	2301      	movs	r3, #1
 80047ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	f383 8810 	msr	PRIMASK, r3
}
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2190      	movs	r1, #144	; 0x90
 80047d0:	0049      	lsls	r1, r1, #1
 80047d2:	430a      	orrs	r2, r1
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	f383 8810 	msr	PRIMASK, r3
}
 80047e0:	e018      	b.n	8004814 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e2:	f3ef 8310 	mrs	r3, PRIMASK
 80047e6:	613b      	str	r3, [r7, #16]
  return(result);
 80047e8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80047ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80047ec:	2301      	movs	r3, #1
 80047ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f383 8810 	msr	PRIMASK, r3
}
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2120      	movs	r1, #32
 8004804:	430a      	orrs	r2, r1
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800480a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f383 8810 	msr	PRIMASK, r3
}
 8004812:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	0018      	movs	r0, r3
 8004818:	46bd      	mov	sp, r7
 800481a:	b010      	add	sp, #64	; 0x40
 800481c:	bd80      	pop	{r7, pc}
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	000001ff 	.word	0x000001ff
 8004824:	08004ca1 	.word	0x08004ca1
 8004828:	08004ae9 	.word	0x08004ae9

0800482c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08e      	sub	sp, #56	; 0x38
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004834:	f3ef 8310 	mrs	r3, PRIMASK
 8004838:	617b      	str	r3, [r7, #20]
  return(result);
 800483a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800483c:	637b      	str	r3, [r7, #52]	; 0x34
 800483e:	2301      	movs	r3, #1
 8004840:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	f383 8810 	msr	PRIMASK, r3
}
 8004848:	46c0      	nop			; (mov r8, r8)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4926      	ldr	r1, [pc, #152]	; (80048f0 <UART_EndRxTransfer+0xc4>)
 8004856:	400a      	ands	r2, r1
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	f383 8810 	msr	PRIMASK, r3
}
 8004864:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004866:	f3ef 8310 	mrs	r3, PRIMASK
 800486a:	623b      	str	r3, [r7, #32]
  return(result);
 800486c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486e:	633b      	str	r3, [r7, #48]	; 0x30
 8004870:	2301      	movs	r3, #1
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	f383 8810 	msr	PRIMASK, r3
}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2101      	movs	r1, #1
 8004888:	438a      	bics	r2, r1
 800488a:	609a      	str	r2, [r3, #8]
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004892:	f383 8810 	msr	PRIMASK, r3
}
 8004896:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489c:	2b01      	cmp	r3, #1
 800489e:	d118      	bne.n	80048d2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a0:	f3ef 8310 	mrs	r3, PRIMASK
 80048a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80048a6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048aa:	2301      	movs	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f383 8810 	msr	PRIMASK, r3
}
 80048b4:	46c0      	nop			; (mov r8, r8)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2110      	movs	r1, #16
 80048c2:	438a      	bics	r2, r1
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f383 8810 	msr	PRIMASK, r3
}
 80048d0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2280      	movs	r2, #128	; 0x80
 80048d6:	2120      	movs	r1, #32
 80048d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	46bd      	mov	sp, r7
 80048ea:	b00e      	add	sp, #56	; 0x38
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	fffffedf 	.word	0xfffffedf

080048f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	225a      	movs	r2, #90	; 0x5a
 8004906:	2100      	movs	r1, #0
 8004908:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2252      	movs	r2, #82	; 0x52
 800490e:	2100      	movs	r1, #0
 8004910:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	0018      	movs	r0, r3
 8004916:	f7ff fbc5 	bl	80040a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	46bd      	mov	sp, r7
 800491e:	b004      	add	sp, #16
 8004920:	bd80      	pop	{r7, pc}

08004922 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b08a      	sub	sp, #40	; 0x28
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800492e:	2b21      	cmp	r3, #33	; 0x21
 8004930:	d14d      	bne.n	80049ce <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2252      	movs	r2, #82	; 0x52
 8004936:	5a9b      	ldrh	r3, [r3, r2]
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d132      	bne.n	80049a4 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800493e:	f3ef 8310 	mrs	r3, PRIMASK
 8004942:	60bb      	str	r3, [r7, #8]
  return(result);
 8004944:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004946:	627b      	str	r3, [r7, #36]	; 0x24
 8004948:	2301      	movs	r3, #1
 800494a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f383 8810 	msr	PRIMASK, r3
}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2180      	movs	r1, #128	; 0x80
 8004960:	438a      	bics	r2, r1
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f383 8810 	msr	PRIMASK, r3
}
 800496e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004970:	f3ef 8310 	mrs	r3, PRIMASK
 8004974:	617b      	str	r3, [r7, #20]
  return(result);
 8004976:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004978:	623b      	str	r3, [r7, #32]
 800497a:	2301      	movs	r3, #1
 800497c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	f383 8810 	msr	PRIMASK, r3
}
 8004984:	46c0      	nop			; (mov r8, r8)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2140      	movs	r1, #64	; 0x40
 8004992:	430a      	orrs	r2, r1
 8004994:	601a      	str	r2, [r3, #0]
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	f383 8810 	msr	PRIMASK, r3
}
 80049a0:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80049a2:	e014      	b.n	80049ce <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a8:	781a      	ldrb	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	b292      	uxth	r2, r2
 80049b0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2252      	movs	r2, #82	; 0x52
 80049c0:	5a9b      	ldrh	r3, [r3, r2]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b299      	uxth	r1, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2252      	movs	r2, #82	; 0x52
 80049cc:	5299      	strh	r1, [r3, r2]
}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b00a      	add	sp, #40	; 0x28
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b08c      	sub	sp, #48	; 0x30
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049e2:	2b21      	cmp	r3, #33	; 0x21
 80049e4:	d151      	bne.n	8004a8a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2252      	movs	r2, #82	; 0x52
 80049ea:	5a9b      	ldrh	r3, [r3, r2]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d132      	bne.n	8004a58 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049f2:	f3ef 8310 	mrs	r3, PRIMASK
 80049f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80049f8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80049fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80049fc:	2301      	movs	r3, #1
 80049fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f383 8810 	msr	PRIMASK, r3
}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2180      	movs	r1, #128	; 0x80
 8004a14:	438a      	bics	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f383 8810 	msr	PRIMASK, r3
}
 8004a22:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a24:	f3ef 8310 	mrs	r3, PRIMASK
 8004a28:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a2a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a2e:	2301      	movs	r3, #1
 8004a30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	f383 8810 	msr	PRIMASK, r3
}
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2140      	movs	r1, #64	; 0x40
 8004a46:	430a      	orrs	r2, r1
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	f383 8810 	msr	PRIMASK, r3
}
 8004a54:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004a56:	e018      	b.n	8004a8a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a60:	881a      	ldrh	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	05d2      	lsls	r2, r2, #23
 8004a68:	0dd2      	lsrs	r2, r2, #23
 8004a6a:	b292      	uxth	r2, r2
 8004a6c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a72:	1c9a      	adds	r2, r3, #2
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2252      	movs	r2, #82	; 0x52
 8004a7c:	5a9b      	ldrh	r3, [r3, r2]
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b299      	uxth	r1, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2252      	movs	r2, #82	; 0x52
 8004a88:	5299      	strh	r1, [r3, r2]
}
 8004a8a:	46c0      	nop			; (mov r8, r8)
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	b00c      	add	sp, #48	; 0x30
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b086      	sub	sp, #24
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8004a9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004aa0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f383 8810 	msr	PRIMASK, r3
}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2140      	movs	r1, #64	; 0x40
 8004abc:	438a      	bics	r2, r1
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f383 8810 	msr	PRIMASK, r3
}
 8004aca:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	0018      	movs	r0, r3
 8004adc:	f7ff fad2 	bl	8004084 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ae0:	46c0      	nop			; (mov r8, r8)
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b006      	add	sp, #24
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b094      	sub	sp, #80	; 0x50
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004af0:	204e      	movs	r0, #78	; 0x4e
 8004af2:	183b      	adds	r3, r7, r0
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	215c      	movs	r1, #92	; 0x5c
 8004af8:	5a52      	ldrh	r2, [r2, r1]
 8004afa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2280      	movs	r2, #128	; 0x80
 8004b00:	589b      	ldr	r3, [r3, r2]
 8004b02:	2b22      	cmp	r3, #34	; 0x22
 8004b04:	d000      	beq.n	8004b08 <UART_RxISR_8BIT+0x20>
 8004b06:	e0ba      	b.n	8004c7e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	214c      	movs	r1, #76	; 0x4c
 8004b0e:	187b      	adds	r3, r7, r1
 8004b10:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004b12:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004b14:	187b      	adds	r3, r7, r1
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	183b      	adds	r3, r7, r0
 8004b1c:	881b      	ldrh	r3, [r3, #0]
 8004b1e:	b2d9      	uxtb	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b24:	400a      	ands	r2, r1
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	225a      	movs	r2, #90	; 0x5a
 8004b38:	5a9b      	ldrh	r3, [r3, r2]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b299      	uxth	r1, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	225a      	movs	r2, #90	; 0x5a
 8004b44:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	225a      	movs	r2, #90	; 0x5a
 8004b4a:	5a9b      	ldrh	r3, [r3, r2]
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d000      	beq.n	8004b54 <UART_RxISR_8BIT+0x6c>
 8004b52:	e09c      	b.n	8004c8e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b54:	f3ef 8310 	mrs	r3, PRIMASK
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b5e:	2301      	movs	r3, #1
 8004b60:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b64:	f383 8810 	msr	PRIMASK, r3
}
 8004b68:	46c0      	nop			; (mov r8, r8)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4948      	ldr	r1, [pc, #288]	; (8004c98 <UART_RxISR_8BIT+0x1b0>)
 8004b76:	400a      	ands	r2, r1
 8004b78:	601a      	str	r2, [r3, #0]
 8004b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b80:	f383 8810 	msr	PRIMASK, r3
}
 8004b84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b86:	f3ef 8310 	mrs	r3, PRIMASK
 8004b8a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b90:	2301      	movs	r3, #1
 8004b92:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b96:	f383 8810 	msr	PRIMASK, r3
}
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	438a      	bics	r2, r1
 8004baa:	609a      	str	r2, [r3, #8]
 8004bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	f383 8810 	msr	PRIMASK, r3
}
 8004bb6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	2120      	movs	r1, #32
 8004bbe:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	2380      	movs	r3, #128	; 0x80
 8004bd4:	041b      	lsls	r3, r3, #16
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d018      	beq.n	8004c0c <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bda:	f3ef 8310 	mrs	r3, PRIMASK
 8004bde:	61bb      	str	r3, [r7, #24]
  return(result);
 8004be0:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004be2:	643b      	str	r3, [r7, #64]	; 0x40
 8004be4:	2301      	movs	r3, #1
 8004be6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	f383 8810 	msr	PRIMASK, r3
}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4928      	ldr	r1, [pc, #160]	; (8004c9c <UART_RxISR_8BIT+0x1b4>)
 8004bfc:	400a      	ands	r2, r1
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	f383 8810 	msr	PRIMASK, r3
}
 8004c0a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d12f      	bne.n	8004c74 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c20:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c24:	2301      	movs	r3, #1
 8004c26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f383 8810 	msr	PRIMASK, r3
}
 8004c2e:	46c0      	nop			; (mov r8, r8)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2110      	movs	r1, #16
 8004c3c:	438a      	bics	r2, r1
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f383 8810 	msr	PRIMASK, r3
}
 8004c4a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	2210      	movs	r2, #16
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b10      	cmp	r3, #16
 8004c58:	d103      	bne.n	8004c62 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2210      	movs	r2, #16
 8004c60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2258      	movs	r2, #88	; 0x58
 8004c66:	5a9a      	ldrh	r2, [r3, r2]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	0011      	movs	r1, r2
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f7fb fb09 	bl	8000284 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c72:	e00c      	b.n	8004c8e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	0018      	movs	r0, r3
 8004c78:	f7ff fa0c 	bl	8004094 <HAL_UART_RxCpltCallback>
}
 8004c7c:	e007      	b.n	8004c8e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	699a      	ldr	r2, [r3, #24]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2108      	movs	r1, #8
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	619a      	str	r2, [r3, #24]
}
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	46bd      	mov	sp, r7
 8004c92:	b014      	add	sp, #80	; 0x50
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	fffffedf 	.word	0xfffffedf
 8004c9c:	fbffffff 	.word	0xfbffffff

08004ca0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b094      	sub	sp, #80	; 0x50
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ca8:	204e      	movs	r0, #78	; 0x4e
 8004caa:	183b      	adds	r3, r7, r0
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	215c      	movs	r1, #92	; 0x5c
 8004cb0:	5a52      	ldrh	r2, [r2, r1]
 8004cb2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2280      	movs	r2, #128	; 0x80
 8004cb8:	589b      	ldr	r3, [r3, r2]
 8004cba:	2b22      	cmp	r3, #34	; 0x22
 8004cbc:	d000      	beq.n	8004cc0 <UART_RxISR_16BIT+0x20>
 8004cbe:	e0ba      	b.n	8004e36 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	214c      	movs	r1, #76	; 0x4c
 8004cc6:	187b      	adds	r3, r7, r1
 8004cc8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004cca:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd0:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004cd2:	187b      	adds	r3, r7, r1
 8004cd4:	183a      	adds	r2, r7, r0
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	8812      	ldrh	r2, [r2, #0]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce6:	1c9a      	adds	r2, r3, #2
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	225a      	movs	r2, #90	; 0x5a
 8004cf0:	5a9b      	ldrh	r3, [r3, r2]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b299      	uxth	r1, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	225a      	movs	r2, #90	; 0x5a
 8004cfc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	225a      	movs	r2, #90	; 0x5a
 8004d02:	5a9b      	ldrh	r3, [r3, r2]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d000      	beq.n	8004d0c <UART_RxISR_16BIT+0x6c>
 8004d0a:	e09c      	b.n	8004e46 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8004d10:	623b      	str	r3, [r7, #32]
  return(result);
 8004d12:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d14:	647b      	str	r3, [r7, #68]	; 0x44
 8004d16:	2301      	movs	r3, #1
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	f383 8810 	msr	PRIMASK, r3
}
 8004d20:	46c0      	nop			; (mov r8, r8)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4948      	ldr	r1, [pc, #288]	; (8004e50 <UART_RxISR_16BIT+0x1b0>)
 8004d2e:	400a      	ands	r2, r1
 8004d30:	601a      	str	r2, [r3, #0]
 8004d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d38:	f383 8810 	msr	PRIMASK, r3
}
 8004d3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d46:	643b      	str	r3, [r7, #64]	; 0x40
 8004d48:	2301      	movs	r3, #1
 8004d4a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4e:	f383 8810 	msr	PRIMASK, r3
}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689a      	ldr	r2, [r3, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2101      	movs	r1, #1
 8004d60:	438a      	bics	r2, r1
 8004d62:	609a      	str	r2, [r3, #8]
 8004d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d66:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6a:	f383 8810 	msr	PRIMASK, r3
}
 8004d6e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2280      	movs	r2, #128	; 0x80
 8004d74:	2120      	movs	r1, #32
 8004d76:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	2380      	movs	r3, #128	; 0x80
 8004d8c:	041b      	lsls	r3, r3, #16
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d018      	beq.n	8004dc4 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d92:	f3ef 8310 	mrs	r3, PRIMASK
 8004d96:	617b      	str	r3, [r7, #20]
  return(result);
 8004d98:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	f383 8810 	msr	PRIMASK, r3
}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4928      	ldr	r1, [pc, #160]	; (8004e54 <UART_RxISR_16BIT+0x1b4>)
 8004db4:	400a      	ands	r2, r1
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f383 8810 	msr	PRIMASK, r3
}
 8004dc2:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d12f      	bne.n	8004e2c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dd2:	f3ef 8310 	mrs	r3, PRIMASK
 8004dd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dd8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dda:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ddc:	2301      	movs	r3, #1
 8004dde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f383 8810 	msr	PRIMASK, r3
}
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2110      	movs	r1, #16
 8004df4:	438a      	bics	r2, r1
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f383 8810 	msr	PRIMASK, r3
}
 8004e02:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	2210      	movs	r2, #16
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2b10      	cmp	r3, #16
 8004e10:	d103      	bne.n	8004e1a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2210      	movs	r2, #16
 8004e18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2258      	movs	r2, #88	; 0x58
 8004e1e:	5a9a      	ldrh	r2, [r3, r2]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	0011      	movs	r1, r2
 8004e24:	0018      	movs	r0, r3
 8004e26:	f7fb fa2d 	bl	8000284 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e2a:	e00c      	b.n	8004e46 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f7ff f930 	bl	8004094 <HAL_UART_RxCpltCallback>
}
 8004e34:	e007      	b.n	8004e46 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699a      	ldr	r2, [r3, #24]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2108      	movs	r1, #8
 8004e42:	430a      	orrs	r2, r1
 8004e44:	619a      	str	r2, [r3, #24]
}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b014      	add	sp, #80	; 0x50
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	fffffedf 	.word	0xfffffedf
 8004e54:	fbffffff 	.word	0xfbffffff

08004e58 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e58:	b5b0      	push	{r4, r5, r7, lr}
 8004e5a:	b08a      	sub	sp, #40	; 0x28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	1dbb      	adds	r3, r7, #6
 8004e64:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2280      	movs	r2, #128	; 0x80
 8004e6a:	589b      	ldr	r3, [r3, r2]
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d156      	bne.n	8004f1e <HAL_UARTEx_ReceiveToIdle_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8004e76:	1dbb      	adds	r3, r7, #6
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e04e      	b.n	8004f20 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	2380      	movs	r3, #128	; 0x80
 8004e88:	015b      	lsls	r3, r3, #5
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d109      	bne.n	8004ea2 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d001      	beq.n	8004ea2 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
      {
        return  HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e03e      	b.n	8004f20 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004eae:	2527      	movs	r5, #39	; 0x27
 8004eb0:	197c      	adds	r4, r7, r5
 8004eb2:	1dbb      	adds	r3, r7, #6
 8004eb4:	881a      	ldrh	r2, [r3, #0]
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	0018      	movs	r0, r3
 8004ebc:	f7ff fc00 	bl	80046c0 <UART_Start_Receive_IT>
 8004ec0:	0003      	movs	r3, r0
 8004ec2:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004ec4:	197b      	adds	r3, r7, r5
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d124      	bne.n	8004f16 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d11c      	bne.n	8004f0e <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2210      	movs	r2, #16
 8004eda:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004edc:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee0:	617b      	str	r3, [r7, #20]
  return(result);
 8004ee2:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee4:	623b      	str	r3, [r7, #32]
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	f383 8810 	msr	PRIMASK, r3
}
 8004ef0:	46c0      	nop			; (mov r8, r8)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2110      	movs	r1, #16
 8004efe:	430a      	orrs	r2, r1
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f383 8810 	msr	PRIMASK, r3
}
 8004f0c:	e003      	b.n	8004f16 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004f0e:	2327      	movs	r3, #39	; 0x27
 8004f10:	18fb      	adds	r3, r7, r3
 8004f12:	2201      	movs	r2, #1
 8004f14:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004f16:	2327      	movs	r3, #39	; 0x27
 8004f18:	18fb      	adds	r3, r7, r3
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	e000      	b.n	8004f20 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004f1e:	2302      	movs	r3, #2
  }
}
 8004f20:	0018      	movs	r0, r3
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b00a      	add	sp, #40	; 0x28
 8004f26:	bdb0      	pop	{r4, r5, r7, pc}

08004f28 <atoi>:
 8004f28:	b510      	push	{r4, lr}
 8004f2a:	220a      	movs	r2, #10
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	f000 f88b 	bl	8005048 <strtol>
 8004f32:	bd10      	pop	{r4, pc}

08004f34 <_strtol_l.constprop.0>:
 8004f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f36:	b087      	sub	sp, #28
 8004f38:	001e      	movs	r6, r3
 8004f3a:	9005      	str	r0, [sp, #20]
 8004f3c:	9101      	str	r1, [sp, #4]
 8004f3e:	9202      	str	r2, [sp, #8]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d048      	beq.n	8004fd6 <_strtol_l.constprop.0+0xa2>
 8004f44:	000b      	movs	r3, r1
 8004f46:	2e24      	cmp	r6, #36	; 0x24
 8004f48:	d845      	bhi.n	8004fd6 <_strtol_l.constprop.0+0xa2>
 8004f4a:	4a3b      	ldr	r2, [pc, #236]	; (8005038 <_strtol_l.constprop.0+0x104>)
 8004f4c:	2108      	movs	r1, #8
 8004f4e:	4694      	mov	ip, r2
 8004f50:	001a      	movs	r2, r3
 8004f52:	4660      	mov	r0, ip
 8004f54:	7814      	ldrb	r4, [r2, #0]
 8004f56:	3301      	adds	r3, #1
 8004f58:	5d00      	ldrb	r0, [r0, r4]
 8004f5a:	001d      	movs	r5, r3
 8004f5c:	0007      	movs	r7, r0
 8004f5e:	400f      	ands	r7, r1
 8004f60:	4208      	tst	r0, r1
 8004f62:	d1f5      	bne.n	8004f50 <_strtol_l.constprop.0+0x1c>
 8004f64:	2c2d      	cmp	r4, #45	; 0x2d
 8004f66:	d13d      	bne.n	8004fe4 <_strtol_l.constprop.0+0xb0>
 8004f68:	2701      	movs	r7, #1
 8004f6a:	781c      	ldrb	r4, [r3, #0]
 8004f6c:	1c95      	adds	r5, r2, #2
 8004f6e:	2e00      	cmp	r6, #0
 8004f70:	d05e      	beq.n	8005030 <_strtol_l.constprop.0+0xfc>
 8004f72:	2e10      	cmp	r6, #16
 8004f74:	d109      	bne.n	8004f8a <_strtol_l.constprop.0+0x56>
 8004f76:	2c30      	cmp	r4, #48	; 0x30
 8004f78:	d107      	bne.n	8004f8a <_strtol_l.constprop.0+0x56>
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	782b      	ldrb	r3, [r5, #0]
 8004f7e:	4393      	bics	r3, r2
 8004f80:	2b58      	cmp	r3, #88	; 0x58
 8004f82:	d150      	bne.n	8005026 <_strtol_l.constprop.0+0xf2>
 8004f84:	2610      	movs	r6, #16
 8004f86:	786c      	ldrb	r4, [r5, #1]
 8004f88:	3502      	adds	r5, #2
 8004f8a:	4b2c      	ldr	r3, [pc, #176]	; (800503c <_strtol_l.constprop.0+0x108>)
 8004f8c:	0031      	movs	r1, r6
 8004f8e:	18fb      	adds	r3, r7, r3
 8004f90:	0018      	movs	r0, r3
 8004f92:	9303      	str	r3, [sp, #12]
 8004f94:	f7fb f950 	bl	8000238 <__aeabi_uidivmod>
 8004f98:	2200      	movs	r2, #0
 8004f9a:	9104      	str	r1, [sp, #16]
 8004f9c:	2101      	movs	r1, #1
 8004f9e:	4684      	mov	ip, r0
 8004fa0:	0010      	movs	r0, r2
 8004fa2:	4249      	negs	r1, r1
 8004fa4:	0023      	movs	r3, r4
 8004fa6:	3b30      	subs	r3, #48	; 0x30
 8004fa8:	2b09      	cmp	r3, #9
 8004faa:	d903      	bls.n	8004fb4 <_strtol_l.constprop.0+0x80>
 8004fac:	3b11      	subs	r3, #17
 8004fae:	2b19      	cmp	r3, #25
 8004fb0:	d81d      	bhi.n	8004fee <_strtol_l.constprop.0+0xba>
 8004fb2:	330a      	adds	r3, #10
 8004fb4:	429e      	cmp	r6, r3
 8004fb6:	dd1e      	ble.n	8004ff6 <_strtol_l.constprop.0+0xc2>
 8004fb8:	1c54      	adds	r4, r2, #1
 8004fba:	d009      	beq.n	8004fd0 <_strtol_l.constprop.0+0x9c>
 8004fbc:	000a      	movs	r2, r1
 8004fbe:	4584      	cmp	ip, r0
 8004fc0:	d306      	bcc.n	8004fd0 <_strtol_l.constprop.0+0x9c>
 8004fc2:	d102      	bne.n	8004fca <_strtol_l.constprop.0+0x96>
 8004fc4:	9c04      	ldr	r4, [sp, #16]
 8004fc6:	429c      	cmp	r4, r3
 8004fc8:	db02      	blt.n	8004fd0 <_strtol_l.constprop.0+0x9c>
 8004fca:	2201      	movs	r2, #1
 8004fcc:	4370      	muls	r0, r6
 8004fce:	1818      	adds	r0, r3, r0
 8004fd0:	782c      	ldrb	r4, [r5, #0]
 8004fd2:	3501      	adds	r5, #1
 8004fd4:	e7e6      	b.n	8004fa4 <_strtol_l.constprop.0+0x70>
 8004fd6:	f000 f895 	bl	8005104 <__errno>
 8004fda:	2316      	movs	r3, #22
 8004fdc:	6003      	str	r3, [r0, #0]
 8004fde:	2000      	movs	r0, #0
 8004fe0:	b007      	add	sp, #28
 8004fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fe4:	2c2b      	cmp	r4, #43	; 0x2b
 8004fe6:	d1c2      	bne.n	8004f6e <_strtol_l.constprop.0+0x3a>
 8004fe8:	781c      	ldrb	r4, [r3, #0]
 8004fea:	1c95      	adds	r5, r2, #2
 8004fec:	e7bf      	b.n	8004f6e <_strtol_l.constprop.0+0x3a>
 8004fee:	0023      	movs	r3, r4
 8004ff0:	3b61      	subs	r3, #97	; 0x61
 8004ff2:	2b19      	cmp	r3, #25
 8004ff4:	d9dd      	bls.n	8004fb2 <_strtol_l.constprop.0+0x7e>
 8004ff6:	1c53      	adds	r3, r2, #1
 8004ff8:	d109      	bne.n	800500e <_strtol_l.constprop.0+0xda>
 8004ffa:	2322      	movs	r3, #34	; 0x22
 8004ffc:	9a05      	ldr	r2, [sp, #20]
 8004ffe:	9803      	ldr	r0, [sp, #12]
 8005000:	6013      	str	r3, [r2, #0]
 8005002:	9b02      	ldr	r3, [sp, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0eb      	beq.n	8004fe0 <_strtol_l.constprop.0+0xac>
 8005008:	1e6b      	subs	r3, r5, #1
 800500a:	9301      	str	r3, [sp, #4]
 800500c:	e007      	b.n	800501e <_strtol_l.constprop.0+0xea>
 800500e:	2f00      	cmp	r7, #0
 8005010:	d000      	beq.n	8005014 <_strtol_l.constprop.0+0xe0>
 8005012:	4240      	negs	r0, r0
 8005014:	9b02      	ldr	r3, [sp, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0e2      	beq.n	8004fe0 <_strtol_l.constprop.0+0xac>
 800501a:	2a00      	cmp	r2, #0
 800501c:	d1f4      	bne.n	8005008 <_strtol_l.constprop.0+0xd4>
 800501e:	9b02      	ldr	r3, [sp, #8]
 8005020:	9a01      	ldr	r2, [sp, #4]
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	e7dc      	b.n	8004fe0 <_strtol_l.constprop.0+0xac>
 8005026:	2430      	movs	r4, #48	; 0x30
 8005028:	2e00      	cmp	r6, #0
 800502a:	d1ae      	bne.n	8004f8a <_strtol_l.constprop.0+0x56>
 800502c:	3608      	adds	r6, #8
 800502e:	e7ac      	b.n	8004f8a <_strtol_l.constprop.0+0x56>
 8005030:	2c30      	cmp	r4, #48	; 0x30
 8005032:	d0a2      	beq.n	8004f7a <_strtol_l.constprop.0+0x46>
 8005034:	260a      	movs	r6, #10
 8005036:	e7a8      	b.n	8004f8a <_strtol_l.constprop.0+0x56>
 8005038:	08006311 	.word	0x08006311
 800503c:	7fffffff 	.word	0x7fffffff

08005040 <_strtol_r>:
 8005040:	b510      	push	{r4, lr}
 8005042:	f7ff ff77 	bl	8004f34 <_strtol_l.constprop.0>
 8005046:	bd10      	pop	{r4, pc}

08005048 <strtol>:
 8005048:	b510      	push	{r4, lr}
 800504a:	4c04      	ldr	r4, [pc, #16]	; (800505c <strtol+0x14>)
 800504c:	0013      	movs	r3, r2
 800504e:	000a      	movs	r2, r1
 8005050:	0001      	movs	r1, r0
 8005052:	6820      	ldr	r0, [r4, #0]
 8005054:	f7ff ff6e 	bl	8004f34 <_strtol_l.constprop.0>
 8005058:	bd10      	pop	{r4, pc}
 800505a:	46c0      	nop			; (mov r8, r8)
 800505c:	2000007c 	.word	0x2000007c

08005060 <siprintf>:
 8005060:	b40e      	push	{r1, r2, r3}
 8005062:	b500      	push	{lr}
 8005064:	490b      	ldr	r1, [pc, #44]	; (8005094 <siprintf+0x34>)
 8005066:	b09c      	sub	sp, #112	; 0x70
 8005068:	ab1d      	add	r3, sp, #116	; 0x74
 800506a:	9002      	str	r0, [sp, #8]
 800506c:	9006      	str	r0, [sp, #24]
 800506e:	9107      	str	r1, [sp, #28]
 8005070:	9104      	str	r1, [sp, #16]
 8005072:	4809      	ldr	r0, [pc, #36]	; (8005098 <siprintf+0x38>)
 8005074:	4909      	ldr	r1, [pc, #36]	; (800509c <siprintf+0x3c>)
 8005076:	cb04      	ldmia	r3!, {r2}
 8005078:	9105      	str	r1, [sp, #20]
 800507a:	6800      	ldr	r0, [r0, #0]
 800507c:	a902      	add	r1, sp, #8
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	f000 f9cc 	bl	800541c <_svfiprintf_r>
 8005084:	2200      	movs	r2, #0
 8005086:	9b02      	ldr	r3, [sp, #8]
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	b01c      	add	sp, #112	; 0x70
 800508c:	bc08      	pop	{r3}
 800508e:	b003      	add	sp, #12
 8005090:	4718      	bx	r3
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	7fffffff 	.word	0x7fffffff
 8005098:	2000007c 	.word	0x2000007c
 800509c:	ffff0208 	.word	0xffff0208

080050a0 <siscanf>:
 80050a0:	b40e      	push	{r1, r2, r3}
 80050a2:	b530      	push	{r4, r5, lr}
 80050a4:	2381      	movs	r3, #129	; 0x81
 80050a6:	b09c      	sub	sp, #112	; 0x70
 80050a8:	466a      	mov	r2, sp
 80050aa:	ac1f      	add	r4, sp, #124	; 0x7c
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	cc20      	ldmia	r4!, {r5}
 80050b0:	8293      	strh	r3, [r2, #20]
 80050b2:	9002      	str	r0, [sp, #8]
 80050b4:	9006      	str	r0, [sp, #24]
 80050b6:	f7fb f827 	bl	8000108 <strlen>
 80050ba:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <siscanf+0x48>)
 80050bc:	466a      	mov	r2, sp
 80050be:	930b      	str	r3, [sp, #44]	; 0x2c
 80050c0:	2300      	movs	r3, #0
 80050c2:	9003      	str	r0, [sp, #12]
 80050c4:	9007      	str	r0, [sp, #28]
 80050c6:	4809      	ldr	r0, [pc, #36]	; (80050ec <siscanf+0x4c>)
 80050c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80050ca:	9314      	str	r3, [sp, #80]	; 0x50
 80050cc:	3b01      	subs	r3, #1
 80050ce:	82d3      	strh	r3, [r2, #22]
 80050d0:	a902      	add	r1, sp, #8
 80050d2:	0023      	movs	r3, r4
 80050d4:	002a      	movs	r2, r5
 80050d6:	6800      	ldr	r0, [r0, #0]
 80050d8:	9401      	str	r4, [sp, #4]
 80050da:	f000 fafb 	bl	80056d4 <__ssvfiscanf_r>
 80050de:	b01c      	add	sp, #112	; 0x70
 80050e0:	bc30      	pop	{r4, r5}
 80050e2:	bc08      	pop	{r3}
 80050e4:	b003      	add	sp, #12
 80050e6:	4718      	bx	r3
 80050e8:	080050f1 	.word	0x080050f1
 80050ec:	2000007c 	.word	0x2000007c

080050f0 <__seofread>:
 80050f0:	2000      	movs	r0, #0
 80050f2:	4770      	bx	lr

080050f4 <memset>:
 80050f4:	0003      	movs	r3, r0
 80050f6:	1882      	adds	r2, r0, r2
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d100      	bne.n	80050fe <memset+0xa>
 80050fc:	4770      	bx	lr
 80050fe:	7019      	strb	r1, [r3, #0]
 8005100:	3301      	adds	r3, #1
 8005102:	e7f9      	b.n	80050f8 <memset+0x4>

08005104 <__errno>:
 8005104:	4b01      	ldr	r3, [pc, #4]	; (800510c <__errno+0x8>)
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	4770      	bx	lr
 800510a:	46c0      	nop			; (mov r8, r8)
 800510c:	2000007c 	.word	0x2000007c

08005110 <__libc_init_array>:
 8005110:	b570      	push	{r4, r5, r6, lr}
 8005112:	2600      	movs	r6, #0
 8005114:	4c0c      	ldr	r4, [pc, #48]	; (8005148 <__libc_init_array+0x38>)
 8005116:	4d0d      	ldr	r5, [pc, #52]	; (800514c <__libc_init_array+0x3c>)
 8005118:	1b64      	subs	r4, r4, r5
 800511a:	10a4      	asrs	r4, r4, #2
 800511c:	42a6      	cmp	r6, r4
 800511e:	d109      	bne.n	8005134 <__libc_init_array+0x24>
 8005120:	2600      	movs	r6, #0
 8005122:	f001 f895 	bl	8006250 <_init>
 8005126:	4c0a      	ldr	r4, [pc, #40]	; (8005150 <__libc_init_array+0x40>)
 8005128:	4d0a      	ldr	r5, [pc, #40]	; (8005154 <__libc_init_array+0x44>)
 800512a:	1b64      	subs	r4, r4, r5
 800512c:	10a4      	asrs	r4, r4, #2
 800512e:	42a6      	cmp	r6, r4
 8005130:	d105      	bne.n	800513e <__libc_init_array+0x2e>
 8005132:	bd70      	pop	{r4, r5, r6, pc}
 8005134:	00b3      	lsls	r3, r6, #2
 8005136:	58eb      	ldr	r3, [r5, r3]
 8005138:	4798      	blx	r3
 800513a:	3601      	adds	r6, #1
 800513c:	e7ee      	b.n	800511c <__libc_init_array+0xc>
 800513e:	00b3      	lsls	r3, r6, #2
 8005140:	58eb      	ldr	r3, [r5, r3]
 8005142:	4798      	blx	r3
 8005144:	3601      	adds	r6, #1
 8005146:	e7f2      	b.n	800512e <__libc_init_array+0x1e>
 8005148:	08006460 	.word	0x08006460
 800514c:	08006460 	.word	0x08006460
 8005150:	08006464 	.word	0x08006464
 8005154:	08006460 	.word	0x08006460

08005158 <__retarget_lock_acquire_recursive>:
 8005158:	4770      	bx	lr

0800515a <__retarget_lock_release_recursive>:
 800515a:	4770      	bx	lr

0800515c <_free_r>:
 800515c:	b570      	push	{r4, r5, r6, lr}
 800515e:	0005      	movs	r5, r0
 8005160:	2900      	cmp	r1, #0
 8005162:	d010      	beq.n	8005186 <_free_r+0x2a>
 8005164:	1f0c      	subs	r4, r1, #4
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	da00      	bge.n	800516e <_free_r+0x12>
 800516c:	18e4      	adds	r4, r4, r3
 800516e:	0028      	movs	r0, r5
 8005170:	f000 f8e2 	bl	8005338 <__malloc_lock>
 8005174:	4a1d      	ldr	r2, [pc, #116]	; (80051ec <_free_r+0x90>)
 8005176:	6813      	ldr	r3, [r2, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d105      	bne.n	8005188 <_free_r+0x2c>
 800517c:	6063      	str	r3, [r4, #4]
 800517e:	6014      	str	r4, [r2, #0]
 8005180:	0028      	movs	r0, r5
 8005182:	f000 f8e1 	bl	8005348 <__malloc_unlock>
 8005186:	bd70      	pop	{r4, r5, r6, pc}
 8005188:	42a3      	cmp	r3, r4
 800518a:	d908      	bls.n	800519e <_free_r+0x42>
 800518c:	6820      	ldr	r0, [r4, #0]
 800518e:	1821      	adds	r1, r4, r0
 8005190:	428b      	cmp	r3, r1
 8005192:	d1f3      	bne.n	800517c <_free_r+0x20>
 8005194:	6819      	ldr	r1, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	1809      	adds	r1, r1, r0
 800519a:	6021      	str	r1, [r4, #0]
 800519c:	e7ee      	b.n	800517c <_free_r+0x20>
 800519e:	001a      	movs	r2, r3
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <_free_r+0x4e>
 80051a6:	42a3      	cmp	r3, r4
 80051a8:	d9f9      	bls.n	800519e <_free_r+0x42>
 80051aa:	6811      	ldr	r1, [r2, #0]
 80051ac:	1850      	adds	r0, r2, r1
 80051ae:	42a0      	cmp	r0, r4
 80051b0:	d10b      	bne.n	80051ca <_free_r+0x6e>
 80051b2:	6820      	ldr	r0, [r4, #0]
 80051b4:	1809      	adds	r1, r1, r0
 80051b6:	1850      	adds	r0, r2, r1
 80051b8:	6011      	str	r1, [r2, #0]
 80051ba:	4283      	cmp	r3, r0
 80051bc:	d1e0      	bne.n	8005180 <_free_r+0x24>
 80051be:	6818      	ldr	r0, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	1841      	adds	r1, r0, r1
 80051c4:	6011      	str	r1, [r2, #0]
 80051c6:	6053      	str	r3, [r2, #4]
 80051c8:	e7da      	b.n	8005180 <_free_r+0x24>
 80051ca:	42a0      	cmp	r0, r4
 80051cc:	d902      	bls.n	80051d4 <_free_r+0x78>
 80051ce:	230c      	movs	r3, #12
 80051d0:	602b      	str	r3, [r5, #0]
 80051d2:	e7d5      	b.n	8005180 <_free_r+0x24>
 80051d4:	6820      	ldr	r0, [r4, #0]
 80051d6:	1821      	adds	r1, r4, r0
 80051d8:	428b      	cmp	r3, r1
 80051da:	d103      	bne.n	80051e4 <_free_r+0x88>
 80051dc:	6819      	ldr	r1, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	1809      	adds	r1, r1, r0
 80051e2:	6021      	str	r1, [r4, #0]
 80051e4:	6063      	str	r3, [r4, #4]
 80051e6:	6054      	str	r4, [r2, #4]
 80051e8:	e7ca      	b.n	8005180 <_free_r+0x24>
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	2000041c 	.word	0x2000041c

080051f0 <sbrk_aligned>:
 80051f0:	b570      	push	{r4, r5, r6, lr}
 80051f2:	4e0f      	ldr	r6, [pc, #60]	; (8005230 <sbrk_aligned+0x40>)
 80051f4:	000d      	movs	r5, r1
 80051f6:	6831      	ldr	r1, [r6, #0]
 80051f8:	0004      	movs	r4, r0
 80051fa:	2900      	cmp	r1, #0
 80051fc:	d102      	bne.n	8005204 <sbrk_aligned+0x14>
 80051fe:	f000 ff43 	bl	8006088 <_sbrk_r>
 8005202:	6030      	str	r0, [r6, #0]
 8005204:	0029      	movs	r1, r5
 8005206:	0020      	movs	r0, r4
 8005208:	f000 ff3e 	bl	8006088 <_sbrk_r>
 800520c:	1c43      	adds	r3, r0, #1
 800520e:	d00a      	beq.n	8005226 <sbrk_aligned+0x36>
 8005210:	2303      	movs	r3, #3
 8005212:	1cc5      	adds	r5, r0, #3
 8005214:	439d      	bics	r5, r3
 8005216:	42a8      	cmp	r0, r5
 8005218:	d007      	beq.n	800522a <sbrk_aligned+0x3a>
 800521a:	1a29      	subs	r1, r5, r0
 800521c:	0020      	movs	r0, r4
 800521e:	f000 ff33 	bl	8006088 <_sbrk_r>
 8005222:	3001      	adds	r0, #1
 8005224:	d101      	bne.n	800522a <sbrk_aligned+0x3a>
 8005226:	2501      	movs	r5, #1
 8005228:	426d      	negs	r5, r5
 800522a:	0028      	movs	r0, r5
 800522c:	bd70      	pop	{r4, r5, r6, pc}
 800522e:	46c0      	nop			; (mov r8, r8)
 8005230:	20000420 	.word	0x20000420

08005234 <_malloc_r>:
 8005234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005236:	2203      	movs	r2, #3
 8005238:	1ccb      	adds	r3, r1, #3
 800523a:	4393      	bics	r3, r2
 800523c:	3308      	adds	r3, #8
 800523e:	0006      	movs	r6, r0
 8005240:	001f      	movs	r7, r3
 8005242:	2b0c      	cmp	r3, #12
 8005244:	d238      	bcs.n	80052b8 <_malloc_r+0x84>
 8005246:	270c      	movs	r7, #12
 8005248:	42b9      	cmp	r1, r7
 800524a:	d837      	bhi.n	80052bc <_malloc_r+0x88>
 800524c:	0030      	movs	r0, r6
 800524e:	f000 f873 	bl	8005338 <__malloc_lock>
 8005252:	4b38      	ldr	r3, [pc, #224]	; (8005334 <_malloc_r+0x100>)
 8005254:	9300      	str	r3, [sp, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	001c      	movs	r4, r3
 800525a:	2c00      	cmp	r4, #0
 800525c:	d133      	bne.n	80052c6 <_malloc_r+0x92>
 800525e:	0039      	movs	r1, r7
 8005260:	0030      	movs	r0, r6
 8005262:	f7ff ffc5 	bl	80051f0 <sbrk_aligned>
 8005266:	0004      	movs	r4, r0
 8005268:	1c43      	adds	r3, r0, #1
 800526a:	d15e      	bne.n	800532a <_malloc_r+0xf6>
 800526c:	9b00      	ldr	r3, [sp, #0]
 800526e:	681c      	ldr	r4, [r3, #0]
 8005270:	0025      	movs	r5, r4
 8005272:	2d00      	cmp	r5, #0
 8005274:	d14e      	bne.n	8005314 <_malloc_r+0xe0>
 8005276:	2c00      	cmp	r4, #0
 8005278:	d051      	beq.n	800531e <_malloc_r+0xea>
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	0029      	movs	r1, r5
 800527e:	18e3      	adds	r3, r4, r3
 8005280:	0030      	movs	r0, r6
 8005282:	9301      	str	r3, [sp, #4]
 8005284:	f000 ff00 	bl	8006088 <_sbrk_r>
 8005288:	9b01      	ldr	r3, [sp, #4]
 800528a:	4283      	cmp	r3, r0
 800528c:	d147      	bne.n	800531e <_malloc_r+0xea>
 800528e:	6823      	ldr	r3, [r4, #0]
 8005290:	0030      	movs	r0, r6
 8005292:	1aff      	subs	r7, r7, r3
 8005294:	0039      	movs	r1, r7
 8005296:	f7ff ffab 	bl	80051f0 <sbrk_aligned>
 800529a:	3001      	adds	r0, #1
 800529c:	d03f      	beq.n	800531e <_malloc_r+0xea>
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	19db      	adds	r3, r3, r7
 80052a2:	6023      	str	r3, [r4, #0]
 80052a4:	9b00      	ldr	r3, [sp, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d040      	beq.n	800532e <_malloc_r+0xfa>
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	42a2      	cmp	r2, r4
 80052b0:	d133      	bne.n	800531a <_malloc_r+0xe6>
 80052b2:	2200      	movs	r2, #0
 80052b4:	605a      	str	r2, [r3, #4]
 80052b6:	e014      	b.n	80052e2 <_malloc_r+0xae>
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	dac5      	bge.n	8005248 <_malloc_r+0x14>
 80052bc:	230c      	movs	r3, #12
 80052be:	2500      	movs	r5, #0
 80052c0:	6033      	str	r3, [r6, #0]
 80052c2:	0028      	movs	r0, r5
 80052c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80052c6:	6821      	ldr	r1, [r4, #0]
 80052c8:	1bc9      	subs	r1, r1, r7
 80052ca:	d420      	bmi.n	800530e <_malloc_r+0xda>
 80052cc:	290b      	cmp	r1, #11
 80052ce:	d918      	bls.n	8005302 <_malloc_r+0xce>
 80052d0:	19e2      	adds	r2, r4, r7
 80052d2:	6027      	str	r7, [r4, #0]
 80052d4:	42a3      	cmp	r3, r4
 80052d6:	d112      	bne.n	80052fe <_malloc_r+0xca>
 80052d8:	9b00      	ldr	r3, [sp, #0]
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	6863      	ldr	r3, [r4, #4]
 80052de:	6011      	str	r1, [r2, #0]
 80052e0:	6053      	str	r3, [r2, #4]
 80052e2:	0030      	movs	r0, r6
 80052e4:	0025      	movs	r5, r4
 80052e6:	f000 f82f 	bl	8005348 <__malloc_unlock>
 80052ea:	2207      	movs	r2, #7
 80052ec:	350b      	adds	r5, #11
 80052ee:	1d23      	adds	r3, r4, #4
 80052f0:	4395      	bics	r5, r2
 80052f2:	1aea      	subs	r2, r5, r3
 80052f4:	429d      	cmp	r5, r3
 80052f6:	d0e4      	beq.n	80052c2 <_malloc_r+0x8e>
 80052f8:	1b5b      	subs	r3, r3, r5
 80052fa:	50a3      	str	r3, [r4, r2]
 80052fc:	e7e1      	b.n	80052c2 <_malloc_r+0x8e>
 80052fe:	605a      	str	r2, [r3, #4]
 8005300:	e7ec      	b.n	80052dc <_malloc_r+0xa8>
 8005302:	6862      	ldr	r2, [r4, #4]
 8005304:	42a3      	cmp	r3, r4
 8005306:	d1d5      	bne.n	80052b4 <_malloc_r+0x80>
 8005308:	9b00      	ldr	r3, [sp, #0]
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	e7e9      	b.n	80052e2 <_malloc_r+0xae>
 800530e:	0023      	movs	r3, r4
 8005310:	6864      	ldr	r4, [r4, #4]
 8005312:	e7a2      	b.n	800525a <_malloc_r+0x26>
 8005314:	002c      	movs	r4, r5
 8005316:	686d      	ldr	r5, [r5, #4]
 8005318:	e7ab      	b.n	8005272 <_malloc_r+0x3e>
 800531a:	0013      	movs	r3, r2
 800531c:	e7c4      	b.n	80052a8 <_malloc_r+0x74>
 800531e:	230c      	movs	r3, #12
 8005320:	0030      	movs	r0, r6
 8005322:	6033      	str	r3, [r6, #0]
 8005324:	f000 f810 	bl	8005348 <__malloc_unlock>
 8005328:	e7cb      	b.n	80052c2 <_malloc_r+0x8e>
 800532a:	6027      	str	r7, [r4, #0]
 800532c:	e7d9      	b.n	80052e2 <_malloc_r+0xae>
 800532e:	605b      	str	r3, [r3, #4]
 8005330:	deff      	udf	#255	; 0xff
 8005332:	46c0      	nop			; (mov r8, r8)
 8005334:	2000041c 	.word	0x2000041c

08005338 <__malloc_lock>:
 8005338:	b510      	push	{r4, lr}
 800533a:	4802      	ldr	r0, [pc, #8]	; (8005344 <__malloc_lock+0xc>)
 800533c:	f7ff ff0c 	bl	8005158 <__retarget_lock_acquire_recursive>
 8005340:	bd10      	pop	{r4, pc}
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	20000418 	.word	0x20000418

08005348 <__malloc_unlock>:
 8005348:	b510      	push	{r4, lr}
 800534a:	4802      	ldr	r0, [pc, #8]	; (8005354 <__malloc_unlock+0xc>)
 800534c:	f7ff ff05 	bl	800515a <__retarget_lock_release_recursive>
 8005350:	bd10      	pop	{r4, pc}
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	20000418 	.word	0x20000418

08005358 <__ssputs_r>:
 8005358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800535a:	b085      	sub	sp, #20
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	9203      	str	r2, [sp, #12]
 8005360:	688e      	ldr	r6, [r1, #8]
 8005362:	9a01      	ldr	r2, [sp, #4]
 8005364:	0007      	movs	r7, r0
 8005366:	000c      	movs	r4, r1
 8005368:	680b      	ldr	r3, [r1, #0]
 800536a:	4296      	cmp	r6, r2
 800536c:	d831      	bhi.n	80053d2 <__ssputs_r+0x7a>
 800536e:	898a      	ldrh	r2, [r1, #12]
 8005370:	2190      	movs	r1, #144	; 0x90
 8005372:	00c9      	lsls	r1, r1, #3
 8005374:	420a      	tst	r2, r1
 8005376:	d029      	beq.n	80053cc <__ssputs_r+0x74>
 8005378:	2003      	movs	r0, #3
 800537a:	6921      	ldr	r1, [r4, #16]
 800537c:	1a5b      	subs	r3, r3, r1
 800537e:	9302      	str	r3, [sp, #8]
 8005380:	6963      	ldr	r3, [r4, #20]
 8005382:	4343      	muls	r3, r0
 8005384:	0fdd      	lsrs	r5, r3, #31
 8005386:	18ed      	adds	r5, r5, r3
 8005388:	9b01      	ldr	r3, [sp, #4]
 800538a:	9802      	ldr	r0, [sp, #8]
 800538c:	3301      	adds	r3, #1
 800538e:	181b      	adds	r3, r3, r0
 8005390:	106d      	asrs	r5, r5, #1
 8005392:	42ab      	cmp	r3, r5
 8005394:	d900      	bls.n	8005398 <__ssputs_r+0x40>
 8005396:	001d      	movs	r5, r3
 8005398:	0552      	lsls	r2, r2, #21
 800539a:	d529      	bpl.n	80053f0 <__ssputs_r+0x98>
 800539c:	0029      	movs	r1, r5
 800539e:	0038      	movs	r0, r7
 80053a0:	f7ff ff48 	bl	8005234 <_malloc_r>
 80053a4:	1e06      	subs	r6, r0, #0
 80053a6:	d02d      	beq.n	8005404 <__ssputs_r+0xac>
 80053a8:	9a02      	ldr	r2, [sp, #8]
 80053aa:	6921      	ldr	r1, [r4, #16]
 80053ac:	f000 fe89 	bl	80060c2 <memcpy>
 80053b0:	89a2      	ldrh	r2, [r4, #12]
 80053b2:	4b19      	ldr	r3, [pc, #100]	; (8005418 <__ssputs_r+0xc0>)
 80053b4:	401a      	ands	r2, r3
 80053b6:	2380      	movs	r3, #128	; 0x80
 80053b8:	4313      	orrs	r3, r2
 80053ba:	81a3      	strh	r3, [r4, #12]
 80053bc:	9b02      	ldr	r3, [sp, #8]
 80053be:	6126      	str	r6, [r4, #16]
 80053c0:	18f6      	adds	r6, r6, r3
 80053c2:	6026      	str	r6, [r4, #0]
 80053c4:	6165      	str	r5, [r4, #20]
 80053c6:	9e01      	ldr	r6, [sp, #4]
 80053c8:	1aed      	subs	r5, r5, r3
 80053ca:	60a5      	str	r5, [r4, #8]
 80053cc:	9b01      	ldr	r3, [sp, #4]
 80053ce:	429e      	cmp	r6, r3
 80053d0:	d900      	bls.n	80053d4 <__ssputs_r+0x7c>
 80053d2:	9e01      	ldr	r6, [sp, #4]
 80053d4:	0032      	movs	r2, r6
 80053d6:	9903      	ldr	r1, [sp, #12]
 80053d8:	6820      	ldr	r0, [r4, #0]
 80053da:	f000 fe41 	bl	8006060 <memmove>
 80053de:	2000      	movs	r0, #0
 80053e0:	68a3      	ldr	r3, [r4, #8]
 80053e2:	1b9b      	subs	r3, r3, r6
 80053e4:	60a3      	str	r3, [r4, #8]
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	199b      	adds	r3, r3, r6
 80053ea:	6023      	str	r3, [r4, #0]
 80053ec:	b005      	add	sp, #20
 80053ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053f0:	002a      	movs	r2, r5
 80053f2:	0038      	movs	r0, r7
 80053f4:	f000 fe6e 	bl	80060d4 <_realloc_r>
 80053f8:	1e06      	subs	r6, r0, #0
 80053fa:	d1df      	bne.n	80053bc <__ssputs_r+0x64>
 80053fc:	0038      	movs	r0, r7
 80053fe:	6921      	ldr	r1, [r4, #16]
 8005400:	f7ff feac 	bl	800515c <_free_r>
 8005404:	230c      	movs	r3, #12
 8005406:	2001      	movs	r0, #1
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	89a2      	ldrh	r2, [r4, #12]
 800540c:	3334      	adds	r3, #52	; 0x34
 800540e:	4313      	orrs	r3, r2
 8005410:	81a3      	strh	r3, [r4, #12]
 8005412:	4240      	negs	r0, r0
 8005414:	e7ea      	b.n	80053ec <__ssputs_r+0x94>
 8005416:	46c0      	nop			; (mov r8, r8)
 8005418:	fffffb7f 	.word	0xfffffb7f

0800541c <_svfiprintf_r>:
 800541c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800541e:	b0a1      	sub	sp, #132	; 0x84
 8005420:	9003      	str	r0, [sp, #12]
 8005422:	001d      	movs	r5, r3
 8005424:	898b      	ldrh	r3, [r1, #12]
 8005426:	000f      	movs	r7, r1
 8005428:	0016      	movs	r6, r2
 800542a:	061b      	lsls	r3, r3, #24
 800542c:	d511      	bpl.n	8005452 <_svfiprintf_r+0x36>
 800542e:	690b      	ldr	r3, [r1, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10e      	bne.n	8005452 <_svfiprintf_r+0x36>
 8005434:	2140      	movs	r1, #64	; 0x40
 8005436:	f7ff fefd 	bl	8005234 <_malloc_r>
 800543a:	6038      	str	r0, [r7, #0]
 800543c:	6138      	str	r0, [r7, #16]
 800543e:	2800      	cmp	r0, #0
 8005440:	d105      	bne.n	800544e <_svfiprintf_r+0x32>
 8005442:	230c      	movs	r3, #12
 8005444:	9a03      	ldr	r2, [sp, #12]
 8005446:	3801      	subs	r0, #1
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	b021      	add	sp, #132	; 0x84
 800544c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800544e:	2340      	movs	r3, #64	; 0x40
 8005450:	617b      	str	r3, [r7, #20]
 8005452:	2300      	movs	r3, #0
 8005454:	ac08      	add	r4, sp, #32
 8005456:	6163      	str	r3, [r4, #20]
 8005458:	3320      	adds	r3, #32
 800545a:	7663      	strb	r3, [r4, #25]
 800545c:	3310      	adds	r3, #16
 800545e:	76a3      	strb	r3, [r4, #26]
 8005460:	9507      	str	r5, [sp, #28]
 8005462:	0035      	movs	r5, r6
 8005464:	782b      	ldrb	r3, [r5, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <_svfiprintf_r+0x52>
 800546a:	2b25      	cmp	r3, #37	; 0x25
 800546c:	d148      	bne.n	8005500 <_svfiprintf_r+0xe4>
 800546e:	1bab      	subs	r3, r5, r6
 8005470:	9305      	str	r3, [sp, #20]
 8005472:	42b5      	cmp	r5, r6
 8005474:	d00b      	beq.n	800548e <_svfiprintf_r+0x72>
 8005476:	0032      	movs	r2, r6
 8005478:	0039      	movs	r1, r7
 800547a:	9803      	ldr	r0, [sp, #12]
 800547c:	f7ff ff6c 	bl	8005358 <__ssputs_r>
 8005480:	3001      	adds	r0, #1
 8005482:	d100      	bne.n	8005486 <_svfiprintf_r+0x6a>
 8005484:	e0af      	b.n	80055e6 <_svfiprintf_r+0x1ca>
 8005486:	6963      	ldr	r3, [r4, #20]
 8005488:	9a05      	ldr	r2, [sp, #20]
 800548a:	189b      	adds	r3, r3, r2
 800548c:	6163      	str	r3, [r4, #20]
 800548e:	782b      	ldrb	r3, [r5, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d100      	bne.n	8005496 <_svfiprintf_r+0x7a>
 8005494:	e0a7      	b.n	80055e6 <_svfiprintf_r+0x1ca>
 8005496:	2201      	movs	r2, #1
 8005498:	2300      	movs	r3, #0
 800549a:	4252      	negs	r2, r2
 800549c:	6062      	str	r2, [r4, #4]
 800549e:	a904      	add	r1, sp, #16
 80054a0:	3254      	adds	r2, #84	; 0x54
 80054a2:	1852      	adds	r2, r2, r1
 80054a4:	1c6e      	adds	r6, r5, #1
 80054a6:	6023      	str	r3, [r4, #0]
 80054a8:	60e3      	str	r3, [r4, #12]
 80054aa:	60a3      	str	r3, [r4, #8]
 80054ac:	7013      	strb	r3, [r2, #0]
 80054ae:	65a3      	str	r3, [r4, #88]	; 0x58
 80054b0:	4b55      	ldr	r3, [pc, #340]	; (8005608 <_svfiprintf_r+0x1ec>)
 80054b2:	2205      	movs	r2, #5
 80054b4:	0018      	movs	r0, r3
 80054b6:	7831      	ldrb	r1, [r6, #0]
 80054b8:	9305      	str	r3, [sp, #20]
 80054ba:	f000 fdf7 	bl	80060ac <memchr>
 80054be:	1c75      	adds	r5, r6, #1
 80054c0:	2800      	cmp	r0, #0
 80054c2:	d11f      	bne.n	8005504 <_svfiprintf_r+0xe8>
 80054c4:	6822      	ldr	r2, [r4, #0]
 80054c6:	06d3      	lsls	r3, r2, #27
 80054c8:	d504      	bpl.n	80054d4 <_svfiprintf_r+0xb8>
 80054ca:	2353      	movs	r3, #83	; 0x53
 80054cc:	a904      	add	r1, sp, #16
 80054ce:	185b      	adds	r3, r3, r1
 80054d0:	2120      	movs	r1, #32
 80054d2:	7019      	strb	r1, [r3, #0]
 80054d4:	0713      	lsls	r3, r2, #28
 80054d6:	d504      	bpl.n	80054e2 <_svfiprintf_r+0xc6>
 80054d8:	2353      	movs	r3, #83	; 0x53
 80054da:	a904      	add	r1, sp, #16
 80054dc:	185b      	adds	r3, r3, r1
 80054de:	212b      	movs	r1, #43	; 0x2b
 80054e0:	7019      	strb	r1, [r3, #0]
 80054e2:	7833      	ldrb	r3, [r6, #0]
 80054e4:	2b2a      	cmp	r3, #42	; 0x2a
 80054e6:	d016      	beq.n	8005516 <_svfiprintf_r+0xfa>
 80054e8:	0035      	movs	r5, r6
 80054ea:	2100      	movs	r1, #0
 80054ec:	200a      	movs	r0, #10
 80054ee:	68e3      	ldr	r3, [r4, #12]
 80054f0:	782a      	ldrb	r2, [r5, #0]
 80054f2:	1c6e      	adds	r6, r5, #1
 80054f4:	3a30      	subs	r2, #48	; 0x30
 80054f6:	2a09      	cmp	r2, #9
 80054f8:	d94e      	bls.n	8005598 <_svfiprintf_r+0x17c>
 80054fa:	2900      	cmp	r1, #0
 80054fc:	d111      	bne.n	8005522 <_svfiprintf_r+0x106>
 80054fe:	e017      	b.n	8005530 <_svfiprintf_r+0x114>
 8005500:	3501      	adds	r5, #1
 8005502:	e7af      	b.n	8005464 <_svfiprintf_r+0x48>
 8005504:	9b05      	ldr	r3, [sp, #20]
 8005506:	6822      	ldr	r2, [r4, #0]
 8005508:	1ac0      	subs	r0, r0, r3
 800550a:	2301      	movs	r3, #1
 800550c:	4083      	lsls	r3, r0
 800550e:	4313      	orrs	r3, r2
 8005510:	002e      	movs	r6, r5
 8005512:	6023      	str	r3, [r4, #0]
 8005514:	e7cc      	b.n	80054b0 <_svfiprintf_r+0x94>
 8005516:	9b07      	ldr	r3, [sp, #28]
 8005518:	1d19      	adds	r1, r3, #4
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	9107      	str	r1, [sp, #28]
 800551e:	2b00      	cmp	r3, #0
 8005520:	db01      	blt.n	8005526 <_svfiprintf_r+0x10a>
 8005522:	930b      	str	r3, [sp, #44]	; 0x2c
 8005524:	e004      	b.n	8005530 <_svfiprintf_r+0x114>
 8005526:	425b      	negs	r3, r3
 8005528:	60e3      	str	r3, [r4, #12]
 800552a:	2302      	movs	r3, #2
 800552c:	4313      	orrs	r3, r2
 800552e:	6023      	str	r3, [r4, #0]
 8005530:	782b      	ldrb	r3, [r5, #0]
 8005532:	2b2e      	cmp	r3, #46	; 0x2e
 8005534:	d10a      	bne.n	800554c <_svfiprintf_r+0x130>
 8005536:	786b      	ldrb	r3, [r5, #1]
 8005538:	2b2a      	cmp	r3, #42	; 0x2a
 800553a:	d135      	bne.n	80055a8 <_svfiprintf_r+0x18c>
 800553c:	9b07      	ldr	r3, [sp, #28]
 800553e:	3502      	adds	r5, #2
 8005540:	1d1a      	adds	r2, r3, #4
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	9207      	str	r2, [sp, #28]
 8005546:	2b00      	cmp	r3, #0
 8005548:	db2b      	blt.n	80055a2 <_svfiprintf_r+0x186>
 800554a:	9309      	str	r3, [sp, #36]	; 0x24
 800554c:	4e2f      	ldr	r6, [pc, #188]	; (800560c <_svfiprintf_r+0x1f0>)
 800554e:	2203      	movs	r2, #3
 8005550:	0030      	movs	r0, r6
 8005552:	7829      	ldrb	r1, [r5, #0]
 8005554:	f000 fdaa 	bl	80060ac <memchr>
 8005558:	2800      	cmp	r0, #0
 800555a:	d006      	beq.n	800556a <_svfiprintf_r+0x14e>
 800555c:	2340      	movs	r3, #64	; 0x40
 800555e:	1b80      	subs	r0, r0, r6
 8005560:	4083      	lsls	r3, r0
 8005562:	6822      	ldr	r2, [r4, #0]
 8005564:	3501      	adds	r5, #1
 8005566:	4313      	orrs	r3, r2
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	7829      	ldrb	r1, [r5, #0]
 800556c:	2206      	movs	r2, #6
 800556e:	4828      	ldr	r0, [pc, #160]	; (8005610 <_svfiprintf_r+0x1f4>)
 8005570:	1c6e      	adds	r6, r5, #1
 8005572:	7621      	strb	r1, [r4, #24]
 8005574:	f000 fd9a 	bl	80060ac <memchr>
 8005578:	2800      	cmp	r0, #0
 800557a:	d03c      	beq.n	80055f6 <_svfiprintf_r+0x1da>
 800557c:	4b25      	ldr	r3, [pc, #148]	; (8005614 <_svfiprintf_r+0x1f8>)
 800557e:	2b00      	cmp	r3, #0
 8005580:	d125      	bne.n	80055ce <_svfiprintf_r+0x1b2>
 8005582:	2207      	movs	r2, #7
 8005584:	9b07      	ldr	r3, [sp, #28]
 8005586:	3307      	adds	r3, #7
 8005588:	4393      	bics	r3, r2
 800558a:	3308      	adds	r3, #8
 800558c:	9307      	str	r3, [sp, #28]
 800558e:	6963      	ldr	r3, [r4, #20]
 8005590:	9a04      	ldr	r2, [sp, #16]
 8005592:	189b      	adds	r3, r3, r2
 8005594:	6163      	str	r3, [r4, #20]
 8005596:	e764      	b.n	8005462 <_svfiprintf_r+0x46>
 8005598:	4343      	muls	r3, r0
 800559a:	0035      	movs	r5, r6
 800559c:	2101      	movs	r1, #1
 800559e:	189b      	adds	r3, r3, r2
 80055a0:	e7a6      	b.n	80054f0 <_svfiprintf_r+0xd4>
 80055a2:	2301      	movs	r3, #1
 80055a4:	425b      	negs	r3, r3
 80055a6:	e7d0      	b.n	800554a <_svfiprintf_r+0x12e>
 80055a8:	2300      	movs	r3, #0
 80055aa:	200a      	movs	r0, #10
 80055ac:	001a      	movs	r2, r3
 80055ae:	3501      	adds	r5, #1
 80055b0:	6063      	str	r3, [r4, #4]
 80055b2:	7829      	ldrb	r1, [r5, #0]
 80055b4:	1c6e      	adds	r6, r5, #1
 80055b6:	3930      	subs	r1, #48	; 0x30
 80055b8:	2909      	cmp	r1, #9
 80055ba:	d903      	bls.n	80055c4 <_svfiprintf_r+0x1a8>
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0c5      	beq.n	800554c <_svfiprintf_r+0x130>
 80055c0:	9209      	str	r2, [sp, #36]	; 0x24
 80055c2:	e7c3      	b.n	800554c <_svfiprintf_r+0x130>
 80055c4:	4342      	muls	r2, r0
 80055c6:	0035      	movs	r5, r6
 80055c8:	2301      	movs	r3, #1
 80055ca:	1852      	adds	r2, r2, r1
 80055cc:	e7f1      	b.n	80055b2 <_svfiprintf_r+0x196>
 80055ce:	aa07      	add	r2, sp, #28
 80055d0:	9200      	str	r2, [sp, #0]
 80055d2:	0021      	movs	r1, r4
 80055d4:	003a      	movs	r2, r7
 80055d6:	4b10      	ldr	r3, [pc, #64]	; (8005618 <_svfiprintf_r+0x1fc>)
 80055d8:	9803      	ldr	r0, [sp, #12]
 80055da:	e000      	b.n	80055de <_svfiprintf_r+0x1c2>
 80055dc:	bf00      	nop
 80055de:	9004      	str	r0, [sp, #16]
 80055e0:	9b04      	ldr	r3, [sp, #16]
 80055e2:	3301      	adds	r3, #1
 80055e4:	d1d3      	bne.n	800558e <_svfiprintf_r+0x172>
 80055e6:	89bb      	ldrh	r3, [r7, #12]
 80055e8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80055ea:	065b      	lsls	r3, r3, #25
 80055ec:	d400      	bmi.n	80055f0 <_svfiprintf_r+0x1d4>
 80055ee:	e72c      	b.n	800544a <_svfiprintf_r+0x2e>
 80055f0:	2001      	movs	r0, #1
 80055f2:	4240      	negs	r0, r0
 80055f4:	e729      	b.n	800544a <_svfiprintf_r+0x2e>
 80055f6:	aa07      	add	r2, sp, #28
 80055f8:	9200      	str	r2, [sp, #0]
 80055fa:	0021      	movs	r1, r4
 80055fc:	003a      	movs	r2, r7
 80055fe:	4b06      	ldr	r3, [pc, #24]	; (8005618 <_svfiprintf_r+0x1fc>)
 8005600:	9803      	ldr	r0, [sp, #12]
 8005602:	f000 fa41 	bl	8005a88 <_printf_i>
 8005606:	e7ea      	b.n	80055de <_svfiprintf_r+0x1c2>
 8005608:	08006411 	.word	0x08006411
 800560c:	08006417 	.word	0x08006417
 8005610:	0800641b 	.word	0x0800641b
 8005614:	00000000 	.word	0x00000000
 8005618:	08005359 	.word	0x08005359

0800561c <_sungetc_r>:
 800561c:	b570      	push	{r4, r5, r6, lr}
 800561e:	0014      	movs	r4, r2
 8005620:	1c4b      	adds	r3, r1, #1
 8005622:	d103      	bne.n	800562c <_sungetc_r+0x10>
 8005624:	2501      	movs	r5, #1
 8005626:	426d      	negs	r5, r5
 8005628:	0028      	movs	r0, r5
 800562a:	bd70      	pop	{r4, r5, r6, pc}
 800562c:	8993      	ldrh	r3, [r2, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	4393      	bics	r3, r2
 8005632:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005634:	81a3      	strh	r3, [r4, #12]
 8005636:	b2ce      	uxtb	r6, r1
 8005638:	6863      	ldr	r3, [r4, #4]
 800563a:	b2cd      	uxtb	r5, r1
 800563c:	2a00      	cmp	r2, #0
 800563e:	d010      	beq.n	8005662 <_sungetc_r+0x46>
 8005640:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005642:	429a      	cmp	r2, r3
 8005644:	dd07      	ble.n	8005656 <_sungetc_r+0x3a>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	3b01      	subs	r3, #1
 800564a:	6023      	str	r3, [r4, #0]
 800564c:	701e      	strb	r6, [r3, #0]
 800564e:	6863      	ldr	r3, [r4, #4]
 8005650:	3301      	adds	r3, #1
 8005652:	6063      	str	r3, [r4, #4]
 8005654:	e7e8      	b.n	8005628 <_sungetc_r+0xc>
 8005656:	0021      	movs	r1, r4
 8005658:	f000 fcc4 	bl	8005fe4 <__submore>
 800565c:	2800      	cmp	r0, #0
 800565e:	d0f2      	beq.n	8005646 <_sungetc_r+0x2a>
 8005660:	e7e0      	b.n	8005624 <_sungetc_r+0x8>
 8005662:	6921      	ldr	r1, [r4, #16]
 8005664:	6822      	ldr	r2, [r4, #0]
 8005666:	2900      	cmp	r1, #0
 8005668:	d007      	beq.n	800567a <_sungetc_r+0x5e>
 800566a:	4291      	cmp	r1, r2
 800566c:	d205      	bcs.n	800567a <_sungetc_r+0x5e>
 800566e:	1e51      	subs	r1, r2, #1
 8005670:	7808      	ldrb	r0, [r1, #0]
 8005672:	42a8      	cmp	r0, r5
 8005674:	d101      	bne.n	800567a <_sungetc_r+0x5e>
 8005676:	6021      	str	r1, [r4, #0]
 8005678:	e7ea      	b.n	8005650 <_sungetc_r+0x34>
 800567a:	6423      	str	r3, [r4, #64]	; 0x40
 800567c:	0023      	movs	r3, r4
 800567e:	3344      	adds	r3, #68	; 0x44
 8005680:	6363      	str	r3, [r4, #52]	; 0x34
 8005682:	2303      	movs	r3, #3
 8005684:	63a3      	str	r3, [r4, #56]	; 0x38
 8005686:	0023      	movs	r3, r4
 8005688:	3346      	adds	r3, #70	; 0x46
 800568a:	63e2      	str	r2, [r4, #60]	; 0x3c
 800568c:	701e      	strb	r6, [r3, #0]
 800568e:	6023      	str	r3, [r4, #0]
 8005690:	2301      	movs	r3, #1
 8005692:	e7de      	b.n	8005652 <_sungetc_r+0x36>

08005694 <__ssrefill_r>:
 8005694:	b510      	push	{r4, lr}
 8005696:	000c      	movs	r4, r1
 8005698:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800569a:	2900      	cmp	r1, #0
 800569c:	d00e      	beq.n	80056bc <__ssrefill_r+0x28>
 800569e:	0023      	movs	r3, r4
 80056a0:	3344      	adds	r3, #68	; 0x44
 80056a2:	4299      	cmp	r1, r3
 80056a4:	d001      	beq.n	80056aa <__ssrefill_r+0x16>
 80056a6:	f7ff fd59 	bl	800515c <_free_r>
 80056aa:	2000      	movs	r0, #0
 80056ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056ae:	6360      	str	r0, [r4, #52]	; 0x34
 80056b0:	6063      	str	r3, [r4, #4]
 80056b2:	4283      	cmp	r3, r0
 80056b4:	d002      	beq.n	80056bc <__ssrefill_r+0x28>
 80056b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80056b8:	6023      	str	r3, [r4, #0]
 80056ba:	bd10      	pop	{r4, pc}
 80056bc:	6923      	ldr	r3, [r4, #16]
 80056be:	2001      	movs	r0, #1
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	2300      	movs	r3, #0
 80056c4:	89a2      	ldrh	r2, [r4, #12]
 80056c6:	6063      	str	r3, [r4, #4]
 80056c8:	3320      	adds	r3, #32
 80056ca:	4313      	orrs	r3, r2
 80056cc:	81a3      	strh	r3, [r4, #12]
 80056ce:	4240      	negs	r0, r0
 80056d0:	e7f3      	b.n	80056ba <__ssrefill_r+0x26>
	...

080056d4 <__ssvfiscanf_r>:
 80056d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056d6:	4cae      	ldr	r4, [pc, #696]	; (8005990 <__ssvfiscanf_r+0x2bc>)
 80056d8:	0006      	movs	r6, r0
 80056da:	44a5      	add	sp, r4
 80056dc:	000c      	movs	r4, r1
 80056de:	2100      	movs	r1, #0
 80056e0:	20be      	movs	r0, #190	; 0xbe
 80056e2:	9146      	str	r1, [sp, #280]	; 0x118
 80056e4:	9147      	str	r1, [sp, #284]	; 0x11c
 80056e6:	a903      	add	r1, sp, #12
 80056e8:	9148      	str	r1, [sp, #288]	; 0x120
 80056ea:	49aa      	ldr	r1, [pc, #680]	; (8005994 <__ssvfiscanf_r+0x2c0>)
 80056ec:	0040      	lsls	r0, r0, #1
 80056ee:	ad43      	add	r5, sp, #268	; 0x10c
 80056f0:	5029      	str	r1, [r5, r0]
 80056f2:	25c0      	movs	r5, #192	; 0xc0
 80056f4:	49a8      	ldr	r1, [pc, #672]	; (8005998 <__ssvfiscanf_r+0x2c4>)
 80056f6:	006d      	lsls	r5, r5, #1
 80056f8:	a843      	add	r0, sp, #268	; 0x10c
 80056fa:	5141      	str	r1, [r0, r5]
 80056fc:	9302      	str	r3, [sp, #8]
 80056fe:	7815      	ldrb	r5, [r2, #0]
 8005700:	2d00      	cmp	r5, #0
 8005702:	d100      	bne.n	8005706 <__ssvfiscanf_r+0x32>
 8005704:	e141      	b.n	800598a <__ssvfiscanf_r+0x2b6>
 8005706:	4ba5      	ldr	r3, [pc, #660]	; (800599c <__ssvfiscanf_r+0x2c8>)
 8005708:	2008      	movs	r0, #8
 800570a:	5d59      	ldrb	r1, [r3, r5]
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	2308      	movs	r3, #8
 8005710:	1c57      	adds	r7, r2, #1
 8005712:	400b      	ands	r3, r1
 8005714:	4201      	tst	r1, r0
 8005716:	d01e      	beq.n	8005756 <__ssvfiscanf_r+0x82>
 8005718:	6863      	ldr	r3, [r4, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	dd11      	ble.n	8005742 <__ssvfiscanf_r+0x6e>
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	9900      	ldr	r1, [sp, #0]
 8005722:	781a      	ldrb	r2, [r3, #0]
 8005724:	5c8a      	ldrb	r2, [r1, r2]
 8005726:	2108      	movs	r1, #8
 8005728:	420a      	tst	r2, r1
 800572a:	d101      	bne.n	8005730 <__ssvfiscanf_r+0x5c>
 800572c:	003a      	movs	r2, r7
 800572e:	e7e6      	b.n	80056fe <__ssvfiscanf_r+0x2a>
 8005730:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8005732:	3301      	adds	r3, #1
 8005734:	3201      	adds	r2, #1
 8005736:	9247      	str	r2, [sp, #284]	; 0x11c
 8005738:	6862      	ldr	r2, [r4, #4]
 800573a:	6023      	str	r3, [r4, #0]
 800573c:	3a01      	subs	r2, #1
 800573e:	6062      	str	r2, [r4, #4]
 8005740:	e7ea      	b.n	8005718 <__ssvfiscanf_r+0x44>
 8005742:	22c0      	movs	r2, #192	; 0xc0
 8005744:	ab43      	add	r3, sp, #268	; 0x10c
 8005746:	0052      	lsls	r2, r2, #1
 8005748:	0021      	movs	r1, r4
 800574a:	0030      	movs	r0, r6
 800574c:	589b      	ldr	r3, [r3, r2]
 800574e:	4798      	blx	r3
 8005750:	2800      	cmp	r0, #0
 8005752:	d0e4      	beq.n	800571e <__ssvfiscanf_r+0x4a>
 8005754:	e7ea      	b.n	800572c <__ssvfiscanf_r+0x58>
 8005756:	2d25      	cmp	r5, #37	; 0x25
 8005758:	d162      	bne.n	8005820 <__ssvfiscanf_r+0x14c>
 800575a:	9345      	str	r3, [sp, #276]	; 0x114
 800575c:	9343      	str	r3, [sp, #268]	; 0x10c
 800575e:	7853      	ldrb	r3, [r2, #1]
 8005760:	2b2a      	cmp	r3, #42	; 0x2a
 8005762:	d102      	bne.n	800576a <__ssvfiscanf_r+0x96>
 8005764:	3b1a      	subs	r3, #26
 8005766:	9343      	str	r3, [sp, #268]	; 0x10c
 8005768:	1c97      	adds	r7, r2, #2
 800576a:	003d      	movs	r5, r7
 800576c:	220a      	movs	r2, #10
 800576e:	7829      	ldrb	r1, [r5, #0]
 8005770:	1c6b      	adds	r3, r5, #1
 8005772:	9301      	str	r3, [sp, #4]
 8005774:	000b      	movs	r3, r1
 8005776:	3b30      	subs	r3, #48	; 0x30
 8005778:	2b09      	cmp	r3, #9
 800577a:	d91e      	bls.n	80057ba <__ssvfiscanf_r+0xe6>
 800577c:	4f88      	ldr	r7, [pc, #544]	; (80059a0 <__ssvfiscanf_r+0x2cc>)
 800577e:	2203      	movs	r2, #3
 8005780:	0038      	movs	r0, r7
 8005782:	f000 fc93 	bl	80060ac <memchr>
 8005786:	2800      	cmp	r0, #0
 8005788:	d006      	beq.n	8005798 <__ssvfiscanf_r+0xc4>
 800578a:	2301      	movs	r3, #1
 800578c:	1bc0      	subs	r0, r0, r7
 800578e:	4083      	lsls	r3, r0
 8005790:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005792:	9d01      	ldr	r5, [sp, #4]
 8005794:	4313      	orrs	r3, r2
 8005796:	9343      	str	r3, [sp, #268]	; 0x10c
 8005798:	1c6f      	adds	r7, r5, #1
 800579a:	782d      	ldrb	r5, [r5, #0]
 800579c:	2d78      	cmp	r5, #120	; 0x78
 800579e:	d807      	bhi.n	80057b0 <__ssvfiscanf_r+0xdc>
 80057a0:	2d57      	cmp	r5, #87	; 0x57
 80057a2:	d811      	bhi.n	80057c8 <__ssvfiscanf_r+0xf4>
 80057a4:	2d25      	cmp	r5, #37	; 0x25
 80057a6:	d03b      	beq.n	8005820 <__ssvfiscanf_r+0x14c>
 80057a8:	d835      	bhi.n	8005816 <__ssvfiscanf_r+0x142>
 80057aa:	2d00      	cmp	r5, #0
 80057ac:	d100      	bne.n	80057b0 <__ssvfiscanf_r+0xdc>
 80057ae:	e0e9      	b.n	8005984 <__ssvfiscanf_r+0x2b0>
 80057b0:	2303      	movs	r3, #3
 80057b2:	9349      	str	r3, [sp, #292]	; 0x124
 80057b4:	3307      	adds	r3, #7
 80057b6:	9344      	str	r3, [sp, #272]	; 0x110
 80057b8:	e06d      	b.n	8005896 <__ssvfiscanf_r+0x1c2>
 80057ba:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80057bc:	9d01      	ldr	r5, [sp, #4]
 80057be:	4353      	muls	r3, r2
 80057c0:	3b30      	subs	r3, #48	; 0x30
 80057c2:	185b      	adds	r3, r3, r1
 80057c4:	9345      	str	r3, [sp, #276]	; 0x114
 80057c6:	e7d2      	b.n	800576e <__ssvfiscanf_r+0x9a>
 80057c8:	0028      	movs	r0, r5
 80057ca:	3858      	subs	r0, #88	; 0x58
 80057cc:	2820      	cmp	r0, #32
 80057ce:	d8ef      	bhi.n	80057b0 <__ssvfiscanf_r+0xdc>
 80057d0:	f7fa fca2 	bl	8000118 <__gnu_thumb1_case_shi>
 80057d4:	ffee004d 	.word	0xffee004d
 80057d8:	007fffee 	.word	0x007fffee
 80057dc:	ffeeffee 	.word	0xffeeffee
 80057e0:	ffeeffee 	.word	0xffeeffee
 80057e4:	ffeeffee 	.word	0xffeeffee
 80057e8:	008affee 	.word	0x008affee
 80057ec:	0024007d 	.word	0x0024007d
 80057f0:	00240024 	.word	0x00240024
 80057f4:	0059ffee 	.word	0x0059ffee
 80057f8:	ffeeffee 	.word	0xffeeffee
 80057fc:	ffeeffee 	.word	0xffeeffee
 8005800:	005d0092 	.word	0x005d0092
 8005804:	ffee0049 	.word	0xffee0049
 8005808:	0090ffee 	.word	0x0090ffee
 800580c:	007dffee 	.word	0x007dffee
 8005810:	ffeeffee 	.word	0xffeeffee
 8005814:	004d      	.short	0x004d
 8005816:	3d45      	subs	r5, #69	; 0x45
 8005818:	2d02      	cmp	r5, #2
 800581a:	d8c9      	bhi.n	80057b0 <__ssvfiscanf_r+0xdc>
 800581c:	2305      	movs	r3, #5
 800581e:	e039      	b.n	8005894 <__ssvfiscanf_r+0x1c0>
 8005820:	6863      	ldr	r3, [r4, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	dd0d      	ble.n	8005842 <__ssvfiscanf_r+0x16e>
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	781a      	ldrb	r2, [r3, #0]
 800582a:	42aa      	cmp	r2, r5
 800582c:	d000      	beq.n	8005830 <__ssvfiscanf_r+0x15c>
 800582e:	e0ac      	b.n	800598a <__ssvfiscanf_r+0x2b6>
 8005830:	3301      	adds	r3, #1
 8005832:	6862      	ldr	r2, [r4, #4]
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005838:	3a01      	subs	r2, #1
 800583a:	3301      	adds	r3, #1
 800583c:	6062      	str	r2, [r4, #4]
 800583e:	9347      	str	r3, [sp, #284]	; 0x11c
 8005840:	e774      	b.n	800572c <__ssvfiscanf_r+0x58>
 8005842:	22c0      	movs	r2, #192	; 0xc0
 8005844:	ab43      	add	r3, sp, #268	; 0x10c
 8005846:	0052      	lsls	r2, r2, #1
 8005848:	0021      	movs	r1, r4
 800584a:	0030      	movs	r0, r6
 800584c:	589b      	ldr	r3, [r3, r2]
 800584e:	4798      	blx	r3
 8005850:	2800      	cmp	r0, #0
 8005852:	d0e8      	beq.n	8005826 <__ssvfiscanf_r+0x152>
 8005854:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005856:	2800      	cmp	r0, #0
 8005858:	d000      	beq.n	800585c <__ssvfiscanf_r+0x188>
 800585a:	e08f      	b.n	800597c <__ssvfiscanf_r+0x2a8>
 800585c:	3801      	subs	r0, #1
 800585e:	23a5      	movs	r3, #165	; 0xa5
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	449d      	add	sp, r3
 8005864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005866:	2320      	movs	r3, #32
 8005868:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800586a:	4313      	orrs	r3, r2
 800586c:	9343      	str	r3, [sp, #268]	; 0x10c
 800586e:	2380      	movs	r3, #128	; 0x80
 8005870:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4313      	orrs	r3, r2
 8005876:	9343      	str	r3, [sp, #268]	; 0x10c
 8005878:	2310      	movs	r3, #16
 800587a:	9344      	str	r3, [sp, #272]	; 0x110
 800587c:	236e      	movs	r3, #110	; 0x6e
 800587e:	42ab      	cmp	r3, r5
 8005880:	419b      	sbcs	r3, r3
 8005882:	425b      	negs	r3, r3
 8005884:	e001      	b.n	800588a <__ssvfiscanf_r+0x1b6>
 8005886:	2300      	movs	r3, #0
 8005888:	9344      	str	r3, [sp, #272]	; 0x110
 800588a:	3303      	adds	r3, #3
 800588c:	e002      	b.n	8005894 <__ssvfiscanf_r+0x1c0>
 800588e:	2308      	movs	r3, #8
 8005890:	9344      	str	r3, [sp, #272]	; 0x110
 8005892:	3b04      	subs	r3, #4
 8005894:	9349      	str	r3, [sp, #292]	; 0x124
 8005896:	6863      	ldr	r3, [r4, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	dd3c      	ble.n	8005916 <__ssvfiscanf_r+0x242>
 800589c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800589e:	065b      	lsls	r3, r3, #25
 80058a0:	d406      	bmi.n	80058b0 <__ssvfiscanf_r+0x1dc>
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	9900      	ldr	r1, [sp, #0]
 80058a6:	781a      	ldrb	r2, [r3, #0]
 80058a8:	5c8a      	ldrb	r2, [r1, r2]
 80058aa:	2108      	movs	r1, #8
 80058ac:	420a      	tst	r2, r1
 80058ae:	d13c      	bne.n	800592a <__ssvfiscanf_r+0x256>
 80058b0:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	dc4e      	bgt.n	8005954 <__ssvfiscanf_r+0x280>
 80058b6:	0022      	movs	r2, r4
 80058b8:	0030      	movs	r0, r6
 80058ba:	ab02      	add	r3, sp, #8
 80058bc:	a943      	add	r1, sp, #268	; 0x10c
 80058be:	f000 f9f3 	bl	8005ca8 <_scanf_chars>
 80058c2:	2801      	cmp	r0, #1
 80058c4:	d061      	beq.n	800598a <__ssvfiscanf_r+0x2b6>
 80058c6:	2802      	cmp	r0, #2
 80058c8:	d000      	beq.n	80058cc <__ssvfiscanf_r+0x1f8>
 80058ca:	e72f      	b.n	800572c <__ssvfiscanf_r+0x58>
 80058cc:	e7c2      	b.n	8005854 <__ssvfiscanf_r+0x180>
 80058ce:	230a      	movs	r3, #10
 80058d0:	e7d3      	b.n	800587a <__ssvfiscanf_r+0x1a6>
 80058d2:	0039      	movs	r1, r7
 80058d4:	a803      	add	r0, sp, #12
 80058d6:	f000 fb49 	bl	8005f6c <__sccl>
 80058da:	2340      	movs	r3, #64	; 0x40
 80058dc:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80058de:	0007      	movs	r7, r0
 80058e0:	4313      	orrs	r3, r2
 80058e2:	9343      	str	r3, [sp, #268]	; 0x10c
 80058e4:	2301      	movs	r3, #1
 80058e6:	e7d5      	b.n	8005894 <__ssvfiscanf_r+0x1c0>
 80058e8:	2340      	movs	r3, #64	; 0x40
 80058ea:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80058ec:	4313      	orrs	r3, r2
 80058ee:	9343      	str	r3, [sp, #268]	; 0x10c
 80058f0:	2300      	movs	r3, #0
 80058f2:	e7cf      	b.n	8005894 <__ssvfiscanf_r+0x1c0>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e7cd      	b.n	8005894 <__ssvfiscanf_r+0x1c0>
 80058f8:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80058fa:	06d3      	lsls	r3, r2, #27
 80058fc:	d500      	bpl.n	8005900 <__ssvfiscanf_r+0x22c>
 80058fe:	e715      	b.n	800572c <__ssvfiscanf_r+0x58>
 8005900:	9b02      	ldr	r3, [sp, #8]
 8005902:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8005904:	1d18      	adds	r0, r3, #4
 8005906:	9002      	str	r0, [sp, #8]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	07d5      	lsls	r5, r2, #31
 800590c:	d501      	bpl.n	8005912 <__ssvfiscanf_r+0x23e>
 800590e:	8019      	strh	r1, [r3, #0]
 8005910:	e70c      	b.n	800572c <__ssvfiscanf_r+0x58>
 8005912:	6019      	str	r1, [r3, #0]
 8005914:	e70a      	b.n	800572c <__ssvfiscanf_r+0x58>
 8005916:	22c0      	movs	r2, #192	; 0xc0
 8005918:	ab43      	add	r3, sp, #268	; 0x10c
 800591a:	0052      	lsls	r2, r2, #1
 800591c:	0021      	movs	r1, r4
 800591e:	0030      	movs	r0, r6
 8005920:	589b      	ldr	r3, [r3, r2]
 8005922:	4798      	blx	r3
 8005924:	2800      	cmp	r0, #0
 8005926:	d0b9      	beq.n	800589c <__ssvfiscanf_r+0x1c8>
 8005928:	e794      	b.n	8005854 <__ssvfiscanf_r+0x180>
 800592a:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800592c:	3201      	adds	r2, #1
 800592e:	9247      	str	r2, [sp, #284]	; 0x11c
 8005930:	6862      	ldr	r2, [r4, #4]
 8005932:	3a01      	subs	r2, #1
 8005934:	6062      	str	r2, [r4, #4]
 8005936:	2a00      	cmp	r2, #0
 8005938:	dd02      	ble.n	8005940 <__ssvfiscanf_r+0x26c>
 800593a:	3301      	adds	r3, #1
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	e7b0      	b.n	80058a2 <__ssvfiscanf_r+0x1ce>
 8005940:	22c0      	movs	r2, #192	; 0xc0
 8005942:	ab43      	add	r3, sp, #268	; 0x10c
 8005944:	0052      	lsls	r2, r2, #1
 8005946:	0021      	movs	r1, r4
 8005948:	0030      	movs	r0, r6
 800594a:	589b      	ldr	r3, [r3, r2]
 800594c:	4798      	blx	r3
 800594e:	2800      	cmp	r0, #0
 8005950:	d0a7      	beq.n	80058a2 <__ssvfiscanf_r+0x1ce>
 8005952:	e77f      	b.n	8005854 <__ssvfiscanf_r+0x180>
 8005954:	2b04      	cmp	r3, #4
 8005956:	dc06      	bgt.n	8005966 <__ssvfiscanf_r+0x292>
 8005958:	0022      	movs	r2, r4
 800595a:	0030      	movs	r0, r6
 800595c:	ab02      	add	r3, sp, #8
 800595e:	a943      	add	r1, sp, #268	; 0x10c
 8005960:	f000 fa00 	bl	8005d64 <_scanf_i>
 8005964:	e7ad      	b.n	80058c2 <__ssvfiscanf_r+0x1ee>
 8005966:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <__ssvfiscanf_r+0x2d0>)
 8005968:	2b00      	cmp	r3, #0
 800596a:	d100      	bne.n	800596e <__ssvfiscanf_r+0x29a>
 800596c:	e6de      	b.n	800572c <__ssvfiscanf_r+0x58>
 800596e:	0022      	movs	r2, r4
 8005970:	0030      	movs	r0, r6
 8005972:	ab02      	add	r3, sp, #8
 8005974:	a943      	add	r1, sp, #268	; 0x10c
 8005976:	e000      	b.n	800597a <__ssvfiscanf_r+0x2a6>
 8005978:	bf00      	nop
 800597a:	e7a2      	b.n	80058c2 <__ssvfiscanf_r+0x1ee>
 800597c:	89a3      	ldrh	r3, [r4, #12]
 800597e:	065b      	lsls	r3, r3, #25
 8005980:	d400      	bmi.n	8005984 <__ssvfiscanf_r+0x2b0>
 8005982:	e76c      	b.n	800585e <__ssvfiscanf_r+0x18a>
 8005984:	2001      	movs	r0, #1
 8005986:	4240      	negs	r0, r0
 8005988:	e769      	b.n	800585e <__ssvfiscanf_r+0x18a>
 800598a:	9846      	ldr	r0, [sp, #280]	; 0x118
 800598c:	e767      	b.n	800585e <__ssvfiscanf_r+0x18a>
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	fffffd6c 	.word	0xfffffd6c
 8005994:	0800561d 	.word	0x0800561d
 8005998:	08005695 	.word	0x08005695
 800599c:	08006311 	.word	0x08006311
 80059a0:	08006417 	.word	0x08006417
 80059a4:	00000000 	.word	0x00000000

080059a8 <_printf_common>:
 80059a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059aa:	0016      	movs	r6, r2
 80059ac:	9301      	str	r3, [sp, #4]
 80059ae:	688a      	ldr	r2, [r1, #8]
 80059b0:	690b      	ldr	r3, [r1, #16]
 80059b2:	000c      	movs	r4, r1
 80059b4:	9000      	str	r0, [sp, #0]
 80059b6:	4293      	cmp	r3, r2
 80059b8:	da00      	bge.n	80059bc <_printf_common+0x14>
 80059ba:	0013      	movs	r3, r2
 80059bc:	0022      	movs	r2, r4
 80059be:	6033      	str	r3, [r6, #0]
 80059c0:	3243      	adds	r2, #67	; 0x43
 80059c2:	7812      	ldrb	r2, [r2, #0]
 80059c4:	2a00      	cmp	r2, #0
 80059c6:	d001      	beq.n	80059cc <_printf_common+0x24>
 80059c8:	3301      	adds	r3, #1
 80059ca:	6033      	str	r3, [r6, #0]
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	069b      	lsls	r3, r3, #26
 80059d0:	d502      	bpl.n	80059d8 <_printf_common+0x30>
 80059d2:	6833      	ldr	r3, [r6, #0]
 80059d4:	3302      	adds	r3, #2
 80059d6:	6033      	str	r3, [r6, #0]
 80059d8:	6822      	ldr	r2, [r4, #0]
 80059da:	2306      	movs	r3, #6
 80059dc:	0015      	movs	r5, r2
 80059de:	401d      	ands	r5, r3
 80059e0:	421a      	tst	r2, r3
 80059e2:	d027      	beq.n	8005a34 <_printf_common+0x8c>
 80059e4:	0023      	movs	r3, r4
 80059e6:	3343      	adds	r3, #67	; 0x43
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	1e5a      	subs	r2, r3, #1
 80059ec:	4193      	sbcs	r3, r2
 80059ee:	6822      	ldr	r2, [r4, #0]
 80059f0:	0692      	lsls	r2, r2, #26
 80059f2:	d430      	bmi.n	8005a56 <_printf_common+0xae>
 80059f4:	0022      	movs	r2, r4
 80059f6:	9901      	ldr	r1, [sp, #4]
 80059f8:	9800      	ldr	r0, [sp, #0]
 80059fa:	9d08      	ldr	r5, [sp, #32]
 80059fc:	3243      	adds	r2, #67	; 0x43
 80059fe:	47a8      	blx	r5
 8005a00:	3001      	adds	r0, #1
 8005a02:	d025      	beq.n	8005a50 <_printf_common+0xa8>
 8005a04:	2206      	movs	r2, #6
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	2500      	movs	r5, #0
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d105      	bne.n	8005a1c <_printf_common+0x74>
 8005a10:	6833      	ldr	r3, [r6, #0]
 8005a12:	68e5      	ldr	r5, [r4, #12]
 8005a14:	1aed      	subs	r5, r5, r3
 8005a16:	43eb      	mvns	r3, r5
 8005a18:	17db      	asrs	r3, r3, #31
 8005a1a:	401d      	ands	r5, r3
 8005a1c:	68a3      	ldr	r3, [r4, #8]
 8005a1e:	6922      	ldr	r2, [r4, #16]
 8005a20:	4293      	cmp	r3, r2
 8005a22:	dd01      	ble.n	8005a28 <_printf_common+0x80>
 8005a24:	1a9b      	subs	r3, r3, r2
 8005a26:	18ed      	adds	r5, r5, r3
 8005a28:	2600      	movs	r6, #0
 8005a2a:	42b5      	cmp	r5, r6
 8005a2c:	d120      	bne.n	8005a70 <_printf_common+0xc8>
 8005a2e:	2000      	movs	r0, #0
 8005a30:	e010      	b.n	8005a54 <_printf_common+0xac>
 8005a32:	3501      	adds	r5, #1
 8005a34:	68e3      	ldr	r3, [r4, #12]
 8005a36:	6832      	ldr	r2, [r6, #0]
 8005a38:	1a9b      	subs	r3, r3, r2
 8005a3a:	42ab      	cmp	r3, r5
 8005a3c:	ddd2      	ble.n	80059e4 <_printf_common+0x3c>
 8005a3e:	0022      	movs	r2, r4
 8005a40:	2301      	movs	r3, #1
 8005a42:	9901      	ldr	r1, [sp, #4]
 8005a44:	9800      	ldr	r0, [sp, #0]
 8005a46:	9f08      	ldr	r7, [sp, #32]
 8005a48:	3219      	adds	r2, #25
 8005a4a:	47b8      	blx	r7
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d1f0      	bne.n	8005a32 <_printf_common+0x8a>
 8005a50:	2001      	movs	r0, #1
 8005a52:	4240      	negs	r0, r0
 8005a54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a56:	2030      	movs	r0, #48	; 0x30
 8005a58:	18e1      	adds	r1, r4, r3
 8005a5a:	3143      	adds	r1, #67	; 0x43
 8005a5c:	7008      	strb	r0, [r1, #0]
 8005a5e:	0021      	movs	r1, r4
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	3145      	adds	r1, #69	; 0x45
 8005a64:	7809      	ldrb	r1, [r1, #0]
 8005a66:	18a2      	adds	r2, r4, r2
 8005a68:	3243      	adds	r2, #67	; 0x43
 8005a6a:	3302      	adds	r3, #2
 8005a6c:	7011      	strb	r1, [r2, #0]
 8005a6e:	e7c1      	b.n	80059f4 <_printf_common+0x4c>
 8005a70:	0022      	movs	r2, r4
 8005a72:	2301      	movs	r3, #1
 8005a74:	9901      	ldr	r1, [sp, #4]
 8005a76:	9800      	ldr	r0, [sp, #0]
 8005a78:	9f08      	ldr	r7, [sp, #32]
 8005a7a:	321a      	adds	r2, #26
 8005a7c:	47b8      	blx	r7
 8005a7e:	3001      	adds	r0, #1
 8005a80:	d0e6      	beq.n	8005a50 <_printf_common+0xa8>
 8005a82:	3601      	adds	r6, #1
 8005a84:	e7d1      	b.n	8005a2a <_printf_common+0x82>
	...

08005a88 <_printf_i>:
 8005a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a8a:	b08b      	sub	sp, #44	; 0x2c
 8005a8c:	9206      	str	r2, [sp, #24]
 8005a8e:	000a      	movs	r2, r1
 8005a90:	3243      	adds	r2, #67	; 0x43
 8005a92:	9307      	str	r3, [sp, #28]
 8005a94:	9005      	str	r0, [sp, #20]
 8005a96:	9204      	str	r2, [sp, #16]
 8005a98:	7e0a      	ldrb	r2, [r1, #24]
 8005a9a:	000c      	movs	r4, r1
 8005a9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a9e:	2a78      	cmp	r2, #120	; 0x78
 8005aa0:	d809      	bhi.n	8005ab6 <_printf_i+0x2e>
 8005aa2:	2a62      	cmp	r2, #98	; 0x62
 8005aa4:	d80b      	bhi.n	8005abe <_printf_i+0x36>
 8005aa6:	2a00      	cmp	r2, #0
 8005aa8:	d100      	bne.n	8005aac <_printf_i+0x24>
 8005aaa:	e0be      	b.n	8005c2a <_printf_i+0x1a2>
 8005aac:	497c      	ldr	r1, [pc, #496]	; (8005ca0 <_printf_i+0x218>)
 8005aae:	9103      	str	r1, [sp, #12]
 8005ab0:	2a58      	cmp	r2, #88	; 0x58
 8005ab2:	d100      	bne.n	8005ab6 <_printf_i+0x2e>
 8005ab4:	e093      	b.n	8005bde <_printf_i+0x156>
 8005ab6:	0026      	movs	r6, r4
 8005ab8:	3642      	adds	r6, #66	; 0x42
 8005aba:	7032      	strb	r2, [r6, #0]
 8005abc:	e022      	b.n	8005b04 <_printf_i+0x7c>
 8005abe:	0010      	movs	r0, r2
 8005ac0:	3863      	subs	r0, #99	; 0x63
 8005ac2:	2815      	cmp	r0, #21
 8005ac4:	d8f7      	bhi.n	8005ab6 <_printf_i+0x2e>
 8005ac6:	f7fa fb27 	bl	8000118 <__gnu_thumb1_case_shi>
 8005aca:	0016      	.short	0x0016
 8005acc:	fff6001f 	.word	0xfff6001f
 8005ad0:	fff6fff6 	.word	0xfff6fff6
 8005ad4:	001ffff6 	.word	0x001ffff6
 8005ad8:	fff6fff6 	.word	0xfff6fff6
 8005adc:	fff6fff6 	.word	0xfff6fff6
 8005ae0:	003600a3 	.word	0x003600a3
 8005ae4:	fff60083 	.word	0xfff60083
 8005ae8:	00b4fff6 	.word	0x00b4fff6
 8005aec:	0036fff6 	.word	0x0036fff6
 8005af0:	fff6fff6 	.word	0xfff6fff6
 8005af4:	0087      	.short	0x0087
 8005af6:	0026      	movs	r6, r4
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	3642      	adds	r6, #66	; 0x42
 8005afc:	1d11      	adds	r1, r2, #4
 8005afe:	6019      	str	r1, [r3, #0]
 8005b00:	6813      	ldr	r3, [r2, #0]
 8005b02:	7033      	strb	r3, [r6, #0]
 8005b04:	2301      	movs	r3, #1
 8005b06:	e0a2      	b.n	8005c4e <_printf_i+0x1c6>
 8005b08:	6818      	ldr	r0, [r3, #0]
 8005b0a:	6809      	ldr	r1, [r1, #0]
 8005b0c:	1d02      	adds	r2, r0, #4
 8005b0e:	060d      	lsls	r5, r1, #24
 8005b10:	d50b      	bpl.n	8005b2a <_printf_i+0xa2>
 8005b12:	6805      	ldr	r5, [r0, #0]
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	2d00      	cmp	r5, #0
 8005b18:	da03      	bge.n	8005b22 <_printf_i+0x9a>
 8005b1a:	232d      	movs	r3, #45	; 0x2d
 8005b1c:	9a04      	ldr	r2, [sp, #16]
 8005b1e:	426d      	negs	r5, r5
 8005b20:	7013      	strb	r3, [r2, #0]
 8005b22:	4b5f      	ldr	r3, [pc, #380]	; (8005ca0 <_printf_i+0x218>)
 8005b24:	270a      	movs	r7, #10
 8005b26:	9303      	str	r3, [sp, #12]
 8005b28:	e01b      	b.n	8005b62 <_printf_i+0xda>
 8005b2a:	6805      	ldr	r5, [r0, #0]
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	0649      	lsls	r1, r1, #25
 8005b30:	d5f1      	bpl.n	8005b16 <_printf_i+0x8e>
 8005b32:	b22d      	sxth	r5, r5
 8005b34:	e7ef      	b.n	8005b16 <_printf_i+0x8e>
 8005b36:	680d      	ldr	r5, [r1, #0]
 8005b38:	6819      	ldr	r1, [r3, #0]
 8005b3a:	1d08      	adds	r0, r1, #4
 8005b3c:	6018      	str	r0, [r3, #0]
 8005b3e:	062e      	lsls	r6, r5, #24
 8005b40:	d501      	bpl.n	8005b46 <_printf_i+0xbe>
 8005b42:	680d      	ldr	r5, [r1, #0]
 8005b44:	e003      	b.n	8005b4e <_printf_i+0xc6>
 8005b46:	066d      	lsls	r5, r5, #25
 8005b48:	d5fb      	bpl.n	8005b42 <_printf_i+0xba>
 8005b4a:	680d      	ldr	r5, [r1, #0]
 8005b4c:	b2ad      	uxth	r5, r5
 8005b4e:	4b54      	ldr	r3, [pc, #336]	; (8005ca0 <_printf_i+0x218>)
 8005b50:	2708      	movs	r7, #8
 8005b52:	9303      	str	r3, [sp, #12]
 8005b54:	2a6f      	cmp	r2, #111	; 0x6f
 8005b56:	d000      	beq.n	8005b5a <_printf_i+0xd2>
 8005b58:	3702      	adds	r7, #2
 8005b5a:	0023      	movs	r3, r4
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	3343      	adds	r3, #67	; 0x43
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	6863      	ldr	r3, [r4, #4]
 8005b64:	60a3      	str	r3, [r4, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	db03      	blt.n	8005b72 <_printf_i+0xea>
 8005b6a:	2104      	movs	r1, #4
 8005b6c:	6822      	ldr	r2, [r4, #0]
 8005b6e:	438a      	bics	r2, r1
 8005b70:	6022      	str	r2, [r4, #0]
 8005b72:	2d00      	cmp	r5, #0
 8005b74:	d102      	bne.n	8005b7c <_printf_i+0xf4>
 8005b76:	9e04      	ldr	r6, [sp, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00c      	beq.n	8005b96 <_printf_i+0x10e>
 8005b7c:	9e04      	ldr	r6, [sp, #16]
 8005b7e:	0028      	movs	r0, r5
 8005b80:	0039      	movs	r1, r7
 8005b82:	f7fa fb59 	bl	8000238 <__aeabi_uidivmod>
 8005b86:	9b03      	ldr	r3, [sp, #12]
 8005b88:	3e01      	subs	r6, #1
 8005b8a:	5c5b      	ldrb	r3, [r3, r1]
 8005b8c:	7033      	strb	r3, [r6, #0]
 8005b8e:	002b      	movs	r3, r5
 8005b90:	0005      	movs	r5, r0
 8005b92:	429f      	cmp	r7, r3
 8005b94:	d9f3      	bls.n	8005b7e <_printf_i+0xf6>
 8005b96:	2f08      	cmp	r7, #8
 8005b98:	d109      	bne.n	8005bae <_printf_i+0x126>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	07db      	lsls	r3, r3, #31
 8005b9e:	d506      	bpl.n	8005bae <_printf_i+0x126>
 8005ba0:	6862      	ldr	r2, [r4, #4]
 8005ba2:	6923      	ldr	r3, [r4, #16]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	dc02      	bgt.n	8005bae <_printf_i+0x126>
 8005ba8:	2330      	movs	r3, #48	; 0x30
 8005baa:	3e01      	subs	r6, #1
 8005bac:	7033      	strb	r3, [r6, #0]
 8005bae:	9b04      	ldr	r3, [sp, #16]
 8005bb0:	1b9b      	subs	r3, r3, r6
 8005bb2:	6123      	str	r3, [r4, #16]
 8005bb4:	9b07      	ldr	r3, [sp, #28]
 8005bb6:	0021      	movs	r1, r4
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	9805      	ldr	r0, [sp, #20]
 8005bbc:	9b06      	ldr	r3, [sp, #24]
 8005bbe:	aa09      	add	r2, sp, #36	; 0x24
 8005bc0:	f7ff fef2 	bl	80059a8 <_printf_common>
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	d147      	bne.n	8005c58 <_printf_i+0x1d0>
 8005bc8:	2001      	movs	r0, #1
 8005bca:	4240      	negs	r0, r0
 8005bcc:	b00b      	add	sp, #44	; 0x2c
 8005bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	6809      	ldr	r1, [r1, #0]
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	6022      	str	r2, [r4, #0]
 8005bd8:	2278      	movs	r2, #120	; 0x78
 8005bda:	4932      	ldr	r1, [pc, #200]	; (8005ca4 <_printf_i+0x21c>)
 8005bdc:	9103      	str	r1, [sp, #12]
 8005bde:	0021      	movs	r1, r4
 8005be0:	3145      	adds	r1, #69	; 0x45
 8005be2:	700a      	strb	r2, [r1, #0]
 8005be4:	6819      	ldr	r1, [r3, #0]
 8005be6:	6822      	ldr	r2, [r4, #0]
 8005be8:	c920      	ldmia	r1!, {r5}
 8005bea:	0610      	lsls	r0, r2, #24
 8005bec:	d402      	bmi.n	8005bf4 <_printf_i+0x16c>
 8005bee:	0650      	lsls	r0, r2, #25
 8005bf0:	d500      	bpl.n	8005bf4 <_printf_i+0x16c>
 8005bf2:	b2ad      	uxth	r5, r5
 8005bf4:	6019      	str	r1, [r3, #0]
 8005bf6:	07d3      	lsls	r3, r2, #31
 8005bf8:	d502      	bpl.n	8005c00 <_printf_i+0x178>
 8005bfa:	2320      	movs	r3, #32
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	6023      	str	r3, [r4, #0]
 8005c00:	2710      	movs	r7, #16
 8005c02:	2d00      	cmp	r5, #0
 8005c04:	d1a9      	bne.n	8005b5a <_printf_i+0xd2>
 8005c06:	2220      	movs	r2, #32
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	4393      	bics	r3, r2
 8005c0c:	6023      	str	r3, [r4, #0]
 8005c0e:	e7a4      	b.n	8005b5a <_printf_i+0xd2>
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	680d      	ldr	r5, [r1, #0]
 8005c14:	1d10      	adds	r0, r2, #4
 8005c16:	6949      	ldr	r1, [r1, #20]
 8005c18:	6018      	str	r0, [r3, #0]
 8005c1a:	6813      	ldr	r3, [r2, #0]
 8005c1c:	062e      	lsls	r6, r5, #24
 8005c1e:	d501      	bpl.n	8005c24 <_printf_i+0x19c>
 8005c20:	6019      	str	r1, [r3, #0]
 8005c22:	e002      	b.n	8005c2a <_printf_i+0x1a2>
 8005c24:	066d      	lsls	r5, r5, #25
 8005c26:	d5fb      	bpl.n	8005c20 <_printf_i+0x198>
 8005c28:	8019      	strh	r1, [r3, #0]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	9e04      	ldr	r6, [sp, #16]
 8005c2e:	6123      	str	r3, [r4, #16]
 8005c30:	e7c0      	b.n	8005bb4 <_printf_i+0x12c>
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	1d11      	adds	r1, r2, #4
 8005c36:	6019      	str	r1, [r3, #0]
 8005c38:	6816      	ldr	r6, [r2, #0]
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	0030      	movs	r0, r6
 8005c3e:	6862      	ldr	r2, [r4, #4]
 8005c40:	f000 fa34 	bl	80060ac <memchr>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	d001      	beq.n	8005c4c <_printf_i+0x1c4>
 8005c48:	1b80      	subs	r0, r0, r6
 8005c4a:	6060      	str	r0, [r4, #4]
 8005c4c:	6863      	ldr	r3, [r4, #4]
 8005c4e:	6123      	str	r3, [r4, #16]
 8005c50:	2300      	movs	r3, #0
 8005c52:	9a04      	ldr	r2, [sp, #16]
 8005c54:	7013      	strb	r3, [r2, #0]
 8005c56:	e7ad      	b.n	8005bb4 <_printf_i+0x12c>
 8005c58:	0032      	movs	r2, r6
 8005c5a:	6923      	ldr	r3, [r4, #16]
 8005c5c:	9906      	ldr	r1, [sp, #24]
 8005c5e:	9805      	ldr	r0, [sp, #20]
 8005c60:	9d07      	ldr	r5, [sp, #28]
 8005c62:	47a8      	blx	r5
 8005c64:	3001      	adds	r0, #1
 8005c66:	d0af      	beq.n	8005bc8 <_printf_i+0x140>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	079b      	lsls	r3, r3, #30
 8005c6c:	d415      	bmi.n	8005c9a <_printf_i+0x212>
 8005c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c70:	68e0      	ldr	r0, [r4, #12]
 8005c72:	4298      	cmp	r0, r3
 8005c74:	daaa      	bge.n	8005bcc <_printf_i+0x144>
 8005c76:	0018      	movs	r0, r3
 8005c78:	e7a8      	b.n	8005bcc <_printf_i+0x144>
 8005c7a:	0022      	movs	r2, r4
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	9906      	ldr	r1, [sp, #24]
 8005c80:	9805      	ldr	r0, [sp, #20]
 8005c82:	9e07      	ldr	r6, [sp, #28]
 8005c84:	3219      	adds	r2, #25
 8005c86:	47b0      	blx	r6
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d09d      	beq.n	8005bc8 <_printf_i+0x140>
 8005c8c:	3501      	adds	r5, #1
 8005c8e:	68e3      	ldr	r3, [r4, #12]
 8005c90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c92:	1a9b      	subs	r3, r3, r2
 8005c94:	42ab      	cmp	r3, r5
 8005c96:	dcf0      	bgt.n	8005c7a <_printf_i+0x1f2>
 8005c98:	e7e9      	b.n	8005c6e <_printf_i+0x1e6>
 8005c9a:	2500      	movs	r5, #0
 8005c9c:	e7f7      	b.n	8005c8e <_printf_i+0x206>
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	08006422 	.word	0x08006422
 8005ca4:	08006433 	.word	0x08006433

08005ca8 <_scanf_chars>:
 8005ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005caa:	0015      	movs	r5, r2
 8005cac:	688a      	ldr	r2, [r1, #8]
 8005cae:	000c      	movs	r4, r1
 8005cb0:	9001      	str	r0, [sp, #4]
 8005cb2:	2a00      	cmp	r2, #0
 8005cb4:	d105      	bne.n	8005cc2 <_scanf_chars+0x1a>
 8005cb6:	6989      	ldr	r1, [r1, #24]
 8005cb8:	3201      	adds	r2, #1
 8005cba:	2900      	cmp	r1, #0
 8005cbc:	d000      	beq.n	8005cc0 <_scanf_chars+0x18>
 8005cbe:	3a02      	subs	r2, #2
 8005cc0:	60a2      	str	r2, [r4, #8]
 8005cc2:	6822      	ldr	r2, [r4, #0]
 8005cc4:	06d2      	lsls	r2, r2, #27
 8005cc6:	d403      	bmi.n	8005cd0 <_scanf_chars+0x28>
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	1d11      	adds	r1, r2, #4
 8005ccc:	6019      	str	r1, [r3, #0]
 8005cce:	6817      	ldr	r7, [r2, #0]
 8005cd0:	2600      	movs	r6, #0
 8005cd2:	69a0      	ldr	r0, [r4, #24]
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d013      	beq.n	8005d00 <_scanf_chars+0x58>
 8005cd8:	2801      	cmp	r0, #1
 8005cda:	d108      	bne.n	8005cee <_scanf_chars+0x46>
 8005cdc:	682b      	ldr	r3, [r5, #0]
 8005cde:	6962      	ldr	r2, [r4, #20]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	5cd3      	ldrb	r3, [r2, r3]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10b      	bne.n	8005d00 <_scanf_chars+0x58>
 8005ce8:	2e00      	cmp	r6, #0
 8005cea:	d038      	beq.n	8005d5e <_scanf_chars+0xb6>
 8005cec:	e026      	b.n	8005d3c <_scanf_chars+0x94>
 8005cee:	2802      	cmp	r0, #2
 8005cf0:	d124      	bne.n	8005d3c <_scanf_chars+0x94>
 8005cf2:	682b      	ldr	r3, [r5, #0]
 8005cf4:	4a1a      	ldr	r2, [pc, #104]	; (8005d60 <_scanf_chars+0xb8>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	5cd3      	ldrb	r3, [r2, r3]
 8005cfa:	2208      	movs	r2, #8
 8005cfc:	4213      	tst	r3, r2
 8005cfe:	d11d      	bne.n	8005d3c <_scanf_chars+0x94>
 8005d00:	2210      	movs	r2, #16
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	3601      	adds	r6, #1
 8005d06:	4213      	tst	r3, r2
 8005d08:	d103      	bne.n	8005d12 <_scanf_chars+0x6a>
 8005d0a:	682b      	ldr	r3, [r5, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	703b      	strb	r3, [r7, #0]
 8005d10:	3701      	adds	r7, #1
 8005d12:	682a      	ldr	r2, [r5, #0]
 8005d14:	686b      	ldr	r3, [r5, #4]
 8005d16:	3201      	adds	r2, #1
 8005d18:	602a      	str	r2, [r5, #0]
 8005d1a:	68a2      	ldr	r2, [r4, #8]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	3a01      	subs	r2, #1
 8005d20:	606b      	str	r3, [r5, #4]
 8005d22:	60a2      	str	r2, [r4, #8]
 8005d24:	2a00      	cmp	r2, #0
 8005d26:	d009      	beq.n	8005d3c <_scanf_chars+0x94>
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	dcd2      	bgt.n	8005cd2 <_scanf_chars+0x2a>
 8005d2c:	23c0      	movs	r3, #192	; 0xc0
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	0029      	movs	r1, r5
 8005d32:	58e3      	ldr	r3, [r4, r3]
 8005d34:	9801      	ldr	r0, [sp, #4]
 8005d36:	4798      	blx	r3
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	d0ca      	beq.n	8005cd2 <_scanf_chars+0x2a>
 8005d3c:	6822      	ldr	r2, [r4, #0]
 8005d3e:	2310      	movs	r3, #16
 8005d40:	0011      	movs	r1, r2
 8005d42:	4019      	ands	r1, r3
 8005d44:	421a      	tst	r2, r3
 8005d46:	d106      	bne.n	8005d56 <_scanf_chars+0xae>
 8005d48:	68e3      	ldr	r3, [r4, #12]
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	60e3      	str	r3, [r4, #12]
 8005d4e:	69a3      	ldr	r3, [r4, #24]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d000      	beq.n	8005d56 <_scanf_chars+0xae>
 8005d54:	7039      	strb	r1, [r7, #0]
 8005d56:	2000      	movs	r0, #0
 8005d58:	6923      	ldr	r3, [r4, #16]
 8005d5a:	199b      	adds	r3, r3, r6
 8005d5c:	6123      	str	r3, [r4, #16]
 8005d5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d60:	08006311 	.word	0x08006311

08005d64 <_scanf_i>:
 8005d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d66:	b08b      	sub	sp, #44	; 0x2c
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	4b7a      	ldr	r3, [pc, #488]	; (8005f54 <_scanf_i+0x1f0>)
 8005d6c:	0016      	movs	r6, r2
 8005d6e:	9004      	str	r0, [sp, #16]
 8005d70:	aa07      	add	r2, sp, #28
 8005d72:	cba1      	ldmia	r3!, {r0, r5, r7}
 8005d74:	c2a1      	stmia	r2!, {r0, r5, r7}
 8005d76:	4a78      	ldr	r2, [pc, #480]	; (8005f58 <_scanf_i+0x1f4>)
 8005d78:	698b      	ldr	r3, [r1, #24]
 8005d7a:	000c      	movs	r4, r1
 8005d7c:	9205      	str	r2, [sp, #20]
 8005d7e:	2b03      	cmp	r3, #3
 8005d80:	d001      	beq.n	8005d86 <_scanf_i+0x22>
 8005d82:	4b76      	ldr	r3, [pc, #472]	; (8005f5c <_scanf_i+0x1f8>)
 8005d84:	9305      	str	r3, [sp, #20]
 8005d86:	22ae      	movs	r2, #174	; 0xae
 8005d88:	2000      	movs	r0, #0
 8005d8a:	68a3      	ldr	r3, [r4, #8]
 8005d8c:	0052      	lsls	r2, r2, #1
 8005d8e:	1e59      	subs	r1, r3, #1
 8005d90:	9003      	str	r0, [sp, #12]
 8005d92:	4291      	cmp	r1, r2
 8005d94:	d905      	bls.n	8005da2 <_scanf_i+0x3e>
 8005d96:	3b5e      	subs	r3, #94	; 0x5e
 8005d98:	3bff      	subs	r3, #255	; 0xff
 8005d9a:	9303      	str	r3, [sp, #12]
 8005d9c:	235e      	movs	r3, #94	; 0x5e
 8005d9e:	33ff      	adds	r3, #255	; 0xff
 8005da0:	60a3      	str	r3, [r4, #8]
 8005da2:	0023      	movs	r3, r4
 8005da4:	331c      	adds	r3, #28
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	23d0      	movs	r3, #208	; 0xd0
 8005daa:	2700      	movs	r7, #0
 8005dac:	6822      	ldr	r2, [r4, #0]
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	4313      	orrs	r3, r2
 8005db2:	6023      	str	r3, [r4, #0]
 8005db4:	9b00      	ldr	r3, [sp, #0]
 8005db6:	9302      	str	r3, [sp, #8]
 8005db8:	6833      	ldr	r3, [r6, #0]
 8005dba:	a807      	add	r0, sp, #28
 8005dbc:	7819      	ldrb	r1, [r3, #0]
 8005dbe:	00bb      	lsls	r3, r7, #2
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	5818      	ldr	r0, [r3, r0]
 8005dc4:	f000 f972 	bl	80060ac <memchr>
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d02a      	beq.n	8005e22 <_scanf_i+0xbe>
 8005dcc:	2f01      	cmp	r7, #1
 8005dce:	d161      	bne.n	8005e94 <_scanf_i+0x130>
 8005dd0:	6863      	ldr	r3, [r4, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <_scanf_i+0x80>
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	6822      	ldr	r2, [r4, #0]
 8005dda:	6063      	str	r3, [r4, #4]
 8005ddc:	33f9      	adds	r3, #249	; 0xf9
 8005dde:	33ff      	adds	r3, #255	; 0xff
 8005de0:	4313      	orrs	r3, r2
 8005de2:	6023      	str	r3, [r4, #0]
 8005de4:	6823      	ldr	r3, [r4, #0]
 8005de6:	4a5e      	ldr	r2, [pc, #376]	; (8005f60 <_scanf_i+0x1fc>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	6023      	str	r3, [r4, #0]
 8005dec:	68a3      	ldr	r3, [r4, #8]
 8005dee:	1e5a      	subs	r2, r3, #1
 8005df0:	60a2      	str	r2, [r4, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d015      	beq.n	8005e22 <_scanf_i+0xbe>
 8005df6:	6833      	ldr	r3, [r6, #0]
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	6032      	str	r2, [r6, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	9a02      	ldr	r2, [sp, #8]
 8005e00:	7013      	strb	r3, [r2, #0]
 8005e02:	6873      	ldr	r3, [r6, #4]
 8005e04:	1c55      	adds	r5, r2, #1
 8005e06:	3b01      	subs	r3, #1
 8005e08:	6073      	str	r3, [r6, #4]
 8005e0a:	9502      	str	r5, [sp, #8]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	dc08      	bgt.n	8005e22 <_scanf_i+0xbe>
 8005e10:	23c0      	movs	r3, #192	; 0xc0
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	0031      	movs	r1, r6
 8005e16:	58e3      	ldr	r3, [r4, r3]
 8005e18:	9804      	ldr	r0, [sp, #16]
 8005e1a:	4798      	blx	r3
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d000      	beq.n	8005e22 <_scanf_i+0xbe>
 8005e20:	e080      	b.n	8005f24 <_scanf_i+0x1c0>
 8005e22:	3701      	adds	r7, #1
 8005e24:	2f03      	cmp	r7, #3
 8005e26:	d1c7      	bne.n	8005db8 <_scanf_i+0x54>
 8005e28:	6863      	ldr	r3, [r4, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <_scanf_i+0xce>
 8005e2e:	330a      	adds	r3, #10
 8005e30:	6063      	str	r3, [r4, #4]
 8005e32:	2110      	movs	r1, #16
 8005e34:	2700      	movs	r7, #0
 8005e36:	6863      	ldr	r3, [r4, #4]
 8005e38:	6960      	ldr	r0, [r4, #20]
 8005e3a:	1ac9      	subs	r1, r1, r3
 8005e3c:	4b49      	ldr	r3, [pc, #292]	; (8005f64 <_scanf_i+0x200>)
 8005e3e:	18c9      	adds	r1, r1, r3
 8005e40:	f000 f894 	bl	8005f6c <__sccl>
 8005e44:	9d02      	ldr	r5, [sp, #8]
 8005e46:	68a3      	ldr	r3, [r4, #8]
 8005e48:	6820      	ldr	r0, [r4, #0]
 8005e4a:	9302      	str	r3, [sp, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d040      	beq.n	8005ed2 <_scanf_i+0x16e>
 8005e50:	6831      	ldr	r1, [r6, #0]
 8005e52:	6963      	ldr	r3, [r4, #20]
 8005e54:	780a      	ldrb	r2, [r1, #0]
 8005e56:	5c9b      	ldrb	r3, [r3, r2]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d03a      	beq.n	8005ed2 <_scanf_i+0x16e>
 8005e5c:	2a30      	cmp	r2, #48	; 0x30
 8005e5e:	d129      	bne.n	8005eb4 <_scanf_i+0x150>
 8005e60:	2380      	movs	r3, #128	; 0x80
 8005e62:	011b      	lsls	r3, r3, #4
 8005e64:	4218      	tst	r0, r3
 8005e66:	d025      	beq.n	8005eb4 <_scanf_i+0x150>
 8005e68:	9b03      	ldr	r3, [sp, #12]
 8005e6a:	3701      	adds	r7, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <_scanf_i+0x118>
 8005e70:	001a      	movs	r2, r3
 8005e72:	9b02      	ldr	r3, [sp, #8]
 8005e74:	3a01      	subs	r2, #1
 8005e76:	3301      	adds	r3, #1
 8005e78:	9203      	str	r2, [sp, #12]
 8005e7a:	60a3      	str	r3, [r4, #8]
 8005e7c:	6873      	ldr	r3, [r6, #4]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	6073      	str	r3, [r6, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	dd1d      	ble.n	8005ec2 <_scanf_i+0x15e>
 8005e86:	6833      	ldr	r3, [r6, #0]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	6033      	str	r3, [r6, #0]
 8005e8c:	68a3      	ldr	r3, [r4, #8]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	60a3      	str	r3, [r4, #8]
 8005e92:	e7d8      	b.n	8005e46 <_scanf_i+0xe2>
 8005e94:	2f02      	cmp	r7, #2
 8005e96:	d1a9      	bne.n	8005dec <_scanf_i+0x88>
 8005e98:	21c0      	movs	r1, #192	; 0xc0
 8005e9a:	2380      	movs	r3, #128	; 0x80
 8005e9c:	6822      	ldr	r2, [r4, #0]
 8005e9e:	00c9      	lsls	r1, r1, #3
 8005ea0:	4011      	ands	r1, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	4299      	cmp	r1, r3
 8005ea6:	d1bf      	bne.n	8005e28 <_scanf_i+0xc4>
 8005ea8:	3bf1      	subs	r3, #241	; 0xf1
 8005eaa:	3bff      	subs	r3, #255	; 0xff
 8005eac:	6063      	str	r3, [r4, #4]
 8005eae:	33f0      	adds	r3, #240	; 0xf0
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	e79a      	b.n	8005dea <_scanf_i+0x86>
 8005eb4:	4b2c      	ldr	r3, [pc, #176]	; (8005f68 <_scanf_i+0x204>)
 8005eb6:	4003      	ands	r3, r0
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	780b      	ldrb	r3, [r1, #0]
 8005ebc:	702b      	strb	r3, [r5, #0]
 8005ebe:	3501      	adds	r5, #1
 8005ec0:	e7dc      	b.n	8005e7c <_scanf_i+0x118>
 8005ec2:	23c0      	movs	r3, #192	; 0xc0
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	0031      	movs	r1, r6
 8005ec8:	58e3      	ldr	r3, [r4, r3]
 8005eca:	9804      	ldr	r0, [sp, #16]
 8005ecc:	4798      	blx	r3
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	d0dc      	beq.n	8005e8c <_scanf_i+0x128>
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	05db      	lsls	r3, r3, #23
 8005ed6:	d50e      	bpl.n	8005ef6 <_scanf_i+0x192>
 8005ed8:	9b00      	ldr	r3, [sp, #0]
 8005eda:	429d      	cmp	r5, r3
 8005edc:	d907      	bls.n	8005eee <_scanf_i+0x18a>
 8005ede:	23be      	movs	r3, #190	; 0xbe
 8005ee0:	3d01      	subs	r5, #1
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	0032      	movs	r2, r6
 8005ee6:	7829      	ldrb	r1, [r5, #0]
 8005ee8:	58e3      	ldr	r3, [r4, r3]
 8005eea:	9804      	ldr	r0, [sp, #16]
 8005eec:	4798      	blx	r3
 8005eee:	9b00      	ldr	r3, [sp, #0]
 8005ef0:	2001      	movs	r0, #1
 8005ef2:	429d      	cmp	r5, r3
 8005ef4:	d029      	beq.n	8005f4a <_scanf_i+0x1e6>
 8005ef6:	6821      	ldr	r1, [r4, #0]
 8005ef8:	2310      	movs	r3, #16
 8005efa:	000a      	movs	r2, r1
 8005efc:	401a      	ands	r2, r3
 8005efe:	4219      	tst	r1, r3
 8005f00:	d11c      	bne.n	8005f3c <_scanf_i+0x1d8>
 8005f02:	702a      	strb	r2, [r5, #0]
 8005f04:	6863      	ldr	r3, [r4, #4]
 8005f06:	9900      	ldr	r1, [sp, #0]
 8005f08:	9804      	ldr	r0, [sp, #16]
 8005f0a:	9e05      	ldr	r6, [sp, #20]
 8005f0c:	47b0      	blx	r6
 8005f0e:	9b01      	ldr	r3, [sp, #4]
 8005f10:	6822      	ldr	r2, [r4, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	0691      	lsls	r1, r2, #26
 8005f16:	d507      	bpl.n	8005f28 <_scanf_i+0x1c4>
 8005f18:	9901      	ldr	r1, [sp, #4]
 8005f1a:	1d1a      	adds	r2, r3, #4
 8005f1c:	600a      	str	r2, [r1, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6018      	str	r0, [r3, #0]
 8005f22:	e008      	b.n	8005f36 <_scanf_i+0x1d2>
 8005f24:	2700      	movs	r7, #0
 8005f26:	e7d4      	b.n	8005ed2 <_scanf_i+0x16e>
 8005f28:	1d19      	adds	r1, r3, #4
 8005f2a:	07d6      	lsls	r6, r2, #31
 8005f2c:	d50f      	bpl.n	8005f4e <_scanf_i+0x1ea>
 8005f2e:	9a01      	ldr	r2, [sp, #4]
 8005f30:	6011      	str	r1, [r2, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	8018      	strh	r0, [r3, #0]
 8005f36:	68e3      	ldr	r3, [r4, #12]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	60e3      	str	r3, [r4, #12]
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	9b00      	ldr	r3, [sp, #0]
 8005f40:	1aed      	subs	r5, r5, r3
 8005f42:	6923      	ldr	r3, [r4, #16]
 8005f44:	19ed      	adds	r5, r5, r7
 8005f46:	195b      	adds	r3, r3, r5
 8005f48:	6123      	str	r3, [r4, #16]
 8005f4a:	b00b      	add	sp, #44	; 0x2c
 8005f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f4e:	9a01      	ldr	r2, [sp, #4]
 8005f50:	6011      	str	r1, [r2, #0]
 8005f52:	e7e4      	b.n	8005f1e <_scanf_i+0x1ba>
 8005f54:	080062cc 	.word	0x080062cc
 8005f58:	08005041 	.word	0x08005041
 8005f5c:	08006239 	.word	0x08006239
 8005f60:	fffffaff 	.word	0xfffffaff
 8005f64:	08006444 	.word	0x08006444
 8005f68:	fffff6ff 	.word	0xfffff6ff

08005f6c <__sccl>:
 8005f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f6e:	780b      	ldrb	r3, [r1, #0]
 8005f70:	0004      	movs	r4, r0
 8005f72:	2b5e      	cmp	r3, #94	; 0x5e
 8005f74:	d019      	beq.n	8005faa <__sccl+0x3e>
 8005f76:	2200      	movs	r2, #0
 8005f78:	1c4d      	adds	r5, r1, #1
 8005f7a:	0021      	movs	r1, r4
 8005f7c:	1c60      	adds	r0, r4, #1
 8005f7e:	30ff      	adds	r0, #255	; 0xff
 8005f80:	700a      	strb	r2, [r1, #0]
 8005f82:	3101      	adds	r1, #1
 8005f84:	4281      	cmp	r1, r0
 8005f86:	d1fb      	bne.n	8005f80 <__sccl+0x14>
 8005f88:	1e68      	subs	r0, r5, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00c      	beq.n	8005fa8 <__sccl+0x3c>
 8005f8e:	2101      	movs	r1, #1
 8005f90:	262d      	movs	r6, #45	; 0x2d
 8005f92:	404a      	eors	r2, r1
 8005f94:	0028      	movs	r0, r5
 8005f96:	54e2      	strb	r2, [r4, r3]
 8005f98:	7801      	ldrb	r1, [r0, #0]
 8005f9a:	1c45      	adds	r5, r0, #1
 8005f9c:	292d      	cmp	r1, #45	; 0x2d
 8005f9e:	d00c      	beq.n	8005fba <__sccl+0x4e>
 8005fa0:	295d      	cmp	r1, #93	; 0x5d
 8005fa2:	d01d      	beq.n	8005fe0 <__sccl+0x74>
 8005fa4:	2900      	cmp	r1, #0
 8005fa6:	d104      	bne.n	8005fb2 <__sccl+0x46>
 8005fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005faa:	2201      	movs	r2, #1
 8005fac:	784b      	ldrb	r3, [r1, #1]
 8005fae:	1c8d      	adds	r5, r1, #2
 8005fb0:	e7e3      	b.n	8005f7a <__sccl+0xe>
 8005fb2:	000b      	movs	r3, r1
 8005fb4:	e7ee      	b.n	8005f94 <__sccl+0x28>
 8005fb6:	0033      	movs	r3, r6
 8005fb8:	e7ec      	b.n	8005f94 <__sccl+0x28>
 8005fba:	7841      	ldrb	r1, [r0, #1]
 8005fbc:	295d      	cmp	r1, #93	; 0x5d
 8005fbe:	d0fa      	beq.n	8005fb6 <__sccl+0x4a>
 8005fc0:	428b      	cmp	r3, r1
 8005fc2:	dcf8      	bgt.n	8005fb6 <__sccl+0x4a>
 8005fc4:	001d      	movs	r5, r3
 8005fc6:	3002      	adds	r0, #2
 8005fc8:	3501      	adds	r5, #1
 8005fca:	5562      	strb	r2, [r4, r5]
 8005fcc:	42a9      	cmp	r1, r5
 8005fce:	dcfb      	bgt.n	8005fc8 <__sccl+0x5c>
 8005fd0:	2500      	movs	r5, #0
 8005fd2:	1c5f      	adds	r7, r3, #1
 8005fd4:	428b      	cmp	r3, r1
 8005fd6:	da01      	bge.n	8005fdc <__sccl+0x70>
 8005fd8:	1acd      	subs	r5, r1, r3
 8005fda:	3d01      	subs	r5, #1
 8005fdc:	197b      	adds	r3, r7, r5
 8005fde:	e7db      	b.n	8005f98 <__sccl+0x2c>
 8005fe0:	0028      	movs	r0, r5
 8005fe2:	e7e1      	b.n	8005fa8 <__sccl+0x3c>

08005fe4 <__submore>:
 8005fe4:	000b      	movs	r3, r1
 8005fe6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fe8:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8005fea:	3344      	adds	r3, #68	; 0x44
 8005fec:	000c      	movs	r4, r1
 8005fee:	429d      	cmp	r5, r3
 8005ff0:	d11c      	bne.n	800602c <__submore+0x48>
 8005ff2:	2680      	movs	r6, #128	; 0x80
 8005ff4:	00f6      	lsls	r6, r6, #3
 8005ff6:	0031      	movs	r1, r6
 8005ff8:	f7ff f91c 	bl	8005234 <_malloc_r>
 8005ffc:	2800      	cmp	r0, #0
 8005ffe:	d102      	bne.n	8006006 <__submore+0x22>
 8006000:	2001      	movs	r0, #1
 8006002:	4240      	negs	r0, r0
 8006004:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006006:	0023      	movs	r3, r4
 8006008:	6360      	str	r0, [r4, #52]	; 0x34
 800600a:	63a6      	str	r6, [r4, #56]	; 0x38
 800600c:	3346      	adds	r3, #70	; 0x46
 800600e:	781a      	ldrb	r2, [r3, #0]
 8006010:	4b10      	ldr	r3, [pc, #64]	; (8006054 <__submore+0x70>)
 8006012:	54c2      	strb	r2, [r0, r3]
 8006014:	0023      	movs	r3, r4
 8006016:	3345      	adds	r3, #69	; 0x45
 8006018:	781a      	ldrb	r2, [r3, #0]
 800601a:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <__submore+0x74>)
 800601c:	54c2      	strb	r2, [r0, r3]
 800601e:	782a      	ldrb	r2, [r5, #0]
 8006020:	4b0e      	ldr	r3, [pc, #56]	; (800605c <__submore+0x78>)
 8006022:	54c2      	strb	r2, [r0, r3]
 8006024:	18c0      	adds	r0, r0, r3
 8006026:	6020      	str	r0, [r4, #0]
 8006028:	2000      	movs	r0, #0
 800602a:	e7eb      	b.n	8006004 <__submore+0x20>
 800602c:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800602e:	0029      	movs	r1, r5
 8006030:	0073      	lsls	r3, r6, #1
 8006032:	001a      	movs	r2, r3
 8006034:	9301      	str	r3, [sp, #4]
 8006036:	f000 f84d 	bl	80060d4 <_realloc_r>
 800603a:	1e05      	subs	r5, r0, #0
 800603c:	d0e0      	beq.n	8006000 <__submore+0x1c>
 800603e:	1987      	adds	r7, r0, r6
 8006040:	0001      	movs	r1, r0
 8006042:	0032      	movs	r2, r6
 8006044:	0038      	movs	r0, r7
 8006046:	f000 f83c 	bl	80060c2 <memcpy>
 800604a:	9b01      	ldr	r3, [sp, #4]
 800604c:	6027      	str	r7, [r4, #0]
 800604e:	6365      	str	r5, [r4, #52]	; 0x34
 8006050:	63a3      	str	r3, [r4, #56]	; 0x38
 8006052:	e7e9      	b.n	8006028 <__submore+0x44>
 8006054:	000003ff 	.word	0x000003ff
 8006058:	000003fe 	.word	0x000003fe
 800605c:	000003fd 	.word	0x000003fd

08006060 <memmove>:
 8006060:	b510      	push	{r4, lr}
 8006062:	4288      	cmp	r0, r1
 8006064:	d902      	bls.n	800606c <memmove+0xc>
 8006066:	188b      	adds	r3, r1, r2
 8006068:	4298      	cmp	r0, r3
 800606a:	d303      	bcc.n	8006074 <memmove+0x14>
 800606c:	2300      	movs	r3, #0
 800606e:	e007      	b.n	8006080 <memmove+0x20>
 8006070:	5c8b      	ldrb	r3, [r1, r2]
 8006072:	5483      	strb	r3, [r0, r2]
 8006074:	3a01      	subs	r2, #1
 8006076:	d2fb      	bcs.n	8006070 <memmove+0x10>
 8006078:	bd10      	pop	{r4, pc}
 800607a:	5ccc      	ldrb	r4, [r1, r3]
 800607c:	54c4      	strb	r4, [r0, r3]
 800607e:	3301      	adds	r3, #1
 8006080:	429a      	cmp	r2, r3
 8006082:	d1fa      	bne.n	800607a <memmove+0x1a>
 8006084:	e7f8      	b.n	8006078 <memmove+0x18>
	...

08006088 <_sbrk_r>:
 8006088:	2300      	movs	r3, #0
 800608a:	b570      	push	{r4, r5, r6, lr}
 800608c:	4d06      	ldr	r5, [pc, #24]	; (80060a8 <_sbrk_r+0x20>)
 800608e:	0004      	movs	r4, r0
 8006090:	0008      	movs	r0, r1
 8006092:	602b      	str	r3, [r5, #0]
 8006094:	f7fa fee0 	bl	8000e58 <_sbrk>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	d103      	bne.n	80060a4 <_sbrk_r+0x1c>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d000      	beq.n	80060a4 <_sbrk_r+0x1c>
 80060a2:	6023      	str	r3, [r4, #0]
 80060a4:	bd70      	pop	{r4, r5, r6, pc}
 80060a6:	46c0      	nop			; (mov r8, r8)
 80060a8:	20000414 	.word	0x20000414

080060ac <memchr>:
 80060ac:	b2c9      	uxtb	r1, r1
 80060ae:	1882      	adds	r2, r0, r2
 80060b0:	4290      	cmp	r0, r2
 80060b2:	d101      	bne.n	80060b8 <memchr+0xc>
 80060b4:	2000      	movs	r0, #0
 80060b6:	4770      	bx	lr
 80060b8:	7803      	ldrb	r3, [r0, #0]
 80060ba:	428b      	cmp	r3, r1
 80060bc:	d0fb      	beq.n	80060b6 <memchr+0xa>
 80060be:	3001      	adds	r0, #1
 80060c0:	e7f6      	b.n	80060b0 <memchr+0x4>

080060c2 <memcpy>:
 80060c2:	2300      	movs	r3, #0
 80060c4:	b510      	push	{r4, lr}
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d100      	bne.n	80060cc <memcpy+0xa>
 80060ca:	bd10      	pop	{r4, pc}
 80060cc:	5ccc      	ldrb	r4, [r1, r3]
 80060ce:	54c4      	strb	r4, [r0, r3]
 80060d0:	3301      	adds	r3, #1
 80060d2:	e7f8      	b.n	80060c6 <memcpy+0x4>

080060d4 <_realloc_r>:
 80060d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060d6:	0007      	movs	r7, r0
 80060d8:	000e      	movs	r6, r1
 80060da:	0014      	movs	r4, r2
 80060dc:	2900      	cmp	r1, #0
 80060de:	d105      	bne.n	80060ec <_realloc_r+0x18>
 80060e0:	0011      	movs	r1, r2
 80060e2:	f7ff f8a7 	bl	8005234 <_malloc_r>
 80060e6:	0005      	movs	r5, r0
 80060e8:	0028      	movs	r0, r5
 80060ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060ec:	2a00      	cmp	r2, #0
 80060ee:	d103      	bne.n	80060f8 <_realloc_r+0x24>
 80060f0:	f7ff f834 	bl	800515c <_free_r>
 80060f4:	0025      	movs	r5, r4
 80060f6:	e7f7      	b.n	80060e8 <_realloc_r+0x14>
 80060f8:	f000 f8a2 	bl	8006240 <_malloc_usable_size_r>
 80060fc:	9001      	str	r0, [sp, #4]
 80060fe:	4284      	cmp	r4, r0
 8006100:	d803      	bhi.n	800610a <_realloc_r+0x36>
 8006102:	0035      	movs	r5, r6
 8006104:	0843      	lsrs	r3, r0, #1
 8006106:	42a3      	cmp	r3, r4
 8006108:	d3ee      	bcc.n	80060e8 <_realloc_r+0x14>
 800610a:	0021      	movs	r1, r4
 800610c:	0038      	movs	r0, r7
 800610e:	f7ff f891 	bl	8005234 <_malloc_r>
 8006112:	1e05      	subs	r5, r0, #0
 8006114:	d0e8      	beq.n	80060e8 <_realloc_r+0x14>
 8006116:	9b01      	ldr	r3, [sp, #4]
 8006118:	0022      	movs	r2, r4
 800611a:	429c      	cmp	r4, r3
 800611c:	d900      	bls.n	8006120 <_realloc_r+0x4c>
 800611e:	001a      	movs	r2, r3
 8006120:	0031      	movs	r1, r6
 8006122:	0028      	movs	r0, r5
 8006124:	f7ff ffcd 	bl	80060c2 <memcpy>
 8006128:	0031      	movs	r1, r6
 800612a:	0038      	movs	r0, r7
 800612c:	f7ff f816 	bl	800515c <_free_r>
 8006130:	e7da      	b.n	80060e8 <_realloc_r+0x14>
	...

08006134 <_strtoul_l.constprop.0>:
 8006134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006136:	b087      	sub	sp, #28
 8006138:	9202      	str	r2, [sp, #8]
 800613a:	4a3e      	ldr	r2, [pc, #248]	; (8006234 <_strtoul_l.constprop.0+0x100>)
 800613c:	001e      	movs	r6, r3
 800613e:	9101      	str	r1, [sp, #4]
 8006140:	000b      	movs	r3, r1
 8006142:	4694      	mov	ip, r2
 8006144:	2108      	movs	r1, #8
 8006146:	9005      	str	r0, [sp, #20]
 8006148:	001a      	movs	r2, r3
 800614a:	4660      	mov	r0, ip
 800614c:	7814      	ldrb	r4, [r2, #0]
 800614e:	3301      	adds	r3, #1
 8006150:	5d00      	ldrb	r0, [r0, r4]
 8006152:	001d      	movs	r5, r3
 8006154:	0007      	movs	r7, r0
 8006156:	400f      	ands	r7, r1
 8006158:	4208      	tst	r0, r1
 800615a:	d1f5      	bne.n	8006148 <_strtoul_l.constprop.0+0x14>
 800615c:	2c2d      	cmp	r4, #45	; 0x2d
 800615e:	d13d      	bne.n	80061dc <_strtoul_l.constprop.0+0xa8>
 8006160:	2701      	movs	r7, #1
 8006162:	781c      	ldrb	r4, [r3, #0]
 8006164:	1c95      	adds	r5, r2, #2
 8006166:	2e00      	cmp	r6, #0
 8006168:	d05f      	beq.n	800622a <_strtoul_l.constprop.0+0xf6>
 800616a:	2e10      	cmp	r6, #16
 800616c:	d109      	bne.n	8006182 <_strtoul_l.constprop.0+0x4e>
 800616e:	2c30      	cmp	r4, #48	; 0x30
 8006170:	d107      	bne.n	8006182 <_strtoul_l.constprop.0+0x4e>
 8006172:	2220      	movs	r2, #32
 8006174:	782b      	ldrb	r3, [r5, #0]
 8006176:	4393      	bics	r3, r2
 8006178:	2b58      	cmp	r3, #88	; 0x58
 800617a:	d151      	bne.n	8006220 <_strtoul_l.constprop.0+0xec>
 800617c:	2610      	movs	r6, #16
 800617e:	786c      	ldrb	r4, [r5, #1]
 8006180:	3502      	adds	r5, #2
 8006182:	2001      	movs	r0, #1
 8006184:	0031      	movs	r1, r6
 8006186:	4240      	negs	r0, r0
 8006188:	f7f9 ffd0 	bl	800012c <__udivsi3>
 800618c:	9003      	str	r0, [sp, #12]
 800618e:	2001      	movs	r0, #1
 8006190:	0031      	movs	r1, r6
 8006192:	4240      	negs	r0, r0
 8006194:	f7fa f850 	bl	8000238 <__aeabi_uidivmod>
 8006198:	2300      	movs	r3, #0
 800619a:	2201      	movs	r2, #1
 800619c:	9104      	str	r1, [sp, #16]
 800619e:	2101      	movs	r1, #1
 80061a0:	0018      	movs	r0, r3
 80061a2:	4694      	mov	ip, r2
 80061a4:	4249      	negs	r1, r1
 80061a6:	0022      	movs	r2, r4
 80061a8:	3a30      	subs	r2, #48	; 0x30
 80061aa:	2a09      	cmp	r2, #9
 80061ac:	d903      	bls.n	80061b6 <_strtoul_l.constprop.0+0x82>
 80061ae:	3a11      	subs	r2, #17
 80061b0:	2a19      	cmp	r2, #25
 80061b2:	d818      	bhi.n	80061e6 <_strtoul_l.constprop.0+0xb2>
 80061b4:	320a      	adds	r2, #10
 80061b6:	4296      	cmp	r6, r2
 80061b8:	dd19      	ble.n	80061ee <_strtoul_l.constprop.0+0xba>
 80061ba:	1c5c      	adds	r4, r3, #1
 80061bc:	d00b      	beq.n	80061d6 <_strtoul_l.constprop.0+0xa2>
 80061be:	9c03      	ldr	r4, [sp, #12]
 80061c0:	000b      	movs	r3, r1
 80061c2:	4284      	cmp	r4, r0
 80061c4:	d307      	bcc.n	80061d6 <_strtoul_l.constprop.0+0xa2>
 80061c6:	d103      	bne.n	80061d0 <_strtoul_l.constprop.0+0x9c>
 80061c8:	9c04      	ldr	r4, [sp, #16]
 80061ca:	000b      	movs	r3, r1
 80061cc:	4294      	cmp	r4, r2
 80061ce:	db02      	blt.n	80061d6 <_strtoul_l.constprop.0+0xa2>
 80061d0:	4663      	mov	r3, ip
 80061d2:	4370      	muls	r0, r6
 80061d4:	1810      	adds	r0, r2, r0
 80061d6:	782c      	ldrb	r4, [r5, #0]
 80061d8:	3501      	adds	r5, #1
 80061da:	e7e4      	b.n	80061a6 <_strtoul_l.constprop.0+0x72>
 80061dc:	2c2b      	cmp	r4, #43	; 0x2b
 80061de:	d1c2      	bne.n	8006166 <_strtoul_l.constprop.0+0x32>
 80061e0:	781c      	ldrb	r4, [r3, #0]
 80061e2:	1c95      	adds	r5, r2, #2
 80061e4:	e7bf      	b.n	8006166 <_strtoul_l.constprop.0+0x32>
 80061e6:	0022      	movs	r2, r4
 80061e8:	3a61      	subs	r2, #97	; 0x61
 80061ea:	2a19      	cmp	r2, #25
 80061ec:	d9e2      	bls.n	80061b4 <_strtoul_l.constprop.0+0x80>
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	d108      	bne.n	8006204 <_strtoul_l.constprop.0+0xd0>
 80061f2:	2222      	movs	r2, #34	; 0x22
 80061f4:	9905      	ldr	r1, [sp, #20]
 80061f6:	0018      	movs	r0, r3
 80061f8:	600a      	str	r2, [r1, #0]
 80061fa:	9a02      	ldr	r2, [sp, #8]
 80061fc:	2a00      	cmp	r2, #0
 80061fe:	d109      	bne.n	8006214 <_strtoul_l.constprop.0+0xe0>
 8006200:	b007      	add	sp, #28
 8006202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006204:	2f00      	cmp	r7, #0
 8006206:	d000      	beq.n	800620a <_strtoul_l.constprop.0+0xd6>
 8006208:	4240      	negs	r0, r0
 800620a:	9a02      	ldr	r2, [sp, #8]
 800620c:	2a00      	cmp	r2, #0
 800620e:	d0f7      	beq.n	8006200 <_strtoul_l.constprop.0+0xcc>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <_strtoul_l.constprop.0+0xe4>
 8006214:	1e6b      	subs	r3, r5, #1
 8006216:	9301      	str	r3, [sp, #4]
 8006218:	9b02      	ldr	r3, [sp, #8]
 800621a:	9a01      	ldr	r2, [sp, #4]
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	e7ef      	b.n	8006200 <_strtoul_l.constprop.0+0xcc>
 8006220:	2430      	movs	r4, #48	; 0x30
 8006222:	2e00      	cmp	r6, #0
 8006224:	d1ad      	bne.n	8006182 <_strtoul_l.constprop.0+0x4e>
 8006226:	3608      	adds	r6, #8
 8006228:	e7ab      	b.n	8006182 <_strtoul_l.constprop.0+0x4e>
 800622a:	2c30      	cmp	r4, #48	; 0x30
 800622c:	d0a1      	beq.n	8006172 <_strtoul_l.constprop.0+0x3e>
 800622e:	260a      	movs	r6, #10
 8006230:	e7a7      	b.n	8006182 <_strtoul_l.constprop.0+0x4e>
 8006232:	46c0      	nop			; (mov r8, r8)
 8006234:	08006311 	.word	0x08006311

08006238 <_strtoul_r>:
 8006238:	b510      	push	{r4, lr}
 800623a:	f7ff ff7b 	bl	8006134 <_strtoul_l.constprop.0>
 800623e:	bd10      	pop	{r4, pc}

08006240 <_malloc_usable_size_r>:
 8006240:	1f0b      	subs	r3, r1, #4
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	1f18      	subs	r0, r3, #4
 8006246:	2b00      	cmp	r3, #0
 8006248:	da01      	bge.n	800624e <_malloc_usable_size_r+0xe>
 800624a:	580b      	ldr	r3, [r1, r0]
 800624c:	18c0      	adds	r0, r0, r3
 800624e:	4770      	bx	lr

08006250 <_init>:
 8006250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006252:	46c0      	nop			; (mov r8, r8)
 8006254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006256:	bc08      	pop	{r3}
 8006258:	469e      	mov	lr, r3
 800625a:	4770      	bx	lr

0800625c <_fini>:
 800625c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625e:	46c0      	nop			; (mov r8, r8)
 8006260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006262:	bc08      	pop	{r3}
 8006264:	469e      	mov	lr, r3
 8006266:	4770      	bx	lr
